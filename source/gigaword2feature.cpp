/* Generated by Cython 0.24 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__gigaword2feature
#define __PYX_HAVE_API__gigaword2feature
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <map>
#include <algorithm>
#include <regex>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* None.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "source/gigaword2feature.pyx",
  "__init__.pxd",
  "stringsource",
  "type.pxd",
};

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_16gigaword2feature_vocabulary;
struct __pyx_obj_16gigaword2feature_processed_sentence;
struct __pyx_obj_16gigaword2feature_example;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser;
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_16gigaword2feature_bigram_char_fofe;

/* "gigaword2feature.pyx":617
 * 
 * 
 * cdef void bigram_char_fofe( string phrase,             # <<<<<<<<<<<<<<
 *                             vector[float]& values, vector[int]& indices,
 *                             float alpha, int row_id = 0 ) nogil:
 */
struct __pyx_opt_args_16gigaword2feature_bigram_char_fofe {
  int __pyx_n;
  int row_id;
};

/* "gigaword2feature.pyx":317
 * 
 * 
 * cdef class vocabulary( object ):             # <<<<<<<<<<<<<<
 *     cdef dict word2idx
 *     cdef dict word2fofe
 */
struct __pyx_obj_16gigaword2feature_vocabulary {
  PyObject_HEAD
  struct __pyx_vtabstruct_16gigaword2feature_vocabulary *__pyx_vtab;
  PyObject *word2idx;
  PyObject *word2fofe;
  float alpha;
  int case_sensitive;
  std::regex *date_pattern_1;
  std::regex *date_pattern_2;
  std::regex *number_pattern;
  std::regex *phone_pattern;
  std::regex *time_pattern;
  std::regex *contains_digit;
};


/* "gigaword2feature.pyx":462
 * 
 * 
 * cdef class processed_sentence:             # <<<<<<<<<<<<<<
 *     """
 *     Any object of this class should not be instantiated outside this module.
 */
struct __pyx_obj_16gigaword2feature_processed_sentence {
  PyObject_HEAD
  struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *__pyx_vtab;
  std::vector<int>  numeric;
  std::vector<std::string>  sentence;
  std::vector<std::vector<int> >  left_context_idx;
  std::vector<std::vector<float> >  left_context_data;
  std::vector<std::vector<int> >  right_context_idx;
  std::vector<std::vector<float> >  right_context_data;
};


/* "gigaword2feature.pyx":598
 * 
 * 
 * cdef class example:             # <<<<<<<<<<<<<<
 *     cdef readonly int sentence_id
 *     cdef readonly int begin_idx
 */
struct __pyx_obj_16gigaword2feature_example {
  PyObject_HEAD
  int sentence_id;
  int begin_idx;
  int end_idx;
  int label;
  PyArrayObject *gazetteer;
};


/* "gigaword2feature.pyx":39
 * 
 * 
 * def KBP2015( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 {
  PyObject_HEAD
  std::vector<std::vector<int> >  __pyx_v_buffer_stack;
  int __pyx_v_cls;
  int __pyx_v_cnt;
  PyObject *__pyx_v_engity_end;
  PyObject *__pyx_v_entity2cls;
  PyObject *__pyx_v_entity_begin;
  PyObject *__pyx_v_entity_end;
  PyObject *__pyx_v_entity_label;
  PyObject *__pyx_v_filename;
  int __pyx_v_i;
  PyObject *__pyx_v_l;
  PyObject *__pyx_v_label;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_sentence;
  PyObject *__pyx_v_text_file;
  PyObject *__pyx_v_tokens;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
};


/* "gigaword2feature.pyx":125
 * 
 * 
 * def gigaword( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword {
  PyObject_HEAD
  PyObject *__pyx_v_filename;
  PyObject *__pyx_v_label;
  PyObject *__pyx_v_last_ner;
  PyObject *__pyx_v_line;
  int __pyx_v_malformed;
  PyObject *__pyx_v_n_discard;
  PyObject *__pyx_v_ner;
  PyObject *__pyx_v_ner2cls;
  PyObject *__pyx_v_ner_begin;
  PyObject *__pyx_v_ner_end;
  PyObject *__pyx_v_ner_label;
  PyObject *__pyx_v_number;
  PyObject *__pyx_v_p;
  PyObject *__pyx_v_sentence;
  PyObject *__pyx_v_slash_idx;
  PyObject *__pyx_v_text_file;
  PyObject *__pyx_v_word;
  Py_ssize_t __pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
};


/* "gigaword2feature.pyx":189
 * 
 * 
 * def gazetteer( filename, mode = 'CoNLL2003' ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer {
  PyObject_HEAD
  PyObject *__pyx_v_ner2cls;
  PyObject *__pyx_v_result;
};


/* "gigaword2feature.pyx":218
 *                     result[ ner2cls[tokens[1]] ].add( HanziConv.toSimplified(tokens[0][1:-1]) )
 * 
 *     logger.info( '; '.join( str((cls,len(result[ner2cls[cls]]))) for cls in ner2cls ) )             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *__pyx_outer_scope;
  PyObject *__pyx_v_cls;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
};


/* "gigaword2feature.pyx":224
 * 
 * 
 * def CoNLL2003( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 {
  PyObject_HEAD
  PyObject *__pyx_v_filename;
  PyObject *__pyx_v_label;
  PyObject *__pyx_v_last_ner;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_ner;
  PyObject *__pyx_v_ner2cls;
  PyObject *__pyx_v_ner_begin;
  PyObject *__pyx_v_ner_end;
  PyObject *__pyx_v_ner_label;
  PyObject *__pyx_v_sentence;
  PyObject *__pyx_v_text_file;
  PyObject *__pyx_v_tokens;
  PyObject *__pyx_v_word;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
};


/* "gigaword2feature.pyx":300
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         # This must be same as in "skipgram-trainer.py"
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices {
  PyObject_HEAD
  PyObject *__pyx_v_self;
  PyObject *__pyx_v_w;
};


/* "gigaword2feature.pyx":304
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 *         for w in sentence:
 *             has_chinese = any( u'\u4e00' <= c <= u'\u9fff' for c in w )             # <<<<<<<<<<<<<<
 *             if has_chinese:
 *                 chars.extend( list(w) )
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *__pyx_outer_scope;
  PyObject *__pyx_v_c;
};


/* "gigaword2feature.pyx":443
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "gigaword2feature.pyx":473
 *     cdef readonly vector[vector[float]] right_context_data
 * 
 *     def __init__( self, sentence, numericizer, a = 0.7, language = 'eng' ):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ {
  PyObject_HEAD
  PyObject *__pyx_v_w;
};


/* "gigaword2feature.pyx":487
 *         if language != 'cmn':
 *             for w in sentence:
 *                 self.sentence.push_back( u''.join( c if ord(c) < 128 else chr(ord(c) % 32) for c in list(w) ) )             # <<<<<<<<<<<<<<
 *             vocab = numericizer
 *             vocab.sentence2indices( self.sentence, self.numeric )
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr {
  PyObject_HEAD
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *__pyx_outer_scope;
  PyObject *__pyx_v_c;
};


/* "gigaword2feature.pyx":655
 * 
 * class batch_constructor:
 *     def __init__( self, parser,             # <<<<<<<<<<<<<<
 *                   numericizer1, numericizer2,
 *                   gazetteer = None, window = 7, alpha = 0.7,
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ {
  PyObject_HEAD
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_v_sentence;
};


/* "gigaword2feature.pyx":744
 *                             name = u' '.join(sentence[i:j])
 *                         else:
 *                             name = u''.join( w[:w.find(u'|iNCML|')] for w in sentence[i:j] )             # <<<<<<<<<<<<<<
 *                         for k, g in enumerate(self.gazetteer):
 *                             if name in g:
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr {
  PyObject_HEAD
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *__pyx_outer_scope;
  PyObject *__pyx_v_w;
};


/* "gigaword2feature.pyx":785
 * 
 *     @cython.boundscheck(False)
 *     def mini_batch( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch {
  PyObject_HEAD
  int __pyx_v_begin_idx;
  float __pyx_v_bigram_alpha;
  std::vector<int>  __pyx_v_bow1;
  std::vector<int>  __pyx_v_bow2;
  PyObject *__pyx_v_candidate;
  int __pyx_v_cnt;
  std::vector<int>  __pyx_v_conv_buff;
  std::vector<std::vector<int> >  __pyx_v_conv_idx;
  PyObject *__pyx_v_dense_buffer;
  PyObject *__pyx_v_disjoint;
  float __pyx_v_disjoint_rate;
  int __pyx_v_end_idx;
  int __pyx_v_feature_choice;
  long __pyx_v_has_char_feature;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  std::vector<int>  __pyx_v_l1_indices;
  std::vector<float>  __pyx_v_l1_values;
  std::vector<int>  __pyx_v_l2_indices;
  std::vector<float>  __pyx_v_l2_values;
  std::vector<int>  __pyx_v_l3_indices;
  std::vector<float>  __pyx_v_l3_values;
  std::vector<int>  __pyx_v_l4_indices;
  std::vector<float>  __pyx_v_l4_values;
  std::vector<int>  __pyx_v_label;
  std::vector<int>  __pyx_v_lbc_indices;
  std::vector<float>  __pyx_v_lbc_values;
  PyObject *__pyx_v_left_c;
  PyObject *__pyx_v_left_init;
  int __pyx_v_n;
  int __pyx_v_n_batch_size;
  int __pyx_v_n_copy;
  struct __pyx_obj_16gigaword2feature_example *__pyx_v_next_example;
  PyObject *__pyx_v_overlap;
  float __pyx_v_overlap_rate;
  std::string __pyx_v_phrase;
  int __pyx_v_phrase_max_length;
  std::vector<int>  __pyx_v_r1_indices;
  std::vector<float>  __pyx_v_r1_values;
  std::vector<int>  __pyx_v_r2_indices;
  std::vector<float>  __pyx_v_r2_values;
  std::vector<int>  __pyx_v_r3_indices;
  std::vector<float>  __pyx_v_r3_values;
  std::vector<int>  __pyx_v_r4_indices;
  std::vector<float>  __pyx_v_r4_values;
  std::vector<int>  __pyx_v_rbc_indices;
  std::vector<float>  __pyx_v_rbc_values;
  int __pyx_v_replace;
  std::string __pyx_v_reversed_phrase;
  PyObject *__pyx_v_right_c;
  PyObject *__pyx_v_right_init;
  PyObject *__pyx_v_self;
  struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_sentence;
  int __pyx_v_shuffle_needed;
  PyObject *__pyx_v_w;
  int __pyx_t_0;
  int __pyx_t_1;
};


/* "gigaword2feature.pyx":1075
 * 
 * 
 *     def mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread {
  PyObject_HEAD
  PyObject *__pyx_v_batch_buffer;
  PyObject *__pyx_v_batch_generator;
  float __pyx_v_disjoint_rate;
  int __pyx_v_feature_choice;
  int __pyx_v_n_batch_size;
  int __pyx_v_n_copy;
  PyObject *__pyx_v_next_batch;
  float __pyx_v_overlap_rate;
  int __pyx_v_replace;
  PyObject *__pyx_v_self;
  int __pyx_v_shuffle_needed;
  PyObject *__pyx_v_t;
  float __pyx_v_timeout;
};


/* "gigaword2feature.pyx":1098
 * 
 * 
 *     def infinite_mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread {
  PyObject_HEAD
  float __pyx_v_disjoint_rate;
  int __pyx_v_feature_choice;
  int __pyx_v_n_batch_size;
  int __pyx_v_n_copy;
  PyObject *__pyx_v_next_batch;
  float __pyx_v_overlap_rate;
  int __pyx_v_replace;
  PyObject *__pyx_v_self;
  int __pyx_v_shuffle_needed;
  float __pyx_v_timeout;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "gigaword2feature.pyx":1120
 * 
 * 
 * def SampleGenerator( filename ):             # <<<<<<<<<<<<<<
 *     ner2idx = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3, 'O' : 4 }
 *     sentence, beginOfNer, endOfNer, nerCls = [], [], [], []
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator {
  PyObject_HEAD
  PyObject *__pyx_v_beginOfNer;
  PyObject *__pyx_v_corpus;
  PyObject *__pyx_v_endOfNer;
  PyObject *__pyx_v_filename;
  PyObject *__pyx_v_lastNer;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_ner;
  PyObject *__pyx_v_ner2idx;
  PyObject *__pyx_v_nerCls;
  PyObject *__pyx_v_sentence;
  PyObject *__pyx_v_tokens;
  PyObject *__pyx_v_word;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "gigaword2feature.pyx":1159
 * # def PredictionParser( dataset, result, ner_max_length,
 * #                       reinterpret_threshold = 0, n_label_type = 4 ):
 * def PredictionParser( sample_generator, result, ner_max_length,             # <<<<<<<<<<<<<<
 *                       reinterpret_threshold = 0, n_label_type = 4 ):
 *     """
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser {
  PyObject_HEAD
  PyObject *__pyx_v_actual;
  PyObject *__pyx_v_all_prob;
  PyObject *__pyx_v_boe;
  PyObject *__pyx_v_cls;
  PyObject *__pyx_v_cnt;
  PyObject *__pyx_v_eoe;
  PyObject *__pyx_v_estimate;
  PyObject *__pyx_v_fp;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_idx2ner;
  PyObject *__pyx_v_j;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_lines;
  PyObject *__pyx_v_n_label_type;
  PyObject *__pyx_v_ner_max_length;
  PyObject *__pyx_v_predicted;
  PyObject *__pyx_v_predicted_label;
  PyObject *__pyx_v_probability;
  PyObject *__pyx_v_reinterpret_threshold;
  PyObject *__pyx_v_result;
  PyObject *__pyx_v_s;
  PyObject *__pyx_v_sample_generator;
  PyObject *__pyx_v_sg;
  PyObject *__pyx_v_table;
  PyObject *__pyx_v_tokens;
  PyObject *__pyx_v_x;
};


/* "gigaword2feature.pyx":1250
 * 
 * 
 * def SentenceIterator( filename ):             # <<<<<<<<<<<<<<
 *     with open( filename, 'rb' ) as corpus:
 *         sentence = []
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator {
  PyObject_HEAD
  PyObject *__pyx_v_corpus;
  PyObject *__pyx_v_filename;
  PyObject *__pyx_v_line;
  PyObject *__pyx_v_sentence;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
};


/* "gigaword2feature.pyx":1284
 * 
 * 
 * def __decode_algo_1( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Highest scrore first
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 {
  PyObject_HEAD
  PyObject *__pyx_v_table;
};


/* "gigaword2feature.pyx":1603
 * 
 * 
 * def distant_supervision_parser( sentence_file, tag_file,             # <<<<<<<<<<<<<<
 *                                 start = 0, stop = None, step = 1,
 *                                 mode = 'KBP' ):
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser {
  PyObject_HEAD
  PyObject *__pyx_v_b;
  PyObject *__pyx_v_boe;
  PyObject *__pyx_v_e;
  PyObject *__pyx_v_eoe;
  PyObject *__pyx_v_genexpr;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_loe;
  PyObject *__pyx_v_mode;
  PyObject *__pyx_v_sent;
  PyObject *__pyx_v_sentence;
  PyObject *__pyx_v_sentence_file;
  PyObject *__pyx_v_sentences;
  PyObject *__pyx_v_start;
  PyObject *__pyx_v_step;
  PyObject *__pyx_v_stop;
  PyObject *__pyx_v_str2idx;
  PyObject *__pyx_v_tag;
  PyObject *__pyx_v_tag_file;
  PyObject *__pyx_v_tags;
  int __pyx_v_to_keep;
  PyObject *__pyx_v_tokens;
  PyObject *__pyx_v_w;
  PyObject *__pyx_v_x;
  Py_ssize_t __pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
  PyObject *__pyx_t_7;
  PyObject *__pyx_t_8;
  PyObject *__pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
};


/* "gigaword2feature.pyx":1653
 *             if to_keep:
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \             # <<<<<<<<<<<<<<
 *                                           else chr(0) for c in list(w) )
 *                 yield sent, boe, eoe, loe
 */
struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr {
  PyObject_HEAD
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *__pyx_outer_scope;
  PyObject *__pyx_v_c;
};



/* "gigaword2feature.pyx":317
 * 
 * 
 * cdef class vocabulary( object ):             # <<<<<<<<<<<<<<
 *     cdef dict word2idx
 *     cdef dict word2fofe
 */

struct __pyx_vtabstruct_16gigaword2feature_vocabulary {
  PyObject *(*sentence2indices)(struct __pyx_obj_16gigaword2feature_vocabulary *, PyObject *, std::vector<int>  &);
};
static struct __pyx_vtabstruct_16gigaword2feature_vocabulary *__pyx_vtabptr_16gigaword2feature_vocabulary;


/* "gigaword2feature.pyx":462
 * 
 * 
 * cdef class processed_sentence:             # <<<<<<<<<<<<<<
 *     """
 *     Any object of this class should not be instantiated outside this module.
 */

struct __pyx_vtabstruct_16gigaword2feature_processed_sentence {
  PyObject *(*insert_left_fofe)(struct __pyx_obj_16gigaword2feature_processed_sentence *, int, int, std::vector<int>  &, std::vector<float>  &);
  PyObject *(*insert_right_fofe)(struct __pyx_obj_16gigaword2feature_processed_sentence *, int, int, std::vector<int>  &, std::vector<float>  &);
  PyObject *(*insert_bow)(struct __pyx_obj_16gigaword2feature_processed_sentence *, int, int, int, std::vector<int>  &);
};
static struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *__pyx_vtabptr_16gigaword2feature_processed_sentence;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectLookupSpecial.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* SaveResetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
#else
#define __Pyx_PyObject_Ord(c) __Pyx__PyObject_Ord(c)
#endif
static long __Pyx__PyObject_Ord(PyObject* c);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* None.proto */
static CYTHON_INLINE int __Pyx_mod_int(int, int);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* pop.proto */
static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L);
#define __Pyx_PyObject_Pop(L) (likely(PyList_CheckExact(L)) ?\
    __Pyx_PyList_Pop(L) : __Pyx__PyObject_Pop(L))
#else
#define __Pyx_PyList_Pop(L)  __Pyx__PyObject_Pop(L)
#define __Pyx_PyObject_Pop(L)  __Pyx__PyObject_Pop(L)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    ((likely((cfunc)->func)) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
             ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) : __Pyx__CallUnboundCMethod0(cfunc, self)))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX         && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* SwapException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject *type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_16gigaword2feature_10vocabulary_sentence2indices(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self, PyObject *__pyx_v_sentence, std::vector<int>  &__pyx_v_numeric); /* proto*/
static PyObject *__pyx_f_16gigaword2feature_18processed_sentence_insert_left_fofe(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, int __pyx_v_pos, int __pyx_v_row_id, std::vector<int>  &__pyx_v_indices, std::vector<float>  &__pyx_v_values); /* proto*/
static PyObject *__pyx_f_16gigaword2feature_18processed_sentence_insert_right_fofe(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, int __pyx_v_pos, int __pyx_v_row_id, std::vector<int>  &__pyx_v_indices, std::vector<float>  &__pyx_v_values); /* proto*/
static PyObject *__pyx_f_16gigaword2feature_18processed_sentence_insert_bow(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, int __pyx_v_begin_idx, int __pyx_v_end_idx, int __pyx_v_row_id, std::vector<int>  &__pyx_v_indices); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'gigaword2feature' */
static PyTypeObject *__pyx_ptype_16gigaword2feature_vocabulary = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature_processed_sentence = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature_example = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct__KBP2015 = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_1_gigaword = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_2_gazetteer = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_5_sentence2indices = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_7_sentence2indices = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_8___init__ = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_9_genexpr = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_10___init__ = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_11_genexpr = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_12_mini_batch = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_15_SampleGenerator = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_16_PredictionParser = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_17_SentenceIterator = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser = 0;
static PyTypeObject *__pyx_ptype_16gigaword2feature___pyx_scope_struct_20_genexpr = 0;
static void __pyx_f_16gigaword2feature_bigram_char_fofe(std::string, std::vector<float>  &, std::vector<int>  &, float, struct __pyx_opt_args_16gigaword2feature_bigram_char_fofe *__pyx_optional_args); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const std::vector<std::vector<int> >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_float(const std::vector<float>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___(const std::vector<std::vector<float> >  &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "gigaword2feature"
int __pyx_module_is_main_gigaword2feature = 0;

/* Implementation of 'gigaword2feature' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_reversed;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static const char __pyx_k_I[] = "I-";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_o[] = "o";
static const char __pyx_k_p[] = "<p>";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k__2[] = "|||";
static const char __pyx_k__4[] = "#";
static const char __pyx_k__6[] = "(";
static const char __pyx_k__9[] = ")";
static const char __pyx_k_b1[] = "b1";
static const char __pyx_k_b2[] = "b2";
static const char __pyx_k_c1[] = "c1";
static const char __pyx_k_c2[] = "c2";
static const char __pyx_k_dd[] = "%%-%dd";
static const char __pyx_k_e1[] = "e1";
static const char __pyx_k_e2[] = "e2";
static const char __pyx_k_fp[] = "fp";
static const char __pyx_k_pp[] = "pp";
static const char __pyx_k_rb[] = "rb";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_sg[] = "sg";
static const char __pyx_k_si[] = "si";
static const char __pyx_k_0_9[] = "^.*[0-9].*$";
static const char __pyx_k_10s[] = "%10s";
static const char __pyx_k_FAC[] = "<FAC>";
static const char __pyx_k_GPE[] = "<GPE>";
static const char __pyx_k_KBP[] = "KBP";
static const char __pyx_k_LOC[] = "LOC";
static const char __pyx_k_ORG[] = "ORG";
static const char __pyx_k_PER[] = "PER";
static const char __pyx_k_TTL[] = "<TTL>";
static const char __pyx_k_UNK[] = "<UNK>";
static const char __pyx_k__13[] = "/";
static const char __pyx_k__15[] = "\\/";
static const char __pyx_k__17[] = "\\\\";
static const char __pyx_k__18[] = "\\";
static const char __pyx_k__26[] = "; ";
static const char __pyx_k__29[] = "\n";
static const char __pyx_k__32[] = "\344\270\200";
static const char __pyx_k__33[] = "\351\277\277";
static const char __pyx_k__42[] = "";
static const char __pyx_k__44[] = " ";
static const char __pyx_k__53[] = "-";
static const char __pyx_k__62[] = "  ";
static const char __pyx_k__66[] = "**********";
static const char __pyx_k__68[] = ",";
static const char __pyx_k__82[] = "_";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_boe[] = "boe";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_cmn[] = "cmn";
static const char __pyx_k_cnt[] = "cnt";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_eng[] = "eng";
static const char __pyx_k_eoe[] = "eoe";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_loe[] = "loe";
static const char __pyx_k_ner[] = "ner";
static const char __pyx_k_p_2[] = "</p>";
static const char __pyx_k_p_3[] = "p";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_put[] = "put";
static const char __pyx_k_spa[] = "spa";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tag[] = "tag";
static const char __pyx_k_unk[] = "<unk>";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_MISC[] = "MISC";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_best[] = "best";
static const char __pyx_k_bow1[] = "bow1";
static const char __pyx_k_bow2[] = "bow2";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_find[] = "find";
static const char __pyx_k_imap[] = "imap";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_izip[] = "izip";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_keep[] = "keep";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_sent[] = "sent";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_sort[] = "sort";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_tags[] = "tags";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_word[] = "word";
static const char __pyx_k_B_LOC[] = "B-LOC";
static const char __pyx_k_B_ORG[] = "B-ORG";
static const char __pyx_k_B_PER[] = "B-PER";
static const char __pyx_k_I_LOC[] = "I-LOC";
static const char __pyx_k_I_ORG[] = "I-ORG";
static const char __pyx_k_I_PER[] = "I-PER";
static const char __pyx_k_LOC_2[] = "<LOC>";
static const char __pyx_k_MONEY[] = "MONEY";
static const char __pyx_k_ORG_2[] = "<ORG>";
static const char __pyx_k_PER_2[] = "<PER>";
static const char __pyx_k_Queue[] = "Queue";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_c_unk[] = "c_unk";
static const char __pyx_k_chars[] = "chars";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_found[] = "found";
static const char __pyx_k_iNCML[] = "|iNCML|";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_lines[] = "lines";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_match[] = "match";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_rfind[] = "rfind";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_table[] = "table";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_token[] = "token";
static const char __pyx_k_w_unk[] = "w_unk";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_B_MISC[] = "B-MISC";
static const char __pyx_k_I_MISC[] = "I-MISC";
static const char __pyx_k_MISC_2[] = "<MISC>";
static const char __pyx_k_NUMBER[] = "NUMBER";
static const char __pyx_k_PERSON[] = "PERSON";
static const char __pyx_k_Thread[] = "Thread";
static const char __pyx_k_UNSURE[] = "<UNSURE>";
static const char __pyx_k_actual[] = "actual: ";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_argmax[] = "argmax";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_choice[] = "choice";
static const char __pyx_k_codecs[] = "codecs";
static const char __pyx_k_corpus[] = "corpus";
static const char __pyx_k_daemon[] = "daemon";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_f_beta[] = "f_beta";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_islice[] = "islice";
static const char __pyx_k_left_c[] = "left_c";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_n_copy[] = "n_copy";
static const char __pyx_k_nerCls[] = "nerCls";
static const char __pyx_k_number[] = "number";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_parser[] = "parser";
static const char __pyx_k_phrase[] = "phrase";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_recall[] = "recall";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_rsplit[] = "rsplit";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_tokens[] = "tokens";
static const char __pyx_k_unsure[] = "unsure";
static const char __pyx_k_window[] = "window";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_FAC_NAM[] = "FAC_NAM";
static const char __pyx_k_FAC_NOM[] = "FAC_NOM";
static const char __pyx_k_GPE_NAM[] = "GPE_NAM";
static const char __pyx_k_GPE_NOM[] = "GPE_NOM";
static const char __pyx_k_KBP2015[] = "KBP2015";
static const char __pyx_k_LOC_NAM[] = "LOC_NAM";
static const char __pyx_k_LOC_NOM[] = "LOC_NOM";
static const char __pyx_k_ORG_NAM[] = "ORG_NAM";
static const char __pyx_k_ORG_NOM[] = "ORG_NOM";
static const char __pyx_k_OVERALL[] = "OVERALL";
static const char __pyx_k_PERCENT[] = "PERCENT";
static const char __pyx_k_PER_NAM[] = "PER_NAM";
static const char __pyx_k_PER_NOM[] = "PER_NOM";
static const char __pyx_k_TTL_NAM[] = "TTL_NAM";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_compile[] = "compile";
static const char __pyx_k_d_words[] = "%d words";
static const char __pyx_k_end_idx[] = "end_idx";
static const char __pyx_k_example[] = "example";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_idx2ner[] = "idx2ner";
static const char __pyx_k_lastNer[] = "lastNer";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_maxsize[] = "maxsize";
static const char __pyx_k_ner2cls[] = "ner2cls";
static const char __pyx_k_ner2idx[] = "ner2idx";
static const char __pyx_k_ner_end[] = "ner_end";
static const char __pyx_k_numeric[] = "<numeric>";
static const char __pyx_k_overlap[] = "overlap";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_raw_out[] = "raw-out: ";
static const char __pyx_k_removed[] = "removed";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_right_c[] = "right_c";
static const char __pyx_k_shuffle[] = "shuffle";
static const char __pyx_k_str2idx[] = "str2idx";
static const char __pyx_k_timeout[] = "timeout";
static const char __pyx_k_to_keep[] = "to_keep";
static const char __pyx_k_FAC_NAME[] = "FAC_NAME";
static const char __pyx_k_GPE_NAME[] = "GPE_NAME";
static const char __pyx_k_LOCATION[] = "LOCATION";
static const char __pyx_k_LOC_NAME[] = "LOC_NAME";
static const char __pyx_k_ORG_NAME[] = "ORG_NAME";
static const char __pyx_k_PER_NAME[] = "PER_NAME";
static const char __pyx_k_actual_2[] = "actual";
static const char __pyx_k_all_prob[] = "all_prob";
static const char __pyx_k_analysis[] = "analysis";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_char2idx[] = "char2idx";
static const char __pyx_k_conv_idx[] = "conv_idx";
static const char __pyx_k_deepcopy[] = "deepcopy";
static const char __pyx_k_disjoint[] = "disjoint";
static const char __pyx_k_endOfNer[] = "endOfNer";
static const char __pyx_k_estimate[] = "estimate";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_gigaword[] = "gigaword";
static const char __pyx_k_idx2char[] = "idx2char";
static const char __pyx_k_idx2word[] = "idx2word";
static const char __pyx_k_language[] = "language";
static const char __pyx_k_last_ner[] = "last_ner";
static const char __pyx_k_original[] = "original";
static const char __pyx_k_positive[] = "positive";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_reversed[] = "reversed";
static const char __pyx_k_sentence[] = "sentence";
static const char __pyx_k_tag_file[] = "tag_file";
static const char __pyx_k_word2idx[] = "word2idx";
static const char __pyx_k_CONLL2003[] = "CONLL2003";
static const char __pyx_k_CoNLL2003[] = "CoNLL2003";
static const char __pyx_k_HanziConv[] = "HanziConv";
static const char __pyx_k_algorithm[] = "algorithm";
static const char __pyx_k_begin_idx[] = "begin_idx";
static const char __pyx_k_candidate[] = "candidate";
static const char __pyx_k_conv_buff[] = "conv_buff";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_exception[] = "exception";
static const char __pyx_k_gazetteer[] = "gazetteer";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_hanziconv[] = "hanziconv";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_l1_values[] = "l1_values";
static const char __pyx_k_l2_values[] = "l2_values";
static const char __pyx_k_l3_values[] = "l3_values";
static const char __pyx_k_l4_values[] = "l4_values";
static const char __pyx_k_left_init[] = "left_init";
static const char __pyx_k_malformed[] = "malformed";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_n_discard[] = "n_discard";
static const char __pyx_k_ner_begin[] = "ner_begin";
static const char __pyx_k_ner_label[] = "ner_label";
static const char __pyx_k_precision[] = "precision";
static const char __pyx_k_predicted[] = "predicted";
static const char __pyx_k_r1_values[] = "r1_values";
static const char __pyx_k_r2_values[] = "r2_values";
static const char __pyx_k_r3_values[] = "r3_values";
static const char __pyx_k_r4_values[] = "r4_values";
static const char __pyx_k_readlines[] = "readlines";
static const char __pyx_k_sentence1[] = "sentence1";
static const char __pyx_k_sentence2[] = "sentence2";
static const char __pyx_k_sentences[] = "sentences";
static const char __pyx_k_slash_idx[] = "slash_idx";
static const char __pyx_k_text_file[] = "text_file";
static const char __pyx_k_threading[] = "threading";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_A_Za_z_0_9[] = "^(?=[^A-Za-z]+$).*[0-9].*$";
static const char __pyx_k_TITLE_NAME[] = "TITLE_NAME";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_beginOfNer[] = "beginOfNer";
static const char __pyx_k_csr_matrix[] = "csr_matrix";
static const char __pyx_k_date_value[] = "<date-value>";
static const char __pyx_k_engity_end[] = "engity_end";
static const char __pyx_k_entity2cls[] = "entity2cls";
static const char __pyx_k_entity_end[] = "entity_end";
static const char __pyx_k_estimate_2[] = "estimate: ";
static const char __pyx_k_evaluation[] = "evaluation";
static const char __pyx_k_l1_indices[] = "l1_indices";
static const char __pyx_k_l2_indices[] = "l2_indices";
static const char __pyx_k_l3_indices[] = "l3_indices";
static const char __pyx_k_l4_indices[] = "l4_indices";
static const char __pyx_k_lbc_values[] = "lbc_values";
static const char __pyx_k_mini_batch[] = "mini_batch";
static const char __pyx_k_next_batch[] = "next_batch";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_r1_indices[] = "r1_indices";
static const char __pyx_k_r2_indices[] = "r2_indices";
static const char __pyx_k_r3_indices[] = "r3_indices";
static const char __pyx_k_r4_indices[] = "r4_indices";
static const char __pyx_k_rbc_values[] = "rbc_values";
static const char __pyx_k_right_init[] = "right_init";
static const char __pyx_k_sorted_est[] = "sorted_est";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_time_value[] = "<time-value>";
static const char __pyx_k_FAC_NOMINAL[] = "FAC_NOMINAL";
static const char __pyx_k_GPE_NOMINAL[] = "GPE_NOMINAL";
static const char __pyx_k_LOC_NOMINAL[] = "LOC_NOMINAL";
static const char __pyx_k_ORG_NOMINAL[] = "ORG_NOMINAL";
static const char __pyx_k_PER_NOMINAL[] = "PER_NOMINAL";
static const char __pyx_k_concatenate[] = "concatenate";
static const char __pyx_k_has_chinese[] = "has_chinese";
static const char __pyx_k_lbc_indices[] = "lbc_indices";
static const char __pyx_k_numericizer[] = "numericizer";
static const char __pyx_k_phone_value[] = "<phone-value>";
static const char __pyx_k_probability[] = "probability";
static const char __pyx_k_rbc_indices[] = "rbc_indices";
static const char __pyx_k_sentence_id[] = "sentence_id";
static const char __pyx_k_ORGANIZATION[] = "ORGANIZATION";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_batch_buffer[] = "batch_buffer";
static const char __pyx_k_bigram_alpha[] = "bigram_alpha";
static const char __pyx_k_buffer_stack[] = "buffer_stack";
static const char __pyx_k_dense_buffer[] = "dense_buffer";
static const char __pyx_k_entity_begin[] = "entity_begin";
static const char __pyx_k_entity_label[] = "entity_label";
static const char __pyx_k_n_batch_size[] = "n_batch_size";
static const char __pyx_k_n_label_type[] = "n_label_type";
static const char __pyx_k_next_example[] = "next_example";
static const char __pyx_k_numericizer1[] = "numericizer1";
static const char __pyx_k_numericizer2[] = "numericizer2";
static const char __pyx_k_overlap_rate[] = "overlap_rate";
static const char __pyx_k_scipy_sparse[] = "scipy.sparse";
static const char __pyx_k_toSimplified[] = "toSimplified";
static const char __pyx_k_update_state[] = "update_state";
static const char __pyx_k_TITLE_NOMINAL[] = "TITLE_NOMINAL";
static const char __pyx_k_char_sequence[] = "char_sequence";
static const char __pyx_k_decode_algo_1[] = "__decode_algo_1";
static const char __pyx_k_decode_algo_2[] = "__decode_algo_2";
static const char __pyx_k_decode_algo_3[] = "__decode_algo_3";
static const char __pyx_k_disjoint_rate[] = "disjoint_rate";
static const char __pyx_k_numeric_value[] = "<numeric-value>";
static const char __pyx_k_restore_state[] = "restore_state";
static const char __pyx_k_sentence_file[] = "sentence_file";
static const char __pyx_k_true_positive[] = "true_positive";
static const char __pyx_k_word_sequence[] = "word_sequence";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_case_sensitive[] = "case_sensitive";
static const char __pyx_k_contains_digit[] = "<contains-digit>";
static const char __pyx_k_false_negative[] = "false-negative: ";
static const char __pyx_k_false_positive[] = "false-positive: ";
static const char __pyx_k_feature_choice[] = "feature_choice";
static const char __pyx_k_ner_max_length[] = "ner_max_length";
static const char __pyx_k_shuffle_needed[] = "shuffle_needed";
static const char __pyx_k_SampleGenerator[] = "SampleGenerator";
static const char __pyx_k_batch_generator[] = "batch_generator";
static const char __pyx_k_gazetteer_match[] = "gazetteer_match";
static const char __pyx_k_merge_adjacient[] = "__merge_adjacient";
static const char __pyx_k_predicted_label[] = "predicted_label";
static const char __pyx_k_reversed_phrase[] = "reversed_phrase";
static const char __pyx_k_surpress_output[] = "surpress_output";
static const char __pyx_k_PredictionParser[] = "PredictionParser";
static const char __pyx_k_SentenceIterator[] = "SentenceIterator";
static const char __pyx_k_decoder_callback[] = "decoder_callback";
static const char __pyx_k_false_negative_2[] = "false_negative";
static const char __pyx_k_false_positive_2[] = "false_positive";
static const char __pyx_k_gigaword2feature[] = "gigaword2feature";
static const char __pyx_k_has_char_feature[] = "has_char_feature";
static const char __pyx_k_sample_generator[] = "sample_generator";
static const char __pyx_k_sentence2indices[] = "sentence2indices";
static const char __pyx_k_batch_constructor[] = "batch_constructor";
static const char __pyx_k_char_fofe_of_word[] = "char_fofe_of_word";
static const char __pyx_k_phrase_max_length[] = "phrase_max_length";
static const char __pyx_k_prediction_parser[] = "prediction_parser";
static const char __pyx_k_sentence_iterator[] = "sentence_iterator";
static const char __pyx_k_chinese_char_vocab[] = "chinese_char_vocab";
static const char __pyx_k_chinese_word_vocab[] = "chinese_word_vocab";
static const char __pyx_k_prepare_mini_batch[] = "prepare_mini_batch";
static const char __pyx_k_char_fofe_of_phrase[] = "char_fofe_of_phrase";
static const char __pyx_k_init___locals_genexpr[] = "__init__.<locals>.genexpr";
static const char __pyx_k_reinterpret_threshold[] = "reinterpret_threshold";
static const char __pyx_k_01_d_2_0_3_0_5_d_0_5_d[] = "^(?:(?:([01]?\\d|2[0-3]):)?([0-5]?\\d):)?([0-5]?\\d)$";
static const char __pyx_k_d_sentence_s_discarded[] = "%d sentence(s) discarded";
static const char __pyx_k_1_9_d_0_2_d_3_1_9_d_0_d[] = "^(\\+|-)?(([1-9]\\d{0,2}(,\\d{3})*)|([1-9]\\d*)|0)(\\.\\d+)?$";
static const char __pyx_k_batch_constructor___str[] = "batch_constructor.__str__";
static const char __pyx_k_mini_batch_multi_thread[] = "mini_batch_multi_thread";
static const char __pyx_k_batch_constructor___init[] = "batch_constructor.__init__";
static const char __pyx_k_evaluation_locals_lambda[] = "evaluation.<locals>.<lambda>";
static const char __pyx_k_gazetteer_locals_genexpr[] = "gazetteer.<locals>.genexpr";
static const char __pyx_k_chinese_char_vocab___init[] = "chinese_char_vocab.__init__";
static const char __pyx_k_chinese_word_vocab___init[] = "chinese_word_vocab.__init__";
static const char __pyx_k_distant_supervision_parser[] = "distant_supervision_parser";
static const char __pyx_k_decode_algo_1_locals_lambda[] = "__decode_algo_1.<locals>.<lambda>";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_batch_constructor_mini_batch[] = "batch_constructor.mini_batch";
static const char __pyx_k_12s_precision_2f_recall_2f_FB1[] = "%12s  precision: %.2f%%, recall: %.2f%%, FB1: %.2f\n";
static const char __pyx_k_threshold_and_algorithm_do_not[] = "#threshold and #algorithm do not match";
static const char __pyx_k_1_s_s_s_2_9_1_02_9_2_9_02_8_1_2[] = "^(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?$";
static const char __pyx_k_31_0_13578_1_02_Jan_Mar_May_Jul[] = "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)(?:0?2|(?:Feb))\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$";
static const char __pyx_k_Author_Mingbin_Xu_mingbin_xu_gm[] = "\nAuthor      : Mingbin Xu (mingbin.xu@gmail.com)\nFilename    : gigaword2feature.pyx\nLast Update : May 25, 2016\nDescription : N/A\nWebsite     : https://wiki.eecs.yorku.ca/lab/MLL/\n\nCopyright (c) 2016 iNCML (author: Mingbin Xu)\nLicense: MIT License (see ../LICENSE)\n";
static const char __pyx_k_Chinese_is_modeled_at_character[] = "Chinese is modeled at character level. ";
static const char __pyx_k_The_legancy_code_is_strongly_ty[] = "\n    The legancy code is strongly-typed. Polymorphism is the fastest fix. \n    ";
static const char __pyx_k_batch_constructor_infinite_mini[] = "batch_constructor.infinite_mini_batch_multi_thread";
static const char __pyx_k_chinese_word_vocab_char_fofe_of[] = "chinese_word_vocab.char_fofe_of_word";
static const char __pyx_k_chinese_word_vocab_does_not_pro[] = "'chinese_word_vocab' does not provide 'char_fofe_of_word'";
static const char __pyx_k_d_4_0_13578_1_02_0_1_9_12_d_3_0[] = "^(((\\d{4}(\\/|-|\\.)((0[13578](\\/|-|\\.)|1[02](\\/|-|\\.))(0[1-9]|[12]\\d|3[01])|(0[13456789](\\/|-|\\.)|1[012](\\/|-|\\.))(0[1-9]|[12]\\d|30)|02(\\/|-|\\.)(0[1-9]|1\\d|2[0-8])))|((([02468][048]|[13579][26])00|\\d{2}([13579][26]|0[48]|[2468][048])))(\\/|-|\\.)02(\\/|-|\\.)29)){0,10}$";
static const char __pyx_k_d_sentences_d_positive_d_overla[] = "%d sentences, %d (positive), %d (overlap), %d (disjoint)";
static const char __pyx_k_eecs_research_asr_mingbin_ner_a[] = "/eecs/research/asr/mingbin/ner-advance/source/gigaword2feature.pyx";
static const char __pyx_k_only_3_algorithms_are_supported[] = "only 3 algorithms are supported";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_12s_precision_2f_recall_2f_FB1_2[] = "%-12s  precision: %.2f%%, recall: %.2f%%, FB1: %.2f\n";
static const char __pyx_k_According_to_Liu_TTL_NAM_are_all[] = "According to Liu, TTL_NAM are all labeled as PER_NOM.";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_batch_constructor___init___local[] = "batch_constructor.__init__.<locals>.genexpr";
static const char __pyx_k_batch_constructor_mini_batch_mul[] = "batch_constructor.mini_batch_multi_thread";
static const char __pyx_k_chinese_char_vocab_sentence2indi[] = "chinese_char_vocab.sentence2indices.<locals>.genexpr";
static const char __pyx_k_chinese_word_vocab_sentence2indi[] = "chinese_word_vocab.sentence2indices.<locals>.<lambda>";
static const char __pyx_k_distant_supervision_parser_local[] = "distant_supervision_parser.<locals>.genexpr";
static const char __pyx_k_infinite_mini_batch_multi_thread[] = "infinite_mini_batch_multi_thread";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_chinese_word_vocab_char_fofe_of_2[] = "chinese_word_vocab.char_fofe_of_phrase";
static const char __pyx_k_chinese_word_vocab_does_not_pro_2[] = "'chinese_word_vocab' does not provide 'char_fofe_of_phrase'";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_chinese_char_vocab_sentence2indi_2[] = "chinese_char_vocab.sentence2indices.<locals>.<lambda>";
static const char __pyx_k_chinese_char_vocab_sentence2indi_3[] = "chinese_char_vocab.sentence2indices";
static const char __pyx_k_chinese_word_vocab_sentence2indi_2[] = "chinese_word_vocab.sentence2indices";
static PyObject *__pyx_kp_b_01_d_2_0_3_0_5_d_0_5_d;
static PyObject *__pyx_kp_b_0_9;
static PyObject *__pyx_kp_s_10s;
static PyObject *__pyx_kp_s_12s_precision_2f_recall_2f_FB1;
static PyObject *__pyx_kp_s_12s_precision_2f_recall_2f_FB1_2;
static PyObject *__pyx_kp_b_1_9_d_0_2_d_3_1_9_d_0_d;
static PyObject *__pyx_kp_b_1_s_s_s_2_9_1_02_9_2_9_02_8_1_2;
static PyObject *__pyx_kp_b_31_0_13578_1_02_Jan_Mar_May_Jul;
static PyObject *__pyx_kp_s_A_Za_z_0_9;
static PyObject *__pyx_kp_s_According_to_Liu_TTL_NAM_are_all;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_kp_s_B_LOC;
static PyObject *__pyx_kp_s_B_MISC;
static PyObject *__pyx_kp_s_B_ORG;
static PyObject *__pyx_kp_s_B_PER;
static PyObject *__pyx_n_s_CONLL2003;
static PyObject *__pyx_kp_s_Chinese_is_modeled_at_character;
static PyObject *__pyx_n_s_CoNLL2003;
static PyObject *__pyx_kp_s_FAC;
static PyObject *__pyx_n_s_FAC_NAM;
static PyObject *__pyx_n_s_FAC_NAME;
static PyObject *__pyx_n_s_FAC_NOM;
static PyObject *__pyx_n_s_FAC_NOMINAL;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_s_GPE;
static PyObject *__pyx_n_s_GPE_NAM;
static PyObject *__pyx_n_s_GPE_NAME;
static PyObject *__pyx_n_s_GPE_NOM;
static PyObject *__pyx_n_s_GPE_NOMINAL;
static PyObject *__pyx_n_s_HanziConv;
static PyObject *__pyx_kp_s_I;
static PyObject *__pyx_kp_s_I_LOC;
static PyObject *__pyx_kp_s_I_MISC;
static PyObject *__pyx_kp_s_I_ORG;
static PyObject *__pyx_kp_s_I_PER;
static PyObject *__pyx_n_s_KBP;
static PyObject *__pyx_n_s_KBP2015;
static PyObject *__pyx_n_s_LOC;
static PyObject *__pyx_n_s_LOCATION;
static PyObject *__pyx_kp_s_LOC_2;
static PyObject *__pyx_n_s_LOC_NAM;
static PyObject *__pyx_n_s_LOC_NAME;
static PyObject *__pyx_n_s_LOC_NOM;
static PyObject *__pyx_n_s_LOC_NOMINAL;
static PyObject *__pyx_n_s_MISC;
static PyObject *__pyx_kp_s_MISC_2;
static PyObject *__pyx_n_s_MONEY;
static PyObject *__pyx_n_s_NUMBER;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_O;
static PyObject *__pyx_n_s_ORG;
static PyObject *__pyx_n_s_ORGANIZATION;
static PyObject *__pyx_kp_s_ORG_2;
static PyObject *__pyx_n_s_ORG_NAM;
static PyObject *__pyx_n_s_ORG_NAME;
static PyObject *__pyx_n_s_ORG_NOM;
static PyObject *__pyx_n_s_ORG_NOMINAL;
static PyObject *__pyx_n_s_OVERALL;
static PyObject *__pyx_n_s_PER;
static PyObject *__pyx_n_s_PERCENT;
static PyObject *__pyx_n_s_PERSON;
static PyObject *__pyx_kp_s_PER_2;
static PyObject *__pyx_n_s_PER_NAM;
static PyObject *__pyx_n_s_PER_NAME;
static PyObject *__pyx_n_s_PER_NOM;
static PyObject *__pyx_n_s_PER_NOMINAL;
static PyObject *__pyx_n_s_PredictionParser;
static PyObject *__pyx_n_s_Queue;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SampleGenerator;
static PyObject *__pyx_n_s_SentenceIterator;
static PyObject *__pyx_n_s_TITLE_NAME;
static PyObject *__pyx_n_s_TITLE_NOMINAL;
static PyObject *__pyx_kp_s_TTL;
static PyObject *__pyx_n_s_TTL_NAM;
static PyObject *__pyx_kp_s_The_legancy_code_is_strongly_ty;
static PyObject *__pyx_n_s_Thread;
static PyObject *__pyx_kp_s_UNK;
static PyObject *__pyx_kp_s_UNSURE;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_kp_s__13;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_s__17;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__26;
static PyObject *__pyx_kp_u__29;
static PyObject *__pyx_n_u__32;
static PyObject *__pyx_kp_u__33;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_kp_s__42;
static PyObject *__pyx_kp_u__42;
static PyObject *__pyx_kp_s__44;
static PyObject *__pyx_kp_u__44;
static PyObject *__pyx_kp_s__53;
static PyObject *__pyx_kp_s__6;
static PyObject *__pyx_kp_s__62;
static PyObject *__pyx_kp_u__66;
static PyObject *__pyx_kp_u__68;
static PyObject *__pyx_n_s__82;
static PyObject *__pyx_kp_s__9;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_kp_s_actual;
static PyObject *__pyx_n_s_actual_2;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_algorithm;
static PyObject *__pyx_n_s_all_prob;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_analysis;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_argmax;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_b1;
static PyObject *__pyx_n_s_b2;
static PyObject *__pyx_n_s_batch_buffer;
static PyObject *__pyx_n_s_batch_constructor;
static PyObject *__pyx_n_s_batch_constructor___init;
static PyObject *__pyx_n_s_batch_constructor___init___local;
static PyObject *__pyx_n_s_batch_constructor___str;
static PyObject *__pyx_n_s_batch_constructor_infinite_mini;
static PyObject *__pyx_n_s_batch_constructor_mini_batch;
static PyObject *__pyx_n_s_batch_constructor_mini_batch_mul;
static PyObject *__pyx_n_s_batch_generator;
static PyObject *__pyx_n_s_beginOfNer;
static PyObject *__pyx_n_s_begin_idx;
static PyObject *__pyx_n_s_best;
static PyObject *__pyx_n_s_bigram_alpha;
static PyObject *__pyx_n_s_boe;
static PyObject *__pyx_n_s_bow1;
static PyObject *__pyx_n_s_bow2;
static PyObject *__pyx_n_s_buffer_stack;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_c1;
static PyObject *__pyx_n_s_c2;
static PyObject *__pyx_n_s_c_unk;
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_n_s_candidate;
static PyObject *__pyx_n_s_case_sensitive;
static PyObject *__pyx_n_s_char2idx;
static PyObject *__pyx_n_s_char_fofe_of_phrase;
static PyObject *__pyx_n_s_char_fofe_of_word;
static PyObject *__pyx_n_s_char_sequence;
static PyObject *__pyx_n_s_chars;
static PyObject *__pyx_n_s_chinese_char_vocab;
static PyObject *__pyx_n_s_chinese_char_vocab___init;
static PyObject *__pyx_n_s_chinese_char_vocab_sentence2indi;
static PyObject *__pyx_n_s_chinese_char_vocab_sentence2indi_2;
static PyObject *__pyx_n_s_chinese_char_vocab_sentence2indi_3;
static PyObject *__pyx_n_s_chinese_word_vocab;
static PyObject *__pyx_n_s_chinese_word_vocab___init;
static PyObject *__pyx_n_s_chinese_word_vocab_char_fofe_of;
static PyObject *__pyx_n_s_chinese_word_vocab_char_fofe_of_2;
static PyObject *__pyx_kp_s_chinese_word_vocab_does_not_pro;
static PyObject *__pyx_kp_s_chinese_word_vocab_does_not_pro_2;
static PyObject *__pyx_n_s_chinese_word_vocab_sentence2indi;
static PyObject *__pyx_n_s_chinese_word_vocab_sentence2indi_2;
static PyObject *__pyx_n_s_choice;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_cmn;
static PyObject *__pyx_n_s_cnt;
static PyObject *__pyx_n_s_codecs;
static PyObject *__pyx_n_s_compile;
static PyObject *__pyx_n_s_concatenate;
static PyObject *__pyx_kp_s_contains_digit;
static PyObject *__pyx_n_s_conv_buff;
static PyObject *__pyx_n_s_conv_idx;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_corpus;
static PyObject *__pyx_n_s_csr_matrix;
static PyObject *__pyx_kp_b_d_4_0_13578_1_02_0_1_9_12_d_3_0;
static PyObject *__pyx_kp_s_d_sentence_s_discarded;
static PyObject *__pyx_kp_s_d_sentences_d_positive_d_overla;
static PyObject *__pyx_kp_s_d_words;
static PyObject *__pyx_n_s_daemon;
static PyObject *__pyx_kp_s_date_value;
static PyObject *__pyx_kp_s_dd;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_decode_algo_1;
static PyObject *__pyx_n_s_decode_algo_1_locals_lambda;
static PyObject *__pyx_n_s_decode_algo_2;
static PyObject *__pyx_n_s_decode_algo_3;
static PyObject *__pyx_n_s_decoder_callback;
static PyObject *__pyx_n_s_deepcopy;
static PyObject *__pyx_n_s_dense_buffer;
static PyObject *__pyx_n_s_disjoint;
static PyObject *__pyx_n_s_disjoint_rate;
static PyObject *__pyx_n_s_distant_supervision_parser;
static PyObject *__pyx_n_s_distant_supervision_parser_local;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_e1;
static PyObject *__pyx_n_s_e2;
static PyObject *__pyx_kp_s_eecs_research_asr_mingbin_ner_a;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_endOfNer;
static PyObject *__pyx_n_s_end_idx;
static PyObject *__pyx_n_s_eng;
static PyObject *__pyx_n_s_engity_end;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_entity2cls;
static PyObject *__pyx_n_s_entity_begin;
static PyObject *__pyx_n_s_entity_end;
static PyObject *__pyx_n_s_entity_label;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eoe;
static PyObject *__pyx_n_s_estimate;
static PyObject *__pyx_kp_s_estimate_2;
static PyObject *__pyx_n_s_evaluation;
static PyObject *__pyx_n_s_evaluation_locals_lambda;
static PyObject *__pyx_n_s_example;
static PyObject *__pyx_n_s_exception;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_f_beta;
static PyObject *__pyx_kp_s_false_negative;
static PyObject *__pyx_n_s_false_negative_2;
static PyObject *__pyx_kp_s_false_positive;
static PyObject *__pyx_n_s_false_positive_2;
static PyObject *__pyx_n_s_feature_choice;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_find;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_found;
static PyObject *__pyx_n_s_fp;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_gazetteer;
static PyObject *__pyx_n_s_gazetteer_locals_genexpr;
static PyObject *__pyx_n_s_gazetteer_match;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_gigaword;
static PyObject *__pyx_n_s_gigaword2feature;
static PyObject *__pyx_n_s_hanziconv;
static PyObject *__pyx_n_s_has_char_feature;
static PyObject *__pyx_n_s_has_chinese;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_kp_u_iNCML;
static PyObject *__pyx_n_s_idx2char;
static PyObject *__pyx_n_s_idx2ner;
static PyObject *__pyx_n_s_idx2word;
static PyObject *__pyx_n_s_imap;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_infinite_mini_batch_multi_thread;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_init___locals_genexpr;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_islice;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_keep;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_l1_indices;
static PyObject *__pyx_n_s_l1_values;
static PyObject *__pyx_n_s_l2_indices;
static PyObject *__pyx_n_s_l2_values;
static PyObject *__pyx_n_s_l3_indices;
static PyObject *__pyx_n_s_l3_values;
static PyObject *__pyx_n_s_l4_indices;
static PyObject *__pyx_n_s_l4_values;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_language;
static PyObject *__pyx_n_s_lastNer;
static PyObject *__pyx_n_s_last_ner;
static PyObject *__pyx_n_s_lbc_indices;
static PyObject *__pyx_n_s_lbc_values;
static PyObject *__pyx_n_s_left_c;
static PyObject *__pyx_n_s_left_init;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_lines;
static PyObject *__pyx_n_s_loe;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_malformed;
static PyObject *__pyx_n_s_match;
static PyObject *__pyx_n_s_maxsize;
static PyObject *__pyx_n_s_merge_adjacient;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mini_batch;
static PyObject *__pyx_n_s_mini_batch_multi_thread;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_batch_size;
static PyObject *__pyx_n_s_n_copy;
static PyObject *__pyx_n_s_n_discard;
static PyObject *__pyx_n_s_n_label_type;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ner;
static PyObject *__pyx_n_s_ner2cls;
static PyObject *__pyx_n_s_ner2idx;
static PyObject *__pyx_n_s_nerCls;
static PyObject *__pyx_n_s_ner_begin;
static PyObject *__pyx_n_s_ner_end;
static PyObject *__pyx_n_s_ner_label;
static PyObject *__pyx_n_s_ner_max_length;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_n_s_next_batch;
static PyObject *__pyx_n_s_next_example;
static PyObject *__pyx_n_s_number;
static PyObject *__pyx_kp_u_numeric;
static PyObject *__pyx_kp_s_numeric_value;
static PyObject *__pyx_n_s_numericizer;
static PyObject *__pyx_n_s_numericizer1;
static PyObject *__pyx_n_s_numericizer2;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_o;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_kp_s_only_3_algorithms_are_supported;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_original;
static PyObject *__pyx_n_s_overlap;
static PyObject *__pyx_n_s_overlap_rate;
static PyObject *__pyx_kp_u_p;
static PyObject *__pyx_kp_u_p_2;
static PyObject *__pyx_n_s_p_3;
static PyObject *__pyx_n_s_parser;
static PyObject *__pyx_kp_s_phone_value;
static PyObject *__pyx_n_s_phrase;
static PyObject *__pyx_n_s_phrase_max_length;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_positive;
static PyObject *__pyx_n_s_pp;
static PyObject *__pyx_n_s_precision;
static PyObject *__pyx_n_s_predicted;
static PyObject *__pyx_n_s_predicted_label;
static PyObject *__pyx_n_s_prediction_parser;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_prepare_mini_batch;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_probability;
static PyObject *__pyx_n_s_put;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_r1_indices;
static PyObject *__pyx_n_s_r1_values;
static PyObject *__pyx_n_s_r2_indices;
static PyObject *__pyx_n_s_r2_values;
static PyObject *__pyx_n_s_r3_indices;
static PyObject *__pyx_n_s_r3_values;
static PyObject *__pyx_n_s_r4_indices;
static PyObject *__pyx_n_s_r4_values;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_kp_s_raw_out;
static PyObject *__pyx_n_s_rb;
static PyObject *__pyx_n_s_rbc_indices;
static PyObject *__pyx_n_s_rbc_values;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_readlines;
static PyObject *__pyx_n_s_recall;
static PyObject *__pyx_n_s_reinterpret_threshold;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_removed;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_restore_state;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_reversed;
static PyObject *__pyx_n_s_reversed_phrase;
static PyObject *__pyx_n_s_rfind;
static PyObject *__pyx_n_s_right_c;
static PyObject *__pyx_n_s_right_init;
static PyObject *__pyx_n_s_rsplit;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_sample_generator;
static PyObject *__pyx_n_s_scipy_sparse;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sent;
static PyObject *__pyx_n_s_sentence;
static PyObject *__pyx_n_s_sentence1;
static PyObject *__pyx_n_s_sentence2;
static PyObject *__pyx_n_s_sentence2indices;
static PyObject *__pyx_n_s_sentence_file;
static PyObject *__pyx_n_s_sentence_id;
static PyObject *__pyx_n_s_sentence_iterator;
static PyObject *__pyx_n_s_sentences;
static PyObject *__pyx_n_s_sg;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shuffle;
static PyObject *__pyx_n_s_shuffle_needed;
static PyObject *__pyx_n_s_si;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_slash_idx;
static PyObject *__pyx_n_s_sort;
static PyObject *__pyx_n_s_sorted_est;
static PyObject *__pyx_n_s_spa;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_startswith;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_str2idx;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_surpress_output;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_table;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_tag_file;
static PyObject *__pyx_n_s_tags;
static PyObject *__pyx_n_s_target;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text_file;
static PyObject *__pyx_n_s_threading;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_kp_s_threshold_and_algorithm_do_not;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_kp_s_time_value;
static PyObject *__pyx_n_s_timeout;
static PyObject *__pyx_n_s_toSimplified;
static PyObject *__pyx_n_s_to_keep;
static PyObject *__pyx_n_s_token;
static PyObject *__pyx_n_s_tokens;
static PyObject *__pyx_n_s_true_positive;
static PyObject *__pyx_kp_s_unk;
static PyObject *__pyx_kp_u_unk;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_unsure;
static PyObject *__pyx_n_s_update_state;
static PyObject *__pyx_n_s_utf8;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_w_unk;
static PyObject *__pyx_n_s_window;
static PyObject *__pyx_n_s_word;
static PyObject *__pyx_n_s_word2idx;
static PyObject *__pyx_n_s_word_sequence;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_16gigaword2feature_KBP2015(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_3gigaword(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_9gazetteer_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_6gazetteer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_8CoNLL2003(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_11prepare_mini_batch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_batch_generator, PyObject *__pyx_v_batch_buffer, PyObject *__pyx_v_timeout); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18chinese_char_vocab___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18chinese_char_vocab_16sentence2indices_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18chinese_char_vocab_2sentence2indices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sentence); /* proto */
static int __pyx_pf_16gigaword2feature_10vocabulary___cinit__(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_alpha, PyObject *__pyx_v_case_sensitive); /* proto */
static void __pyx_pf_16gigaword2feature_10vocabulary_2__dealloc__(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_10vocabulary_4char_fofe_of_word(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self, PyObject *__pyx_v_word); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_10vocabulary_6char_fofe_of_phrase(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self, PyObject *__pyx_v_phrase); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_10vocabulary_5alpha___get__(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18chinese_word_vocab___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_w); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18chinese_word_vocab_2sentence2indices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sentence); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18chinese_word_vocab_4char_fofe_of_word(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18chinese_word_vocab_6char_fofe_of_phrase(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_8__init___genexpr(PyObject *__pyx_self); /* proto */
static int __pyx_pf_16gigaword2feature_18processed_sentence___init__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_numericizer, PyObject *__pyx_v_a, PyObject *__pyx_v_language); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_7numeric___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self); /* proto */
static int __pyx_pf_16gigaword2feature_18processed_sentence_7numeric_2__set__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_8sentence___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_16left_context_idx___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_17left_context_data___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_17right_context_idx___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_18right_context_data___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self); /* proto */
static int __pyx_pf_16gigaword2feature_7example___init__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self, PyObject *__pyx_v_sentence_id, PyObject *__pyx_v_begin_idx, PyObject *__pyx_v_end_idx, PyObject *__pyx_v_label, PyObject *__pyx_v_gazetteer); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_7example_11sentence_id___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_7example_9begin_idx___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_7example_7end_idx___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_7example_5label___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_7example_9gazetteer___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_8__init___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_parser, PyObject *__pyx_v_numericizer1, PyObject *__pyx_v_numericizer2, PyObject *__pyx_v_gazetteer, PyObject *__pyx_v_window, PyObject *__pyx_v_alpha, PyObject *__pyx_v_n_label_type, PyObject *__pyx_v_language); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_4mini_batch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, int __pyx_v_n_batch_size, int __pyx_v_shuffle_needed, float __pyx_v_overlap_rate, float __pyx_v_disjoint_rate, int __pyx_v_feature_choice, int __pyx_v_replace, int __pyx_v_n_copy); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_7mini_batch_multi_thread(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, int __pyx_v_n_batch_size, int __pyx_v_shuffle_needed, float __pyx_v_overlap_rate, float __pyx_v_disjoint_rate, int __pyx_v_feature_choice, int __pyx_v_replace, float __pyx_v_timeout, CYTHON_UNUSED int __pyx_v_n_copy); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_10infinite_mini_batch_multi_thread(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, int __pyx_v_n_batch_size, int __pyx_v_shuffle_needed, float __pyx_v_overlap_rate, float __pyx_v_disjoint_rate, int __pyx_v_feature_choice, int __pyx_v_replace, float __pyx_v_timeout, int __pyx_v_n_copy); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_13SampleGenerator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_16PredictionParser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sample_generator, PyObject *__pyx_v_result, PyObject *__pyx_v_ner_max_length, PyObject *__pyx_v_reinterpret_threshold, PyObject *__pyx_v_n_label_type); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_19SentenceIterator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_22__merge_adjacient(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_estimate); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda6(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda7(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_24__decode_algo_1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_estimate, PyObject *__pyx_v_table, PyObject *__pyx_v_threshold, PyObject *__pyx_v_callback); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_26__decode_algo_2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_estimate, PyObject *__pyx_v_table, PyObject *__pyx_v_threshold, PyObject *__pyx_v_callback); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_28__decode_algo_3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_estimate, PyObject *__pyx_v_table, PyObject *__pyx_v_threshold, PyObject *__pyx_v_callback); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_30decode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_estimate, PyObject *__pyx_v_table, PyObject *__pyx_v_threshold, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_callback); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_32evaluation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_prediction_parser, PyObject *__pyx_v_threshold, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_surpress_output, PyObject *__pyx_v_analysis, PyObject *__pyx_v_sentence_iterator, PyObject *__pyx_v_n_label_type, PyObject *__pyx_v_decoder_callback); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_26distant_supervision_parser_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_16gigaword2feature_34distant_supervision_parser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence_file, PyObject *__pyx_v_tag_file, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_mode); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_16gigaword2feature_vocabulary(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature_processed_sentence(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature_example(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct__KBP2015(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_1_gigaword(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_2_gazetteer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_4_CoNLL2003(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_5_sentence2indices(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_7_sentence2indices(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_8___init__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_9_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_10___init__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_11_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_12_mini_batch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_15_SampleGenerator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_16_PredictionParser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_17_SentenceIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_18___decode_algo_1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_20_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_pop = {0, &__pyx_n_s_pop, 0, 0, 0};
static PyObject *__pyx_float_0_7;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_256;
static PyObject *__pyx_int_384;
static PyObject *__pyx_int_512;
static PyObject *__pyx_int_513;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__8;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_slice__11;
static PyObject *__pyx_slice__24;
static PyObject *__pyx_slice__46;
static PyObject *__pyx_slice__47;
static PyObject *__pyx_slice__48;
static PyObject *__pyx_slice__49;
static PyObject *__pyx_slice__50;
static PyObject *__pyx_slice__51;
static PyObject *__pyx_slice__55;
static PyObject *__pyx_slice__56;
static PyObject *__pyx_slice__58;
static PyObject *__pyx_slice__60;
static PyObject *__pyx_slice__61;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__98;
static PyObject *__pyx_codeobj__100;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_gb_16gigaword2feature_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":39
 * 
 * 
 * def KBP2015( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_1KBP2015(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_16gigaword2feature_KBP2015[] = "\n    Parameters\n    ----------\n        filename : str\n            path to directory containing NER-annotated Gigaword\n\n    Yields\n    ------\n        sentence  : list of str\n            original sentence\n        ner_begin : list of int\n            start indices of NER, inclusive\n        ner_end   : list of int\n            end indices of NER, excusive\n        ner_label : list of int\n            The entity type of sentence[ner_begin[i]:ner_end[i]] is label[i]\n    ";
static PyMethodDef __pyx_mdef_16gigaword2feature_1KBP2015 = {"KBP2015", (PyCFunction)__pyx_pw_16gigaword2feature_1KBP2015, METH_O, __pyx_doc_16gigaword2feature_KBP2015};
static PyObject *__pyx_pw_16gigaword2feature_1KBP2015(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("KBP2015 (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_KBP2015(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_KBP2015(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("KBP2015", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct__KBP2015(__pyx_ptype_16gigaword2feature___pyx_scope_struct__KBP2015, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_filename = __pyx_v_filename;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_KBP2015, __pyx_n_s_KBP2015); if (unlikely(!gen)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.KBP2015", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  int __pyx_t_16;
  size_t __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L28_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 39, __pyx_L1_error)

  /* "gigaword2feature.pyx":62
 *     cdef list engity_end
 *     cdef list entity_label
 *     buffer_stack.resize( 10 )             # <<<<<<<<<<<<<<
 * 
 *     logger.info( 'According to Liu, TTL_NAM are all labeled as PER_NOM.' )
 */
  try {
    __pyx_cur_scope->__pyx_v_buffer_stack.resize(10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 62, __pyx_L1_error)
  }

  /* "gigaword2feature.pyx":64
 *     buffer_stack.resize( 10 )
 * 
 *     logger.info( 'According to Liu, TTL_NAM are all labeled as PER_NOM.' )             # <<<<<<<<<<<<<<
 *     entity2cls = {  # KBP2015 label
 *                     'PER_NAM' : 0,
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":66
 *     logger.info( 'According to Liu, TTL_NAM are all labeled as PER_NOM.' )
 *     entity2cls = {  # KBP2015 label
 *                     'PER_NAM' : 0,             # <<<<<<<<<<<<<<
 *                     'PER_NOM' : 5,
 *                     'ORG_NAM' : 1,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PER_NAM, __pyx_int_0) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PER_NOM, __pyx_int_5) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ORG_NAM, __pyx_int_1) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GPE_NAM, __pyx_int_2) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LOC_NAM, __pyx_int_3) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_FAC_NAM, __pyx_int_4) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TTL_NAM, __pyx_int_5) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PER_NAME, __pyx_int_0) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ORG_NAME, __pyx_int_1) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GPE_NAME, __pyx_int_2) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LOC_NAME, __pyx_int_3) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_FAC_NAME, __pyx_int_4) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PER_NOMINAL, __pyx_int_5) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ORG_NOMINAL, __pyx_int_6) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GPE_NOMINAL, __pyx_int_7) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LOC_NOMINAL, __pyx_int_8) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_FAC_NOMINAL, __pyx_int_9) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TITLE_NAME, __pyx_int_5) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TITLE_NOMINAL, __pyx_int_5) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_entity2cls = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":89
 *                 }
 * 
 *     with codecs.open( filename ) as text_file:             # <<<<<<<<<<<<<<
 *         for line in text_file:
 *             line = line.strip()
 */
  /*with:*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_open); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_cur_scope->__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_cur_scope->__pyx_v_filename);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          __Pyx_GIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_v_text_file = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":90
 * 
 *     with codecs.open( filename ) as text_file:
 *         for line in text_file:             # <<<<<<<<<<<<<<
 *             line = line.strip()
 * 
 */
          if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_text_file)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_text_file)) {
            __pyx_t_4 = __pyx_cur_scope->__pyx_v_text_file; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_text_file); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 90, __pyx_L8_error)
          }
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_4))) {
                if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 90, __pyx_L8_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 90, __pyx_L8_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_10(__pyx_t_4);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 90, __pyx_L8_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;

            /* "gigaword2feature.pyx":91
 *     with codecs.open( filename ) as text_file:
 *         for line in text_file:
 *             line = line.strip()             # <<<<<<<<<<<<<<
 * 
 *             # bar3idx = line.rfind( '|||' )
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            if (__pyx_t_2) {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            } else {
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L8_error)
            }
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_line);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;

            /* "gigaword2feature.pyx":96
 *             # sentence = [ tokens.split('#')[1] for tokens in line[:bar3idx].strip().split() ]
 *             # label = line[bar3idx + 3:].split()
 *             sentence, label = line.rsplit( '|||', 1 )             # <<<<<<<<<<<<<<
 *             sentence = [ tokens.split('#')[1] for tokens in sentence.strip().split() ]
 *             label = label.split()
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_rsplit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
              PyObject* sequence = __pyx_t_3;
              #if CYTHON_COMPILING_IN_CPYTHON
              Py_ssize_t size = Py_SIZE(sequence);
              #else
              Py_ssize_t size = PySequence_Size(sequence);
              #endif
              if (unlikely(size != 2)) {
                if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                __PYX_ERR(0, 96, __pyx_L8_error)
              }
              #if CYTHON_COMPILING_IN_CPYTHON
              if (likely(PyTuple_CheckExact(sequence))) {
                __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
                __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
              } else {
                __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
                __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
              }
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_2);
              #else
              __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            } else {
              Py_ssize_t index = -1;
              __pyx_t_11 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 96, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
              index = 0; __pyx_t_1 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_1)) goto __pyx_L18_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_1);
              index = 1; __pyx_t_2 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_2)) goto __pyx_L18_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_2);
              if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) __PYX_ERR(0, 96, __pyx_L8_error)
              __pyx_t_12 = NULL;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              goto __pyx_L19_unpacking_done;
              __pyx_L18_unpacking_failed:;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_12 = NULL;
              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
              __PYX_ERR(0, 96, __pyx_L8_error)
              __pyx_L19_unpacking_done:;
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_sentence);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_sentence, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_label);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_label, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;

            /* "gigaword2feature.pyx":97
 *             # label = line[bar3idx + 3:].split()
 *             sentence, label = line.rsplit( '|||', 1 )
 *             sentence = [ tokens.split('#')[1] for tokens in sentence.strip().split() ]             # <<<<<<<<<<<<<<
 *             label = label.split()
 * 
 */
            __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_sentence, __pyx_n_s_strip); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 97, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_13 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
              }
            }
            if (__pyx_t_13) {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            } else {
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L8_error)
            }
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 97, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
              }
            }
            if (__pyx_t_1) {
              __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            } else {
              __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L8_error)
            }
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
              __pyx_t_11 = __pyx_t_2; __Pyx_INCREF(__pyx_t_11); __pyx_t_14 = 0;
              __pyx_t_15 = NULL;
            } else {
              __pyx_t_14 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 97, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_15 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 97, __pyx_L8_error)
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            for (;;) {
              if (likely(!__pyx_t_15)) {
                if (likely(PyList_CheckExact(__pyx_t_11))) {
                  if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_11)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_2 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 97, __pyx_L8_error)
                  #else
                  __pyx_t_2 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  #endif
                } else {
                  if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 97, __pyx_L8_error)
                  #else
                  __pyx_t_2 = PySequence_ITEM(__pyx_t_11, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  #endif
                }
              } else {
                __pyx_t_2 = __pyx_t_15(__pyx_t_11);
                if (unlikely(!__pyx_t_2)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 97, __pyx_L8_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_2);
              }
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tokens);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tokens, __pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_2);
              __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tokens, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 97, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_sentence);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_sentence, __pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;

            /* "gigaword2feature.pyx":98
 *             sentence, label = line.rsplit( '|||', 1 )
 *             sentence = [ tokens.split('#')[1] for tokens in sentence.strip().split() ]
 *             label = label.split()             # <<<<<<<<<<<<<<
 * 
 *             entity_begin, entity_end, entity_label = [], [], []
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_label, __pyx_n_s_split); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 98, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_2 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
              }
            }
            if (__pyx_t_2) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            } else {
              __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L8_error)
            }
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_label);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_label, __pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;

            /* "gigaword2feature.pyx":100
 *             label = label.split()
 * 
 *             entity_begin, entity_end, entity_label = [], [], []             # <<<<<<<<<<<<<<
 * 
 *             cnt = 0
 */
            __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 100, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_entity_begin);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_entity_begin, ((PyObject*)__pyx_t_3));
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_entity_end);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_entity_end, ((PyObject*)__pyx_t_11));
            __Pyx_GIVEREF(__pyx_t_11);
            __pyx_t_11 = 0;
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_entity_label);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_entity_label, ((PyObject*)__pyx_t_2));
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;

            /* "gigaword2feature.pyx":102
 *             entity_begin, entity_end, entity_label = [], [], []
 * 
 *             cnt = 0             # <<<<<<<<<<<<<<
 *             for l in label:
 *                 if l == 'X':
 */
            __pyx_cur_scope->__pyx_v_cnt = 0;

            /* "gigaword2feature.pyx":103
 * 
 *             cnt = 0
 *             for l in label:             # <<<<<<<<<<<<<<
 *                 if l == 'X':
 *                     cnt += 1
 */
            if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_label)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_label)) {
              __pyx_t_2 = __pyx_cur_scope->__pyx_v_label; __Pyx_INCREF(__pyx_t_2); __pyx_t_14 = 0;
              __pyx_t_15 = NULL;
            } else {
              __pyx_t_14 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_15 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 103, __pyx_L8_error)
            }
            for (;;) {
              if (likely(!__pyx_t_15)) {
                if (likely(PyList_CheckExact(__pyx_t_2))) {
                  if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_2)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_11 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_14); __Pyx_INCREF(__pyx_t_11); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 103, __pyx_L8_error)
                  #else
                  __pyx_t_11 = PySequence_ITEM(__pyx_t_2, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 103, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  #endif
                } else {
                  if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_14); __Pyx_INCREF(__pyx_t_11); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 103, __pyx_L8_error)
                  #else
                  __pyx_t_11 = PySequence_ITEM(__pyx_t_2, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 103, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  #endif
                }
              } else {
                __pyx_t_11 = __pyx_t_15(__pyx_t_2);
                if (unlikely(!__pyx_t_11)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 103, __pyx_L8_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_11);
              }
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_l);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_l, __pyx_t_11);
              __Pyx_GIVEREF(__pyx_t_11);
              __pyx_t_11 = 0;

              /* "gigaword2feature.pyx":104
 *             cnt = 0
 *             for l in label:
 *                 if l == 'X':             # <<<<<<<<<<<<<<
 *                     cnt += 1
 *                 elif l.startswith( '(' ):
 */
              __pyx_t_16 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_l, __pyx_n_s_X, Py_EQ)); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 104, __pyx_L8_error)
              if (__pyx_t_16) {

                /* "gigaword2feature.pyx":105
 *             for l in label:
 *                 if l == 'X':
 *                     cnt += 1             # <<<<<<<<<<<<<<
 *                 elif l.startswith( '(' ):
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )
 */
                __pyx_cur_scope->__pyx_v_cnt = (__pyx_cur_scope->__pyx_v_cnt + 1);

                /* "gigaword2feature.pyx":104
 *             cnt = 0
 *             for l in label:
 *                 if l == 'X':             # <<<<<<<<<<<<<<
 *                     cnt += 1
 *                 elif l.startswith( '(' ):
 */
                goto __pyx_L24;
              }

              /* "gigaword2feature.pyx":106
 *                 if l == 'X':
 *                     cnt += 1
 *                 elif l.startswith( '(' ):             # <<<<<<<<<<<<<<
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )
 *                 elif l.startswith( ')' ):
 */
              __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_l, __pyx_n_s_startswith); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 106, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 106, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (__pyx_t_16) {

                /* "gigaword2feature.pyx":107
 *                     cnt += 1
 *                 elif l.startswith( '(' ):
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )             # <<<<<<<<<<<<<<
 *                 elif l.startswith( ')' ):
 *                     cls = entity2cls[ l[1:] ]
 */
                __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_l, 1, 0, NULL, NULL, &__pyx_slice__8, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 107, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_entity2cls, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 107, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_17 = __Pyx_PyInt_As_size_t(__pyx_t_11); if (unlikely((__pyx_t_17 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                try {
                  (__pyx_cur_scope->__pyx_v_buffer_stack[__pyx_t_17]).push_back(__pyx_cur_scope->__pyx_v_cnt);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 107, __pyx_L8_error)
                }

                /* "gigaword2feature.pyx":106
 *                 if l == 'X':
 *                     cnt += 1
 *                 elif l.startswith( '(' ):             # <<<<<<<<<<<<<<
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )
 *                 elif l.startswith( ')' ):
 */
                goto __pyx_L24;
              }

              /* "gigaword2feature.pyx":108
 *                 elif l.startswith( '(' ):
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )
 *                 elif l.startswith( ')' ):             # <<<<<<<<<<<<<<
 *                     cls = entity2cls[ l[1:] ]
 *                     entity_begin.append( buffer_stack[cls].back() )
 */
              __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_l, __pyx_n_s_startswith); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 108, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 108, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (__pyx_t_16) {

                /* "gigaword2feature.pyx":109
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )
 *                 elif l.startswith( ')' ):
 *                     cls = entity2cls[ l[1:] ]             # <<<<<<<<<<<<<<
 *                     entity_begin.append( buffer_stack[cls].back() )
 *                     entity_end.append( cnt )
 */
                __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_l, 1, 0, NULL, NULL, &__pyx_slice__11, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_entity2cls, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 109, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __pyx_cur_scope->__pyx_v_cls = __pyx_t_18;

                /* "gigaword2feature.pyx":110
 *                 elif l.startswith( ')' ):
 *                     cls = entity2cls[ l[1:] ]
 *                     entity_begin.append( buffer_stack[cls].back() )             # <<<<<<<<<<<<<<
 *                     entity_end.append( cnt )
 *                     entity_label.append( cls )
 */
                __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_buffer_stack[__pyx_cur_scope->__pyx_v_cls]).back()); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 110, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_19 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_entity_begin, __pyx_t_11); if (unlikely(__pyx_t_19 == -1)) __PYX_ERR(0, 110, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

                /* "gigaword2feature.pyx":111
 *                     cls = entity2cls[ l[1:] ]
 *                     entity_begin.append( buffer_stack[cls].back() )
 *                     entity_end.append( cnt )             # <<<<<<<<<<<<<<
 *                     entity_label.append( cls )
 *                     buffer_stack[cls].pop_back()
 */
                __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_cnt); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 111, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_19 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_entity_end, __pyx_t_11); if (unlikely(__pyx_t_19 == -1)) __PYX_ERR(0, 111, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

                /* "gigaword2feature.pyx":112
 *                     entity_begin.append( buffer_stack[cls].back() )
 *                     entity_end.append( cnt )
 *                     entity_label.append( cls )             # <<<<<<<<<<<<<<
 *                     buffer_stack[cls].pop_back()
 * 
 */
                __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_cls); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 112, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_19 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_entity_label, __pyx_t_11); if (unlikely(__pyx_t_19 == -1)) __PYX_ERR(0, 112, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

                /* "gigaword2feature.pyx":113
 *                     entity_end.append( cnt )
 *                     entity_label.append( cls )
 *                     buffer_stack[cls].pop_back()             # <<<<<<<<<<<<<<
 * 
 *             if cnt > 0:
 */
                (__pyx_cur_scope->__pyx_v_buffer_stack[__pyx_cur_scope->__pyx_v_cls]).pop_back();

                /* "gigaword2feature.pyx":108
 *                 elif l.startswith( '(' ):
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )
 *                 elif l.startswith( ')' ):             # <<<<<<<<<<<<<<
 *                     cls = entity2cls[ l[1:] ]
 *                     entity_begin.append( buffer_stack[cls].back() )
 */
              }
              __pyx_L24:;

              /* "gigaword2feature.pyx":103
 * 
 *             cnt = 0
 *             for l in label:             # <<<<<<<<<<<<<<
 *                 if l == 'X':
 *                     cnt += 1
 */
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "gigaword2feature.pyx":115
 *                     buffer_stack[cls].pop_back()
 * 
 *             if cnt > 0:             # <<<<<<<<<<<<<<
 *                 assert cnt == len(sentence)
 *                 for i in range( buffer_stack.size() ):
 */
            __pyx_t_16 = ((__pyx_cur_scope->__pyx_v_cnt > 0) != 0);
            if (__pyx_t_16) {

              /* "gigaword2feature.pyx":116
 * 
 *             if cnt > 0:
 *                 assert cnt == len(sentence)             # <<<<<<<<<<<<<<
 *                 for i in range( buffer_stack.size() ):
 *                     assert buffer_stack[i].size() == 0
 */
              #ifndef CYTHON_WITHOUT_ASSERTIONS
              if (unlikely(!Py_OptimizeFlag)) {
                __pyx_t_14 = PyObject_Length(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 116, __pyx_L8_error)
                if (unlikely(!((__pyx_cur_scope->__pyx_v_cnt == __pyx_t_14) != 0))) {
                  PyErr_SetNone(PyExc_AssertionError);
                  __PYX_ERR(0, 116, __pyx_L8_error)
                }
              }
              #endif

              /* "gigaword2feature.pyx":117
 *             if cnt > 0:
 *                 assert cnt == len(sentence)
 *                 for i in range( buffer_stack.size() ):             # <<<<<<<<<<<<<<
 *                     assert buffer_stack[i].size() == 0
 *                 yield sentence, entity_begin, entity_end, entity_label
 */
              __pyx_t_17 = __pyx_cur_scope->__pyx_v_buffer_stack.size();
              for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
                __pyx_cur_scope->__pyx_v_i = __pyx_t_18;

                /* "gigaword2feature.pyx":118
 *                 assert cnt == len(sentence)
 *                 for i in range( buffer_stack.size() ):
 *                     assert buffer_stack[i].size() == 0             # <<<<<<<<<<<<<<
 *                 yield sentence, entity_begin, entity_end, entity_label
 * 
 */
                #ifndef CYTHON_WITHOUT_ASSERTIONS
                if (unlikely(!Py_OptimizeFlag)) {
                  if (unlikely(!(((__pyx_cur_scope->__pyx_v_buffer_stack[__pyx_cur_scope->__pyx_v_i]).size() == 0) != 0))) {
                    PyErr_SetNone(PyExc_AssertionError);
                    __PYX_ERR(0, 118, __pyx_L8_error)
                  }
                }
                #endif
              }

              /* "gigaword2feature.pyx":119
 *                 for i in range( buffer_stack.size() ):
 *                     assert buffer_stack[i].size() == 0
 *                 yield sentence, entity_begin, entity_end, entity_label             # <<<<<<<<<<<<<<
 * 
 * 
 */
              __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence);
              __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentence);
              PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_sentence);
              __Pyx_INCREF(__pyx_cur_scope->__pyx_v_entity_begin);
              __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_entity_begin);
              PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_entity_begin);
              __Pyx_INCREF(__pyx_cur_scope->__pyx_v_entity_end);
              __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_entity_end);
              PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_entity_end);
              __Pyx_INCREF(__pyx_cur_scope->__pyx_v_entity_label);
              __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_entity_label);
              PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_cur_scope->__pyx_v_entity_label);
              __pyx_r = __pyx_t_2;
              __pyx_t_2 = 0;
              __Pyx_XGIVEREF(__pyx_t_4);
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_4;
              __Pyx_XGIVEREF(__pyx_t_5);
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
              __Pyx_XGIVEREF(__pyx_t_6);
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
              __Pyx_XGIVEREF(__pyx_t_7);
              __pyx_cur_scope->__pyx_t_3 = __pyx_t_7;
              __Pyx_XGIVEREF(__pyx_t_8);
              __pyx_cur_scope->__pyx_t_4 = __pyx_t_8;
              __pyx_cur_scope->__pyx_t_5 = __pyx_t_9;
              __pyx_cur_scope->__pyx_t_6 = __pyx_t_10;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              /* return from generator, yielding value */
              __pyx_generator->resume_label = 1;
              return __pyx_r;
              __pyx_L28_resume_from_yield:;
              __pyx_t_4 = __pyx_cur_scope->__pyx_t_0;
              __pyx_cur_scope->__pyx_t_0 = 0;
              __Pyx_XGOTREF(__pyx_t_4);
              __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
              __pyx_cur_scope->__pyx_t_1 = 0;
              __Pyx_XGOTREF(__pyx_t_5);
              __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
              __pyx_cur_scope->__pyx_t_2 = 0;
              __Pyx_XGOTREF(__pyx_t_6);
              __pyx_t_7 = __pyx_cur_scope->__pyx_t_3;
              __pyx_cur_scope->__pyx_t_3 = 0;
              __Pyx_XGOTREF(__pyx_t_7);
              __pyx_t_8 = __pyx_cur_scope->__pyx_t_4;
              __pyx_cur_scope->__pyx_t_4 = 0;
              __Pyx_XGOTREF(__pyx_t_8);
              __pyx_t_9 = __pyx_cur_scope->__pyx_t_5;
              __pyx_t_10 = __pyx_cur_scope->__pyx_t_6;
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 119, __pyx_L8_error)

              /* "gigaword2feature.pyx":115
 *                     buffer_stack[cls].pop_back()
 * 
 *             if cnt > 0:             # <<<<<<<<<<<<<<
 *                 assert cnt == len(sentence)
 *                 for i in range( buffer_stack.size() ):
 */
            }

            /* "gigaword2feature.pyx":90
 * 
 *     with codecs.open( filename ) as text_file:
 *         for line in text_file:             # <<<<<<<<<<<<<<
 *             line = line.strip()
 * 
 */
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":89
 *                 }
 * 
 *     with codecs.open( filename ) as text_file:             # <<<<<<<<<<<<<<
 *         for line in text_file:
 *             line = line.strip()
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L15_try_end;
        __pyx_L8_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("gigaword2feature.KBP2015", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_2, &__pyx_t_11) < 0) __PYX_ERR(0, 89, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_2, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 89, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (__pyx_t_16 < 0) __PYX_ERR(0, 89, __pyx_L10_except_error)
          __pyx_t_21 = ((!(__pyx_t_16 != 0)) != 0);
          if (__pyx_t_21) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_2, __pyx_t_11);
            __pyx_t_4 = 0; __pyx_t_2 = 0; __pyx_t_11 = 0; 
            __PYX_ERR(0, 89, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L15_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_5) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__12, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 89, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L32;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L1_error;
    __pyx_L32:;
  }

  /* "gigaword2feature.pyx":39
 * 
 * 
 * def KBP2015( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("KBP2015", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_5generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":125
 * 
 * 
 * def gigaword( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_4gigaword(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_16gigaword2feature_3gigaword[] = "\n    Parameters\n    ----------\n        filename : str\n            path to directory containing NER-annotated Gigaword\n\n    Yields\n    ------\n        sentence  : list of str\n            original sentence\n        ner_begin : list of int\n            start indices of NER, inclusive\n        ner_end   : list of int\n            end indices of NER, excusive\n        ner_label : list of int\n            The entity type of sentence[ner_begin[i]:ner_end[i]] is label[i]\n    ";
static PyMethodDef __pyx_mdef_16gigaword2feature_4gigaword = {"gigaword", (PyCFunction)__pyx_pw_16gigaword2feature_4gigaword, METH_O, __pyx_doc_16gigaword2feature_3gigaword};
static PyObject *__pyx_pw_16gigaword2feature_4gigaword(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gigaword (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_3gigaword(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_3gigaword(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gigaword", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_1_gigaword(__pyx_ptype_16gigaword2feature___pyx_scope_struct_1_gigaword, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_filename = __pyx_v_filename;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_5generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_gigaword, __pyx_n_s_gigaword); if (unlikely(!gen)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.gigaword", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_5generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L30_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 125, __pyx_L1_error)

  /* "gigaword2feature.pyx":144
 *     """
 * 
 *     ner2cls = { 'PERSON' : 0, 'LOCATION' : 1, 'ORGANIZATION' : 2, 'MISC' : 3 }             # <<<<<<<<<<<<<<
 *     number = set(['PERCENT', 'MONEY', 'NUMBER'])
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PERSON, __pyx_int_0) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LOCATION, __pyx_int_1) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ORGANIZATION, __pyx_int_2) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MISC, __pyx_int_3) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_ner2cls = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":145
 * 
 *     ner2cls = { 'PERSON' : 0, 'LOCATION' : 1, 'ORGANIZATION' : 2, 'MISC' : 3 }
 *     number = set(['PERCENT', 'MONEY', 'NUMBER'])             # <<<<<<<<<<<<<<
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PySet_Add(__pyx_t_1, __pyx_n_s_PERCENT) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_MONEY) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  if (PySet_Add(__pyx_t_1, __pyx_n_s_NUMBER) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_number = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":147
 *     number = set(['PERCENT', 'MONEY', 'NUMBER'])
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:             # <<<<<<<<<<<<<<
 *         n_discard = 0
 * 
 */
  /*with:*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_open); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_cur_scope->__pyx_v_filename);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_rb);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 147, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __Pyx_GIVEREF(__pyx_t_5);
          __pyx_cur_scope->__pyx_v_text_file = __pyx_t_5;
          __pyx_t_5 = 0;

          /* "gigaword2feature.pyx":148
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:
 *         n_discard = 0             # <<<<<<<<<<<<<<
 * 
 *         for line in text_file:
 */
          __Pyx_INCREF(__pyx_int_0);
          __Pyx_GIVEREF(__pyx_int_0);
          __pyx_cur_scope->__pyx_v_n_discard = __pyx_int_0;

          /* "gigaword2feature.pyx":150
 *         n_discard = 0
 * 
 *         for line in text_file:             # <<<<<<<<<<<<<<
 *             line = line.strip().split()
 *             if len(line) > 0:
 */
          if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_text_file)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_text_file)) {
            __pyx_t_5 = __pyx_cur_scope->__pyx_v_text_file; __Pyx_INCREF(__pyx_t_5); __pyx_t_4 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_4 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_text_file); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 150, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 150, __pyx_L8_error)
          }
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_5))) {
                if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_5)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 150, __pyx_L8_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 150, __pyx_L8_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_10(__pyx_t_5);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 150, __pyx_L8_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;

            /* "gigaword2feature.pyx":151
 * 
 *         for line in text_file:
 *             line = line.strip().split()             # <<<<<<<<<<<<<<
 *             if len(line) > 0:
 *                 sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_11 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            if (__pyx_t_11) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            } else {
              __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 151, __pyx_L8_error)
            }
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            if (__pyx_t_3) {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            } else {
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L8_error)
            }
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_line);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_1);
            __pyx_t_1 = 0;

            /* "gigaword2feature.pyx":152
 *         for line in text_file:
 *             line = line.strip().split()
 *             if len(line) > 0:             # <<<<<<<<<<<<<<
 *                 sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4
 *                 malformed = False
 */
            __pyx_t_12 = PyObject_Length(__pyx_cur_scope->__pyx_v_line); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 152, __pyx_L8_error)
            __pyx_t_13 = ((__pyx_t_12 > 0) != 0);
            if (__pyx_t_13) {

              /* "gigaword2feature.pyx":153
 *             line = line.strip().split()
 *             if len(line) > 0:
 *                 sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4             # <<<<<<<<<<<<<<
 *                 malformed = False
 * 
 */
              __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 153, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 153, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_14 = __pyx_int_4;
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_sentence);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_sentence, ((PyObject*)__pyx_t_1));
              __Pyx_GIVEREF(__pyx_t_1);
              __pyx_t_1 = 0;
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ner_begin);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ner_begin, ((PyObject*)__pyx_t_2));
              __Pyx_GIVEREF(__pyx_t_2);
              __pyx_t_2 = 0;
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ner_end);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ner_end, ((PyObject*)__pyx_t_3));
              __Pyx_GIVEREF(__pyx_t_3);
              __pyx_t_3 = 0;
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ner_label);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ner_label, ((PyObject*)__pyx_t_11));
              __Pyx_GIVEREF(__pyx_t_11);
              __pyx_t_11 = 0;
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_last_ner);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_last_ner, __pyx_t_14);
              __Pyx_GIVEREF(__pyx_t_14);
              __pyx_t_14 = 0;

              /* "gigaword2feature.pyx":154
 *             if len(line) > 0:
 *                 sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4
 *                 malformed = False             # <<<<<<<<<<<<<<
 * 
 *                 for p in line:
 */
              __pyx_cur_scope->__pyx_v_malformed = 0;

              /* "gigaword2feature.pyx":156
 *                 malformed = False
 * 
 *                 for p in line:             # <<<<<<<<<<<<<<
 *                     slash_idx = p.rfind('/')
 *                     if slash_idx == 0:
 */
              if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_line)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_line)) {
                __pyx_t_14 = __pyx_cur_scope->__pyx_v_line; __Pyx_INCREF(__pyx_t_14); __pyx_t_12 = 0;
                __pyx_t_15 = NULL;
              } else {
                __pyx_t_12 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_line); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 156, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_14);
                __pyx_t_15 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 156, __pyx_L8_error)
              }
              for (;;) {
                if (likely(!__pyx_t_15)) {
                  if (likely(PyList_CheckExact(__pyx_t_14))) {
                    if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_14)) break;
                    #if CYTHON_COMPILING_IN_CPYTHON
                    __pyx_t_11 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_11); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 156, __pyx_L8_error)
                    #else
                    __pyx_t_11 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 156, __pyx_L8_error)
                    __Pyx_GOTREF(__pyx_t_11);
                    #endif
                  } else {
                    if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
                    #if CYTHON_COMPILING_IN_CPYTHON
                    __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_12); __Pyx_INCREF(__pyx_t_11); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 156, __pyx_L8_error)
                    #else
                    __pyx_t_11 = PySequence_ITEM(__pyx_t_14, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 156, __pyx_L8_error)
                    __Pyx_GOTREF(__pyx_t_11);
                    #endif
                  }
                } else {
                  __pyx_t_11 = __pyx_t_15(__pyx_t_14);
                  if (unlikely(!__pyx_t_11)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 156, __pyx_L8_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_11);
                }
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_p);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_p, __pyx_t_11);
                __Pyx_GIVEREF(__pyx_t_11);
                __pyx_t_11 = 0;

                /* "gigaword2feature.pyx":157
 * 
 *                 for p in line:
 *                     slash_idx = p.rfind('/')             # <<<<<<<<<<<<<<
 *                     if slash_idx == 0:
 *                         malformed = True
 */
                __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_p, __pyx_n_s_rfind); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 157, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_slash_idx);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_slash_idx, __pyx_t_3);
                __Pyx_GIVEREF(__pyx_t_3);
                __pyx_t_3 = 0;

                /* "gigaword2feature.pyx":158
 *                 for p in line:
 *                     slash_idx = p.rfind('/')
 *                     if slash_idx == 0:             # <<<<<<<<<<<<<<
 *                         malformed = True
 *                         break
 */
                __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_cur_scope->__pyx_v_slash_idx, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 158, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                if (__pyx_t_13) {

                  /* "gigaword2feature.pyx":159
 *                     slash_idx = p.rfind('/')
 *                     if slash_idx == 0:
 *                         malformed = True             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
                  __pyx_cur_scope->__pyx_v_malformed = 1;

                  /* "gigaword2feature.pyx":160
 *                     if slash_idx == 0:
 *                         malformed = True
 *                         break             # <<<<<<<<<<<<<<
 * 
 *                     word = p[:slash_idx].replace('\\/', '/').replace('\\\\', '\\')
 */
                  goto __pyx_L20_break;

                  /* "gigaword2feature.pyx":158
 *                 for p in line:
 *                     slash_idx = p.rfind('/')
 *                     if slash_idx == 0:             # <<<<<<<<<<<<<<
 *                         malformed = True
 *                         break
 */
                }

                /* "gigaword2feature.pyx":162
 *                         break
 * 
 *                     word = p[:slash_idx].replace('\\/', '/').replace('\\\\', '\\')             # <<<<<<<<<<<<<<
 *                     label = p[slash_idx + 1:]
 * 
 */
                __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_p, 0, 0, NULL, &__pyx_cur_scope->__pyx_v_slash_idx, NULL, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_replace); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 162, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_replace); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 162, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_word);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_word, __pyx_t_3);
                __Pyx_GIVEREF(__pyx_t_3);
                __pyx_t_3 = 0;

                /* "gigaword2feature.pyx":163
 * 
 *                     word = p[:slash_idx].replace('\\/', '/').replace('\\\\', '\\')
 *                     label = p[slash_idx + 1:]             # <<<<<<<<<<<<<<
 * 
 *                     ner = ner2cls.get( label, 4 );
 */
                __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_slash_idx, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_p, 0, 0, &__pyx_t_3, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 163, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_label);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_label, __pyx_t_11);
                __Pyx_GIVEREF(__pyx_t_11);
                __pyx_t_11 = 0;

                /* "gigaword2feature.pyx":165
 *                     label = p[slash_idx + 1:]
 * 
 *                     ner = ner2cls.get( label, 4 );             # <<<<<<<<<<<<<<
 *                     if ner != last_ner:
 *                         if last_ner != 4:
 */
                __pyx_t_11 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_ner2cls, __pyx_cur_scope->__pyx_v_label, __pyx_int_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 165, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ner);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ner, __pyx_t_11);
                __Pyx_GIVEREF(__pyx_t_11);
                __pyx_t_11 = 0;

                /* "gigaword2feature.pyx":166
 * 
 *                     ner = ner2cls.get( label, 4 );
 *                     if ner != last_ner:             # <<<<<<<<<<<<<<
 *                         if last_ner != 4:
 *                             ner_end.append( len(sentence) )
 */
                __pyx_t_11 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ner, __pyx_cur_scope->__pyx_v_last_ner, Py_NE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 166, __pyx_L8_error)
                __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 166, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                if (__pyx_t_13) {

                  /* "gigaword2feature.pyx":167
 *                     ner = ner2cls.get( label, 4 );
 *                     if ner != last_ner:
 *                         if last_ner != 4:             # <<<<<<<<<<<<<<
 *                             ner_end.append( len(sentence) )
 *                         if ner != 4:
 */
                  __pyx_t_11 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_last_ner, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 167, __pyx_L8_error)
                  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 167, __pyx_L8_error)
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  if (__pyx_t_13) {

                    /* "gigaword2feature.pyx":168
 *                     if ner != last_ner:
 *                         if last_ner != 4:
 *                             ner_end.append( len(sentence) )             # <<<<<<<<<<<<<<
 *                         if ner != 4:
 *                             ner_begin.append( len(sentence) );
 */
                    __pyx_t_16 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 168, __pyx_L8_error)
                    __pyx_t_11 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 168, __pyx_L8_error)
                    __Pyx_GOTREF(__pyx_t_11);
                    __pyx_t_17 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_ner_end, __pyx_t_11); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 168, __pyx_L8_error)
                    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

                    /* "gigaword2feature.pyx":167
 *                     ner = ner2cls.get( label, 4 );
 *                     if ner != last_ner:
 *                         if last_ner != 4:             # <<<<<<<<<<<<<<
 *                             ner_end.append( len(sentence) )
 *                         if ner != 4:
 */
                  }

                  /* "gigaword2feature.pyx":169
 *                         if last_ner != 4:
 *                             ner_end.append( len(sentence) )
 *                         if ner != 4:             # <<<<<<<<<<<<<<
 *                             ner_begin.append( len(sentence) );
 *                             ner_label.append( ner );
 */
                  __pyx_t_11 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ner, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 169, __pyx_L8_error)
                  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 169, __pyx_L8_error)
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  if (__pyx_t_13) {

                    /* "gigaword2feature.pyx":170
 *                             ner_end.append( len(sentence) )
 *                         if ner != 4:
 *                             ner_begin.append( len(sentence) );             # <<<<<<<<<<<<<<
 *                             ner_label.append( ner );
 *                     last_ner = ner
 */
                    __pyx_t_16 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 170, __pyx_L8_error)
                    __pyx_t_11 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 170, __pyx_L8_error)
                    __Pyx_GOTREF(__pyx_t_11);
                    __pyx_t_17 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_ner_begin, __pyx_t_11); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 170, __pyx_L8_error)
                    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

                    /* "gigaword2feature.pyx":171
 *                         if ner != 4:
 *                             ner_begin.append( len(sentence) );
 *                             ner_label.append( ner );             # <<<<<<<<<<<<<<
 *                     last_ner = ner
 * 
 */
                    __pyx_t_17 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_ner_label, __pyx_cur_scope->__pyx_v_ner); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 171, __pyx_L8_error)

                    /* "gigaword2feature.pyx":169
 *                         if last_ner != 4:
 *                             ner_end.append( len(sentence) )
 *                         if ner != 4:             # <<<<<<<<<<<<<<
 *                             ner_begin.append( len(sentence) );
 *                             ner_label.append( ner );
 */
                  }

                  /* "gigaword2feature.pyx":166
 * 
 *                     ner = ner2cls.get( label, 4 );
 *                     if ner != last_ner:             # <<<<<<<<<<<<<<
 *                         if last_ner != 4:
 *                             ner_end.append( len(sentence) )
 */
                }

                /* "gigaword2feature.pyx":172
 *                             ner_begin.append( len(sentence) );
 *                             ner_label.append( ner );
 *                     last_ner = ner             # <<<<<<<<<<<<<<
 * 
 *                     sentence.append( word )
 */
                __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner);
                __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_last_ner);
                __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_last_ner, __pyx_cur_scope->__pyx_v_ner);
                __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner);

                /* "gigaword2feature.pyx":174
 *                     last_ner = ner
 * 
 *                     sentence.append( word )             # <<<<<<<<<<<<<<
 * 
 *                 if not malformed:
 */
                __pyx_t_17 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_word); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 174, __pyx_L8_error)

                /* "gigaword2feature.pyx":156
 *                 malformed = False
 * 
 *                 for p in line:             # <<<<<<<<<<<<<<
 *                     slash_idx = p.rfind('/')
 *                     if slash_idx == 0:
 */
              }
              __pyx_L20_break:;
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

              /* "gigaword2feature.pyx":176
 *                     sentence.append( word )
 * 
 *                 if not malformed:             # <<<<<<<<<<<<<<
 *                     if len(ner_end) < len(ner_begin):
 *                         ner_end.append( len(sentence) )
 */
              __pyx_t_13 = ((!(__pyx_cur_scope->__pyx_v_malformed != 0)) != 0);
              if (__pyx_t_13) {

                /* "gigaword2feature.pyx":177
 * 
 *                 if not malformed:
 *                     if len(ner_end) < len(ner_begin):             # <<<<<<<<<<<<<<
 *                         ner_end.append( len(sentence) )
 *                     assert len(ner_end) == len(ner_begin)
 */
                __pyx_t_12 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_ner_end); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 177, __pyx_L8_error)
                __pyx_t_16 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_ner_begin); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 177, __pyx_L8_error)
                __pyx_t_13 = ((__pyx_t_12 < __pyx_t_16) != 0);
                if (__pyx_t_13) {

                  /* "gigaword2feature.pyx":178
 *                 if not malformed:
 *                     if len(ner_end) < len(ner_begin):
 *                         ner_end.append( len(sentence) )             # <<<<<<<<<<<<<<
 *                     assert len(ner_end) == len(ner_begin)
 *                     if len(ner_label) > 0 or random.choice([True, False]):
 */
                  __pyx_t_16 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 178, __pyx_L8_error)
                  __pyx_t_14 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 178, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __pyx_t_17 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_ner_end, __pyx_t_14); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 178, __pyx_L8_error)
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

                  /* "gigaword2feature.pyx":177
 * 
 *                 if not malformed:
 *                     if len(ner_end) < len(ner_begin):             # <<<<<<<<<<<<<<
 *                         ner_end.append( len(sentence) )
 *                     assert len(ner_end) == len(ner_begin)
 */
                }

                /* "gigaword2feature.pyx":179
 *                     if len(ner_end) < len(ner_begin):
 *                         ner_end.append( len(sentence) )
 *                     assert len(ner_end) == len(ner_begin)             # <<<<<<<<<<<<<<
 *                     if len(ner_label) > 0 or random.choice([True, False]):
 *                         yield sentence, ner_begin, ner_end, ner_label
 */
                #ifndef CYTHON_WITHOUT_ASSERTIONS
                if (unlikely(!Py_OptimizeFlag)) {
                  __pyx_t_16 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_ner_end); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 179, __pyx_L8_error)
                  __pyx_t_12 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_ner_begin); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 179, __pyx_L8_error)
                  if (unlikely(!((__pyx_t_16 == __pyx_t_12) != 0))) {
                    PyErr_SetNone(PyExc_AssertionError);
                    __PYX_ERR(0, 179, __pyx_L8_error)
                  }
                }
                #endif

                /* "gigaword2feature.pyx":180
 *                         ner_end.append( len(sentence) )
 *                     assert len(ner_end) == len(ner_begin)
 *                     if len(ner_label) > 0 or random.choice([True, False]):             # <<<<<<<<<<<<<<
 *                         yield sentence, ner_begin, ner_end, ner_label
 *                 else:
 */
                __pyx_t_12 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_ner_label); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 180, __pyx_L8_error)
                __pyx_t_18 = ((__pyx_t_12 > 0) != 0);
                if (!__pyx_t_18) {
                } else {
                  __pyx_t_13 = __pyx_t_18;
                  goto __pyx_L28_bool_binop_done;
                }
                __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_random); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 180, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_choice); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __pyx_t_11 = PyList_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 180, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_INCREF(Py_True);
                __Pyx_GIVEREF(Py_True);
                PyList_SET_ITEM(__pyx_t_11, 0, Py_True);
                __Pyx_INCREF(Py_False);
                __Pyx_GIVEREF(Py_False);
                PyList_SET_ITEM(__pyx_t_11, 1, Py_False);
                __pyx_t_2 = NULL;
                if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
                  __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                  if (likely(__pyx_t_2)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                    __Pyx_INCREF(__pyx_t_2);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_3, function);
                  }
                }
                if (!__pyx_t_2) {
                  __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_11); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 180, __pyx_L8_error)
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_GOTREF(__pyx_t_14);
                } else {
                  __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
                  __Pyx_GIVEREF(__pyx_t_11);
                  PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_11);
                  __pyx_t_11 = 0;
                  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 180, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                }
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_18 < 0)) __PYX_ERR(0, 180, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __pyx_t_13 = __pyx_t_18;
                __pyx_L28_bool_binop_done:;
                if (__pyx_t_13) {

                  /* "gigaword2feature.pyx":181
 *                     assert len(ner_end) == len(ner_begin)
 *                     if len(ner_label) > 0 or random.choice([True, False]):
 *                         yield sentence, ner_begin, ner_end, ner_label             # <<<<<<<<<<<<<<
 *                 else:
 *                     n_discard += 1
 */
                  __pyx_t_14 = PyTuple_New(4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 181, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentence);
                  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_cur_scope->__pyx_v_sentence);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner_begin);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner_begin);
                  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_cur_scope->__pyx_v_ner_begin);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner_end);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner_end);
                  PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_cur_scope->__pyx_v_ner_end);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner_label);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner_label);
                  PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_cur_scope->__pyx_v_ner_label);
                  __pyx_r = __pyx_t_14;
                  __pyx_t_14 = 0;
                  __pyx_cur_scope->__pyx_t_0 = __pyx_t_4;
                  __Pyx_XGIVEREF(__pyx_t_5);
                  __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
                  __Pyx_XGIVEREF(__pyx_t_6);
                  __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
                  __Pyx_XGIVEREF(__pyx_t_7);
                  __pyx_cur_scope->__pyx_t_3 = __pyx_t_7;
                  __Pyx_XGIVEREF(__pyx_t_8);
                  __pyx_cur_scope->__pyx_t_4 = __pyx_t_8;
                  __Pyx_XGIVEREF(__pyx_t_9);
                  __pyx_cur_scope->__pyx_t_5 = __pyx_t_9;
                  __pyx_cur_scope->__pyx_t_6 = __pyx_t_10;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  /* return from generator, yielding value */
                  __pyx_generator->resume_label = 1;
                  return __pyx_r;
                  __pyx_L30_resume_from_yield:;
                  __pyx_t_4 = __pyx_cur_scope->__pyx_t_0;
                  __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
                  __pyx_cur_scope->__pyx_t_1 = 0;
                  __Pyx_XGOTREF(__pyx_t_5);
                  __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
                  __pyx_cur_scope->__pyx_t_2 = 0;
                  __Pyx_XGOTREF(__pyx_t_6);
                  __pyx_t_7 = __pyx_cur_scope->__pyx_t_3;
                  __pyx_cur_scope->__pyx_t_3 = 0;
                  __Pyx_XGOTREF(__pyx_t_7);
                  __pyx_t_8 = __pyx_cur_scope->__pyx_t_4;
                  __pyx_cur_scope->__pyx_t_4 = 0;
                  __Pyx_XGOTREF(__pyx_t_8);
                  __pyx_t_9 = __pyx_cur_scope->__pyx_t_5;
                  __pyx_cur_scope->__pyx_t_5 = 0;
                  __Pyx_XGOTREF(__pyx_t_9);
                  __pyx_t_10 = __pyx_cur_scope->__pyx_t_6;
                  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 181, __pyx_L8_error)

                  /* "gigaword2feature.pyx":180
 *                         ner_end.append( len(sentence) )
 *                     assert len(ner_end) == len(ner_begin)
 *                     if len(ner_label) > 0 or random.choice([True, False]):             # <<<<<<<<<<<<<<
 *                         yield sentence, ner_begin, ner_end, ner_label
 *                 else:
 */
                }

                /* "gigaword2feature.pyx":176
 *                     sentence.append( word )
 * 
 *                 if not malformed:             # <<<<<<<<<<<<<<
 *                     if len(ner_end) < len(ner_begin):
 *                         ner_end.append( len(sentence) )
 */
                goto __pyx_L25;
              }

              /* "gigaword2feature.pyx":183
 *                         yield sentence, ner_begin, ner_end, ner_label
 *                 else:
 *                     n_discard += 1             # <<<<<<<<<<<<<<
 *                     logger.info( '%d sentence(s) discarded' % n_discard )
 * 
 */
              /*else*/ {
                __pyx_t_14 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_n_discard, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 183, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_n_discard);
                __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_n_discard, __pyx_t_14);
                __Pyx_GIVEREF(__pyx_t_14);
                __pyx_t_14 = 0;

                /* "gigaword2feature.pyx":184
 *                 else:
 *                     n_discard += 1
 *                     logger.info( '%d sentence(s) discarded' % n_discard )             # <<<<<<<<<<<<<<
 * 
 * ################################################################################
 */
                __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_d_sentence_s_discarded, __pyx_cur_scope->__pyx_v_n_discard); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_11 = NULL;
                if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
                  __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
                  if (likely(__pyx_t_11)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                    __Pyx_INCREF(__pyx_t_11);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_1, function);
                  }
                }
                if (!__pyx_t_11) {
                  __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 184, __pyx_L8_error)
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_GOTREF(__pyx_t_14);
                } else {
                  __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_11); __pyx_t_11 = NULL;
                  __Pyx_GIVEREF(__pyx_t_3);
                  PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_3);
                  __pyx_t_3 = 0;
                  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 184, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                }
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              }
              __pyx_L25:;

              /* "gigaword2feature.pyx":152
 *         for line in text_file:
 *             line = line.strip().split()
 *             if len(line) > 0:             # <<<<<<<<<<<<<<
 *                 sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4
 *                 malformed = False
 */
            }

            /* "gigaword2feature.pyx":150
 *         n_discard = 0
 * 
 *         for line in text_file:             # <<<<<<<<<<<<<<
 *             line = line.strip().split()
 *             if len(line) > 0:
 */
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "gigaword2feature.pyx":147
 *     number = set(['PERCENT', 'MONEY', 'NUMBER'])
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:             # <<<<<<<<<<<<<<
 *         n_discard = 0
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L15_try_end;
        __pyx_L8_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("gigaword2feature.gigaword", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_14, &__pyx_t_1) < 0) __PYX_ERR(0, 147, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_14, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 147, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_19);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          if (__pyx_t_13 < 0) __PYX_ERR(0, 147, __pyx_L10_except_error)
          __pyx_t_18 = ((!(__pyx_t_13 != 0)) != 0);
          if (__pyx_t_18) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_14, __pyx_t_1);
            __pyx_t_5 = 0; __pyx_t_14 = 0; __pyx_t_1 = 0; 
            __PYX_ERR(0, 147, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L15_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__20, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 147, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L34;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L34:;
  }

  /* "gigaword2feature.pyx":125
 * 
 * 
 * def gigaword( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("gigaword", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":189
 * 
 * 
 * def gazetteer( filename, mode = 'CoNLL2003' ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_7gazetteer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_6gazetteer[] = "\n    Parameters\n    ----------\n        filename : str\n        mode : str\n\n    Returns\n    -------\n        result : list of set\n    ";
static PyMethodDef __pyx_mdef_16gigaword2feature_7gazetteer = {"gazetteer", (PyCFunction)__pyx_pw_16gigaword2feature_7gazetteer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_6gazetteer};
static PyObject *__pyx_pw_16gigaword2feature_7gazetteer(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gazetteer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_mode,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_n_s_CoNLL2003);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gazetteer") < 0)) __PYX_ERR(0, 189, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_mode = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gazetteer", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 189, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.gazetteer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_6gazetteer(__pyx_self, __pyx_v_filename, __pyx_v_mode);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_9gazetteer_2generator10(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":218
 *                     result[ ner2cls[tokens[1]] ].add( HanziConv.toSimplified(tokens[0][1:-1]) )
 * 
 *     logger.info( '; '.join( str((cls,len(result[ner2cls[cls]]))) for cls in ner2cls ) )             # <<<<<<<<<<<<<<
 *     return result
 * 
 */

static PyObject *__pyx_pf_16gigaword2feature_9gazetteer_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_3_genexpr(__pyx_ptype_16gigaword2feature___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_9gazetteer_2generator10, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_gazetteer_locals_genexpr); if (unlikely(!gen)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.gazetteer.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_9gazetteer_2generator10(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_t_2 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ner2cls)) { __Pyx_RaiseClosureNameError("ner2cls"); __PYX_ERR(0, 218, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ner2cls == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 218, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ner2cls, 1, ((PyObject *)NULL), (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_cls);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_cls, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_result)) { __Pyx_RaiseClosureNameError("result"); __PYX_ERR(0, 218, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_result == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 218, __pyx_L1_error)
    }
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ner2cls)) { __Pyx_RaiseClosureNameError("ner2cls"); __PYX_ERR(0, 218, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ner2cls == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 218, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ner2cls, __pyx_cur_scope->__pyx_v_cls); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_result, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_cls);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_cls);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_cur_scope->__pyx_v_cls);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 218, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":189
 * 
 * 
 * def gazetteer( filename, mode = 'CoNLL2003' ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

static PyObject *__pyx_pf_16gigaword2feature_6gazetteer(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_mode) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *__pyx_cur_scope;
  PyObject *__pyx_v_text_file = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_tokens = NULL;
  CYTHON_UNUSED long __pyx_v__;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  int __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("gazetteer", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_2_gazetteer(__pyx_ptype_16gigaword2feature___pyx_scope_struct_2_gazetteer, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);

  /* "gigaword2feature.pyx":200
 *         result : list of set
 *     """
 *     if mode == 'CONLL2003':             # <<<<<<<<<<<<<<
 *         result = [ set() for _ in xrange(4) ]
 *         ner2cls = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3 }
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_CONLL2003, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "gigaword2feature.pyx":201
 *     """
 *     if mode == 'CONLL2003':
 *         result = [ set() for _ in xrange(4) ]             # <<<<<<<<<<<<<<
 *         ner2cls = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3 }
 *         with codecs.open(filename, 'rb') as text_file:
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    for (__pyx_t_3 = 0; __pyx_t_3 < 4; __pyx_t_3+=1) {
      __pyx_v__ = __pyx_t_3;
      __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 201, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_result = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "gigaword2feature.pyx":202
 *     if mode == 'CONLL2003':
 *         result = [ set() for _ in xrange(4) ]
 *         ner2cls = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3 }             # <<<<<<<<<<<<<<
 *         with codecs.open(filename, 'rb') as text_file:
 *             for line in text_file:
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_PER, __pyx_int_0) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_LOC, __pyx_int_1) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ORG, __pyx_int_2) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_MISC, __pyx_int_3) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_ner2cls = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "gigaword2feature.pyx":203
 *         result = [ set() for _ in xrange(4) ]
 *         ner2cls = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3 }
 *         with codecs.open(filename, 'rb') as text_file:             # <<<<<<<<<<<<<<
 *             for line in text_file:
 *                 tokens = line.strip().split( None, 1 )
 */
    /*with:*/ {
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_open); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_filename);
      __Pyx_INCREF(__pyx_n_s_rb);
      __Pyx_GIVEREF(__pyx_n_s_rb);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_s_rb);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 203, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L6_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __pyx_t_5;
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_11);
          /*try:*/ {
            __pyx_v_text_file = __pyx_t_7;
            __pyx_t_7 = 0;

            /* "gigaword2feature.pyx":204
 *         ner2cls = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3 }
 *         with codecs.open(filename, 'rb') as text_file:
 *             for line in text_file:             # <<<<<<<<<<<<<<
 *                 tokens = line.strip().split( None, 1 )
 *                 if len(tokens) == 2:
 */
            if (likely(PyList_CheckExact(__pyx_v_text_file)) || PyTuple_CheckExact(__pyx_v_text_file)) {
              __pyx_t_7 = __pyx_v_text_file; __Pyx_INCREF(__pyx_t_7); __pyx_t_6 = 0;
              __pyx_t_12 = NULL;
            } else {
              __pyx_t_6 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_text_file); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 204, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_12 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 204, __pyx_L10_error)
            }
            for (;;) {
              if (likely(!__pyx_t_12)) {
                if (likely(PyList_CheckExact(__pyx_t_7))) {
                  if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_7)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 204, __pyx_L10_error)
                  #else
                  __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L10_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  #endif
                } else {
                  if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 204, __pyx_L10_error)
                  #else
                  __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L10_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  #endif
                }
              } else {
                __pyx_t_2 = __pyx_t_12(__pyx_t_7);
                if (unlikely(!__pyx_t_2)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 204, __pyx_L10_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_2);
              }
              __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_2);
              __pyx_t_2 = 0;

              /* "gigaword2feature.pyx":205
 *         with codecs.open(filename, 'rb') as text_file:
 *             for line in text_file:
 *                 tokens = line.strip().split( None, 1 )             # <<<<<<<<<<<<<<
 *                 if len(tokens) == 2:
 *                     result[ ner2cls[tokens[0]] ].add( tokens[1] )
 */
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_4 = NULL;
              if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
                __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
                if (likely(__pyx_t_4)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                  __Pyx_INCREF(__pyx_t_4);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_5, function);
                }
              }
              if (__pyx_t_4) {
                __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L10_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else {
                __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L10_error)
              }
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_XDECREF_SET(__pyx_v_tokens, __pyx_t_2);
              __pyx_t_2 = 0;

              /* "gigaword2feature.pyx":206
 *             for line in text_file:
 *                 tokens = line.strip().split( None, 1 )
 *                 if len(tokens) == 2:             # <<<<<<<<<<<<<<
 *                     result[ ner2cls[tokens[0]] ].add( tokens[1] )
 *     else:
 */
              __pyx_t_13 = PyObject_Length(__pyx_v_tokens); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 206, __pyx_L10_error)
              __pyx_t_1 = ((__pyx_t_13 == 2) != 0);
              if (__pyx_t_1) {

                /* "gigaword2feature.pyx":207
 *                 tokens = line.strip().split( None, 1 )
 *                 if len(tokens) == 2:
 *                     result[ ner2cls[tokens[0]] ].add( tokens[1] )             # <<<<<<<<<<<<<<
 *     else:
 *         result = [ set() for _ in xrange(7) ]
 */
                __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_tokens, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 207, __pyx_L10_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_ner2cls, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L10_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __pyx_t_5 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_result, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 207, __pyx_L10_error)
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L10_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_tokens, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 207, __pyx_L10_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_14 = NULL;
                if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
                  __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_4);
                  if (likely(__pyx_t_14)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                    __Pyx_INCREF(__pyx_t_14);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_4, function);
                  }
                }
                if (!__pyx_t_14) {
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L10_error)
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_GOTREF(__pyx_t_2);
                } else {
                  __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 207, __pyx_L10_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __pyx_t_14 = NULL;
                  __Pyx_GIVEREF(__pyx_t_5);
                  PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_5);
                  __pyx_t_5 = 0;
                  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L10_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                }
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                /* "gigaword2feature.pyx":206
 *             for line in text_file:
 *                 tokens = line.strip().split( None, 1 )
 *                 if len(tokens) == 2:             # <<<<<<<<<<<<<<
 *                     result[ ner2cls[tokens[0]] ].add( tokens[1] )
 *     else:
 */
              }

              /* "gigaword2feature.pyx":204
 *         ner2cls = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3 }
 *         with codecs.open(filename, 'rb') as text_file:
 *             for line in text_file:             # <<<<<<<<<<<<<<
 *                 tokens = line.strip().split( None, 1 )
 *                 if len(tokens) == 2:
 */
            }
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "gigaword2feature.pyx":203
 *         result = [ set() for _ in xrange(4) ]
 *         ner2cls = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3 }
 *         with codecs.open(filename, 'rb') as text_file:             # <<<<<<<<<<<<<<
 *             for line in text_file:
 *                 tokens = line.strip().split( None, 1 )
 */
          }
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L17_try_end;
          __pyx_L10_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("gigaword2feature.gazetteer", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_2, &__pyx_t_4) < 0) __PYX_ERR(0, 203, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_15 = PyTuple_Pack(3, __pyx_t_7, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 203, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 203, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (__pyx_t_1 < 0) __PYX_ERR(0, 203, __pyx_L12_except_error)
            __pyx_t_17 = ((!(__pyx_t_1 != 0)) != 0);
            if (__pyx_t_17) {
              __Pyx_GIVEREF(__pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_2);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_2, __pyx_t_4);
              __pyx_t_7 = 0; __pyx_t_2 = 0; __pyx_t_4 = 0; 
              __PYX_ERR(0, 203, __pyx_L12_except_error)
            }
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L11_exception_handled;
          }
          __pyx_L12_except_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
          goto __pyx_L1_error;
          __pyx_L11_exception_handled:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
          __pyx_L17_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_8) {
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__22, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 203, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          goto __pyx_L9;
        }
        __pyx_L9:;
      }
      goto __pyx_L24;
      __pyx_L6_error:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L1_error;
      __pyx_L24:;
    }

    /* "gigaword2feature.pyx":200
 *         result : list of set
 *     """
 *     if mode == 'CONLL2003':             # <<<<<<<<<<<<<<
 *         result = [ set() for _ in xrange(4) ]
 *         ner2cls = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3 }
 */
    goto __pyx_L3;
  }

  /* "gigaword2feature.pyx":209
 *                     result[ ner2cls[tokens[0]] ].add( tokens[1] )
 *     else:
 *         result = [ set() for _ in xrange(7) ]             # <<<<<<<<<<<<<<
 *         ner2cls = { '<PER>' : 0, '<ORG>' : 1, '<GPE>' : 2,
 *                     '<LOC>' : 3, '<FAC>' : 4, '<TTL>' : 5 }
 */
  /*else*/ {
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    for (__pyx_t_3 = 0; __pyx_t_3 < 7; __pyx_t_3+=1) {
      __pyx_v__ = __pyx_t_3;
      __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v_result = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":210
 *     else:
 *         result = [ set() for _ in xrange(7) ]
 *         ner2cls = { '<PER>' : 0, '<ORG>' : 1, '<GPE>' : 2,             # <<<<<<<<<<<<<<
 *                     '<LOC>' : 3, '<FAC>' : 4, '<TTL>' : 5 }
 *         with codecs.open(filename, 'rb') as text_file:
 */
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_kp_s_PER_2, __pyx_int_0) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_kp_s_ORG_2, __pyx_int_1) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_kp_s_GPE, __pyx_int_2) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_kp_s_LOC_2, __pyx_int_3) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_kp_s_FAC, __pyx_int_4) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_4, __pyx_kp_s_TTL, __pyx_int_5) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v_ner2cls = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":212
 *         ner2cls = { '<PER>' : 0, '<ORG>' : 1, '<GPE>' : 2,
 *                     '<LOC>' : 3, '<FAC>' : 4, '<TTL>' : 5 }
 *         with codecs.open(filename, 'rb') as text_file:             # <<<<<<<<<<<<<<
 *             for line in text_file:
 *                 tokens = line.strip().rsplit( None, 1 )
 */
    /*with:*/ {
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_open); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_15 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_6, __pyx_v_filename);
      __Pyx_INCREF(__pyx_n_s_rb);
      __Pyx_GIVEREF(__pyx_n_s_rb);
      PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_6, __pyx_n_s_rb);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 212, __pyx_L27_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
        }
      }
      if (__pyx_t_2) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L27_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L27_error)
      }
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __pyx_t_7;
      __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_9);
          /*try:*/ {
            __pyx_v_text_file = __pyx_t_15;
            __pyx_t_15 = 0;

            /* "gigaword2feature.pyx":213
 *                     '<LOC>' : 3, '<FAC>' : 4, '<TTL>' : 5 }
 *         with codecs.open(filename, 'rb') as text_file:
 *             for line in text_file:             # <<<<<<<<<<<<<<
 *                 tokens = line.strip().rsplit( None, 1 )
 *                 if len(tokens) == 2 and tokens[1] in ner2cls:
 */
            if (likely(PyList_CheckExact(__pyx_v_text_file)) || PyTuple_CheckExact(__pyx_v_text_file)) {
              __pyx_t_15 = __pyx_v_text_file; __Pyx_INCREF(__pyx_t_15); __pyx_t_6 = 0;
              __pyx_t_12 = NULL;
            } else {
              __pyx_t_6 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_text_file); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 213, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_12 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 213, __pyx_L31_error)
            }
            for (;;) {
              if (likely(!__pyx_t_12)) {
                if (likely(PyList_CheckExact(__pyx_t_15))) {
                  if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_15)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_4 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 213, __pyx_L31_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_15, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                } else {
                  if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                  #if CYTHON_COMPILING_IN_CPYTHON
                  __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 213, __pyx_L31_error)
                  #else
                  __pyx_t_4 = PySequence_ITEM(__pyx_t_15, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  #endif
                }
              } else {
                __pyx_t_4 = __pyx_t_12(__pyx_t_15);
                if (unlikely(!__pyx_t_4)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 213, __pyx_L31_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "gigaword2feature.pyx":214
 *         with codecs.open(filename, 'rb') as text_file:
 *             for line in text_file:
 *                 tokens = line.strip().rsplit( None, 1 )             # <<<<<<<<<<<<<<
 *                 if len(tokens) == 2 and tokens[1] in ner2cls:
 *                     result[ ner2cls[tokens[1]] ].add( HanziConv.toSimplified(tokens[0][1:-1]) )
 */
              __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 214, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_2 = NULL;
              if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
                __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
                if (likely(__pyx_t_2)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                  __Pyx_INCREF(__pyx_t_2);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_7, function);
                }
              }
              if (__pyx_t_2) {
                __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L31_error)
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              } else {
                __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L31_error)
              }
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_rsplit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 214, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_XDECREF_SET(__pyx_v_tokens, __pyx_t_4);
              __pyx_t_4 = 0;

              /* "gigaword2feature.pyx":215
 *             for line in text_file:
 *                 tokens = line.strip().rsplit( None, 1 )
 *                 if len(tokens) == 2 and tokens[1] in ner2cls:             # <<<<<<<<<<<<<<
 *                     result[ ner2cls[tokens[1]] ].add( HanziConv.toSimplified(tokens[0][1:-1]) )
 * 
 */
              __pyx_t_13 = PyObject_Length(__pyx_v_tokens); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 215, __pyx_L31_error)
              __pyx_t_1 = ((__pyx_t_13 == 2) != 0);
              if (__pyx_t_1) {
              } else {
                __pyx_t_17 = __pyx_t_1;
                goto __pyx_L42_bool_binop_done;
              }
              __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_tokens, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_t_4, __pyx_cur_scope->__pyx_v_ner2cls, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 215, __pyx_L31_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_18 = (__pyx_t_1 != 0);
              __pyx_t_17 = __pyx_t_18;
              __pyx_L42_bool_binop_done:;
              if (__pyx_t_17) {

                /* "gigaword2feature.pyx":216
 *                 tokens = line.strip().rsplit( None, 1 )
 *                 if len(tokens) == 2 and tokens[1] in ner2cls:
 *                     result[ ner2cls[tokens[1]] ].add( HanziConv.toSimplified(tokens[0][1:-1]) )             # <<<<<<<<<<<<<<
 * 
 *     logger.info( '; '.join( str((cls,len(result[ner2cls[cls]]))) for cls in ner2cls ) )
 */
                __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_tokens, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_ner2cls, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_t_7 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_result, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_add); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_HanziConv); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_toSimplified); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 216, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_tokens, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_19 = __Pyx_PyObject_GetSlice(__pyx_t_5, 1, -1L, NULL, NULL, &__pyx_slice__24, 1, 1, 1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 216, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_19);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __pyx_t_5 = NULL;
                if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_14))) {
                  __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_14);
                  if (likely(__pyx_t_5)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                    __Pyx_INCREF(__pyx_t_5);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_14, function);
                  }
                }
                if (!__pyx_t_5) {
                  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_19); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L31_error)
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                  __Pyx_GOTREF(__pyx_t_7);
                } else {
                  __pyx_t_20 = PyTuple_New(1+1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 216, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_5); __pyx_t_5 = NULL;
                  __Pyx_GIVEREF(__pyx_t_19);
                  PyTuple_SET_ITEM(__pyx_t_20, 0+1, __pyx_t_19);
                  __pyx_t_19 = 0;
                  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_20, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                }
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __pyx_t_14 = NULL;
                if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
                  __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
                  if (likely(__pyx_t_14)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                    __Pyx_INCREF(__pyx_t_14);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_2, function);
                  }
                }
                if (!__pyx_t_14) {
                  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L31_error)
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __Pyx_GOTREF(__pyx_t_4);
                } else {
                  __pyx_t_20 = PyTuple_New(1+1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 216, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_14); __pyx_t_14 = NULL;
                  __Pyx_GIVEREF(__pyx_t_7);
                  PyTuple_SET_ITEM(__pyx_t_20, 0+1, __pyx_t_7);
                  __pyx_t_7 = 0;
                  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_20, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                }
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                /* "gigaword2feature.pyx":215
 *             for line in text_file:
 *                 tokens = line.strip().rsplit( None, 1 )
 *                 if len(tokens) == 2 and tokens[1] in ner2cls:             # <<<<<<<<<<<<<<
 *                     result[ ner2cls[tokens[1]] ].add( HanziConv.toSimplified(tokens[0][1:-1]) )
 * 
 */
              }

              /* "gigaword2feature.pyx":213
 *                     '<LOC>' : 3, '<FAC>' : 4, '<TTL>' : 5 }
 *         with codecs.open(filename, 'rb') as text_file:
 *             for line in text_file:             # <<<<<<<<<<<<<<
 *                 tokens = line.strip().rsplit( None, 1 )
 *                 if len(tokens) == 2 and tokens[1] in ner2cls:
 */
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "gigaword2feature.pyx":212
 *         ner2cls = { '<PER>' : 0, '<ORG>' : 1, '<GPE>' : 2,
 *                     '<LOC>' : 3, '<FAC>' : 4, '<TTL>' : 5 }
 *         with codecs.open(filename, 'rb') as text_file:             # <<<<<<<<<<<<<<
 *             for line in text_file:
 *                 tokens = line.strip().rsplit( None, 1 )
 */
          }
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L38_try_end;
          __pyx_L31_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("gigaword2feature.gazetteer", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_4, &__pyx_t_2) < 0) __PYX_ERR(0, 212, __pyx_L33_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_20 = PyTuple_Pack(3, __pyx_t_15, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 212, __pyx_L33_except_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_20, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 212, __pyx_L33_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (__pyx_t_17 < 0) __PYX_ERR(0, 212, __pyx_L33_except_error)
            __pyx_t_18 = ((!(__pyx_t_17 != 0)) != 0);
            if (__pyx_t_18) {
              __Pyx_GIVEREF(__pyx_t_15);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_2);
              __Pyx_ErrRestoreWithState(__pyx_t_15, __pyx_t_4, __pyx_t_2);
              __pyx_t_15 = 0; __pyx_t_4 = 0; __pyx_t_2 = 0; 
              __PYX_ERR(0, 212, __pyx_L33_except_error)
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            goto __pyx_L32_exception_handled;
          }
          __pyx_L33_except_error:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
          goto __pyx_L1_error;
          __pyx_L32_exception_handled:;
          __Pyx_PyThreadState_assign
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_10, __pyx_t_9);
          __pyx_L38_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_8) {
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__25, NULL);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 212, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          goto __pyx_L30;
        }
        __pyx_L30:;
      }
      goto __pyx_L47;
      __pyx_L27_error:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L1_error;
      __pyx_L47:;
    }
  }
  __pyx_L3:;

  /* "gigaword2feature.pyx":218
 *                     result[ ner2cls[tokens[1]] ].add( HanziConv.toSimplified(tokens[0][1:-1]) )
 * 
 *     logger.info( '; '.join( str((cls,len(result[ner2cls[cls]]))) for cls in ner2cls ) )             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_pf_16gigaword2feature_9gazetteer_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_20 = __Pyx_PyString_Join(__pyx_kp_s__26, __pyx_t_4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_20); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_20);
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_20);
    __pyx_t_20 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":219
 * 
 *     logger.info( '; '.join( str((cls,len(result[ner2cls[cls]]))) for cls in ner2cls ) )
 *     return result             # <<<<<<<<<<<<<<
 * 
 * ################################################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_result);
  __pyx_r = __pyx_cur_scope->__pyx_v_result;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":189
 * 
 * 
 * def gazetteer( filename, mode = 'CoNLL2003' ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("gigaword2feature.gazetteer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_text_file);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_tokens);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_10generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":224
 * 
 * 
 * def CoNLL2003( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_9CoNLL2003(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_16gigaword2feature_8CoNLL2003[] = "\n    Parameters\n    ----------\n        filename : str\n            path to directory containing NER-annotated Gigaword\n\n    Yields\n    ------\n        sentence  : list of str\n            original sentence\n        ner_begin : list of int\n            start indices of NER, inclusive\n        ner_end   : list of int\n            end indices of NER, excusive\n        ner_label : list of int\n            The entity type of sentence[ner_begin[i]:ner_end[i]] is label[i]\n    ";
static PyMethodDef __pyx_mdef_16gigaword2feature_9CoNLL2003 = {"CoNLL2003", (PyCFunction)__pyx_pw_16gigaword2feature_9CoNLL2003, METH_O, __pyx_doc_16gigaword2feature_8CoNLL2003};
static PyObject *__pyx_pw_16gigaword2feature_9CoNLL2003(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CoNLL2003 (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_8CoNLL2003(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_8CoNLL2003(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CoNLL2003", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_4_CoNLL2003(__pyx_ptype_16gigaword2feature___pyx_scope_struct_4_CoNLL2003, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_filename = __pyx_v_filename;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_10generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_CoNLL2003, __pyx_n_s_CoNLL2003); if (unlikely(!gen)) __PYX_ERR(0, 224, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.CoNLL2003", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_10generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L24_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 224, __pyx_L1_error)

  /* "gigaword2feature.pyx":242
 *             The entity type of sentence[ner_begin[i]:ner_end[i]] is label[i]
 *     """
 *     ner2cls = { 'B-PER' : 0, 'I-PER' : 0,             # <<<<<<<<<<<<<<
 *                 'B-LOC' : 1, 'I-LOC' : 1,
 *                 'B-ORG' : 2, 'I-ORG' : 2,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_B_PER, __pyx_int_0) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_I_PER, __pyx_int_0) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_B_LOC, __pyx_int_1) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_I_LOC, __pyx_int_1) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_B_ORG, __pyx_int_2) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_I_ORG, __pyx_int_2) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_B_MISC, __pyx_int_3) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_I_MISC, __pyx_int_3) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_ner2cls = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":246
 *                 'B-ORG' : 2, 'I-ORG' : 2,
 *                 'B-MISC' : 3, 'I-MISC' : 3 }
 *     sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4             # <<<<<<<<<<<<<<
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_int_4;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_sentence = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_ner_begin = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_ner_end = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_ner_label = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_last_ner = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "gigaword2feature.pyx":248
 *     sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:             # <<<<<<<<<<<<<<
 *         for line in text_file:
 *             tokens = line.strip().split()
 */
  /*with:*/ {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_open); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_2 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_6, __pyx_cur_scope->__pyx_v_filename);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_6, __pyx_n_s_rb);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_5, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {
          __Pyx_GIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_v_text_file = __pyx_t_2;
          __pyx_t_2 = 0;

          /* "gigaword2feature.pyx":249
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:
 *         for line in text_file:             # <<<<<<<<<<<<<<
 *             tokens = line.strip().split()
 * 
 */
          if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_text_file)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_text_file)) {
            __pyx_t_2 = __pyx_cur_scope->__pyx_v_text_file; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
            __pyx_t_11 = NULL;
          } else {
            __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_text_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 249, __pyx_L8_error)
          }
          for (;;) {
            if (likely(!__pyx_t_11)) {
              if (likely(PyList_CheckExact(__pyx_t_2))) {
                if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 249, __pyx_L8_error)
                #else
                __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              } else {
                if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 249, __pyx_L8_error)
                #else
                __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              }
            } else {
              __pyx_t_5 = __pyx_t_11(__pyx_t_2);
              if (unlikely(!__pyx_t_5)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 249, __pyx_L8_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_5);
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            __pyx_t_5 = 0;

            /* "gigaword2feature.pyx":250
 *     with codecs.open( filename, 'rb' ) as text_file:
 *         for line in text_file:
 *             tokens = line.strip().split()             # <<<<<<<<<<<<<<
 * 
 *             if len(tokens) > 1:
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_1 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            if (__pyx_t_1) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            } else {
              __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L8_error)
            }
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            if (__pyx_t_3) {
              __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 250, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            } else {
              __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 250, __pyx_L8_error)
            }
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tokens);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tokens, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            __pyx_t_5 = 0;

            /* "gigaword2feature.pyx":252
 *             tokens = line.strip().split()
 * 
 *             if len(tokens) > 1:             # <<<<<<<<<<<<<<
 *                 word, label = tokens[0], tokens[-1]
 *                 ner = ner2cls.get( label, 4 );
 */
            __pyx_t_12 = PyObject_Length(__pyx_cur_scope->__pyx_v_tokens); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 252, __pyx_L8_error)
            __pyx_t_13 = ((__pyx_t_12 > 1) != 0);
            if (__pyx_t_13) {

              /* "gigaword2feature.pyx":253
 * 
 *             if len(tokens) > 1:
 *                 word, label = tokens[0], tokens[-1]             # <<<<<<<<<<<<<<
 *                 ner = ner2cls.get( label, 4 );
 *                 if ner != last_ner:
 */
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tokens, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tokens, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 253, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_word);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_word, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_5);
              __pyx_t_5 = 0;
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_label);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_label, __pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_4);
              __pyx_t_4 = 0;

              /* "gigaword2feature.pyx":254
 *             if len(tokens) > 1:
 *                 word, label = tokens[0], tokens[-1]
 *                 ner = ner2cls.get( label, 4 );             # <<<<<<<<<<<<<<
 *                 if ner != last_ner:
 *                     if last_ner != 4:
 */
              __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_ner2cls, __pyx_cur_scope->__pyx_v_label, __pyx_int_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ner);
              __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ner, __pyx_t_4);
              __Pyx_GIVEREF(__pyx_t_4);
              __pyx_t_4 = 0;

              /* "gigaword2feature.pyx":255
 *                 word, label = tokens[0], tokens[-1]
 *                 ner = ner2cls.get( label, 4 );
 *                 if ner != last_ner:             # <<<<<<<<<<<<<<
 *                     if last_ner != 4:
 *                         ner_end.append( len(sentence) )
 */
              __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ner, __pyx_cur_scope->__pyx_v_last_ner, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 255, __pyx_L8_error)
              __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 255, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (__pyx_t_13) {

                /* "gigaword2feature.pyx":256
 *                 ner = ner2cls.get( label, 4 );
 *                 if ner != last_ner:
 *                     if last_ner != 4:             # <<<<<<<<<<<<<<
 *                         ner_end.append( len(sentence) )
 *                     if ner != 4:
 */
                __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_last_ner, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 256, __pyx_L8_error)
                __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 256, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (__pyx_t_13) {

                  /* "gigaword2feature.pyx":257
 *                 if ner != last_ner:
 *                     if last_ner != 4:
 *                         ner_end.append( len(sentence) )             # <<<<<<<<<<<<<<
 *                     if ner != 4:
 *                         ner_begin.append( len(sentence) );
 */
                  __pyx_t_12 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 257, __pyx_L8_error)
                  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 257, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_14 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_ner_end, __pyx_t_4); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 257, __pyx_L8_error)
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                  /* "gigaword2feature.pyx":256
 *                 ner = ner2cls.get( label, 4 );
 *                 if ner != last_ner:
 *                     if last_ner != 4:             # <<<<<<<<<<<<<<
 *                         ner_end.append( len(sentence) )
 *                     if ner != 4:
 */
                }

                /* "gigaword2feature.pyx":258
 *                     if last_ner != 4:
 *                         ner_end.append( len(sentence) )
 *                     if ner != 4:             # <<<<<<<<<<<<<<
 *                         ner_begin.append( len(sentence) );
 *                         ner_label.append( ner );
 */
                __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ner, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 258, __pyx_L8_error)
                __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 258, __pyx_L8_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (__pyx_t_13) {

                  /* "gigaword2feature.pyx":259
 *                         ner_end.append( len(sentence) )
 *                     if ner != 4:
 *                         ner_begin.append( len(sentence) );             # <<<<<<<<<<<<<<
 *                         ner_label.append( ner );
 *                 last_ner = ner
 */
                  __pyx_t_12 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 259, __pyx_L8_error)
                  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_14 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_ner_begin, __pyx_t_4); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 259, __pyx_L8_error)
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                  /* "gigaword2feature.pyx":260
 *                     if ner != 4:
 *                         ner_begin.append( len(sentence) );
 *                         ner_label.append( ner );             # <<<<<<<<<<<<<<
 *                 last_ner = ner
 *                 sentence.append( word )
 */
                  __pyx_t_14 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_ner_label, __pyx_cur_scope->__pyx_v_ner); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 260, __pyx_L8_error)

                  /* "gigaword2feature.pyx":258
 *                     if last_ner != 4:
 *                         ner_end.append( len(sentence) )
 *                     if ner != 4:             # <<<<<<<<<<<<<<
 *                         ner_begin.append( len(sentence) );
 *                         ner_label.append( ner );
 */
                }

                /* "gigaword2feature.pyx":255
 *                 word, label = tokens[0], tokens[-1]
 *                 ner = ner2cls.get( label, 4 );
 *                 if ner != last_ner:             # <<<<<<<<<<<<<<
 *                     if last_ner != 4:
 *                         ner_end.append( len(sentence) )
 */
              }

              /* "gigaword2feature.pyx":261
 *                         ner_begin.append( len(sentence) );
 *                         ner_label.append( ner );
 *                 last_ner = ner             # <<<<<<<<<<<<<<
 *                 sentence.append( word )
 * 
 */
              __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner);
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_last_ner);
              __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_last_ner, __pyx_cur_scope->__pyx_v_ner);
              __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner);

              /* "gigaword2feature.pyx":262
 *                         ner_label.append( ner );
 *                 last_ner = ner
 *                 sentence.append( word )             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
              __pyx_t_14 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_word); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 262, __pyx_L8_error)

              /* "gigaword2feature.pyx":252
 *             tokens = line.strip().split()
 * 
 *             if len(tokens) > 1:             # <<<<<<<<<<<<<<
 *                 word, label = tokens[0], tokens[-1]
 *                 ner = ner2cls.get( label, 4 );
 */
              goto __pyx_L18;
            }

            /* "gigaword2feature.pyx":265
 * 
 *             else:
 *                 if len(sentence) > 0:             # <<<<<<<<<<<<<<
 *                     if len(ner_end) < len(ner_begin):
 *                         ner_end.append( len(sentence) )
 */
            /*else*/ {
              __pyx_t_12 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 265, __pyx_L8_error)
              __pyx_t_13 = ((__pyx_t_12 > 0) != 0);
              if (__pyx_t_13) {

                /* "gigaword2feature.pyx":266
 *             else:
 *                 if len(sentence) > 0:
 *                     if len(ner_end) < len(ner_begin):             # <<<<<<<<<<<<<<
 *                         ner_end.append( len(sentence) )
 *                     assert len(ner_end) == len(ner_begin)
 */
                __pyx_t_12 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_ner_end); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 266, __pyx_L8_error)
                __pyx_t_15 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_ner_begin); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 266, __pyx_L8_error)
                __pyx_t_13 = ((__pyx_t_12 < __pyx_t_15) != 0);
                if (__pyx_t_13) {

                  /* "gigaword2feature.pyx":267
 *                 if len(sentence) > 0:
 *                     if len(ner_end) < len(ner_begin):
 *                         ner_end.append( len(sentence) )             # <<<<<<<<<<<<<<
 *                     assert len(ner_end) == len(ner_begin)
 *                     yield sentence, ner_begin, ner_end, ner_label
 */
                  __pyx_t_15 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 267, __pyx_L8_error)
                  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 267, __pyx_L8_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_14 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_ner_end, __pyx_t_4); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 267, __pyx_L8_error)
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                  /* "gigaword2feature.pyx":266
 *             else:
 *                 if len(sentence) > 0:
 *                     if len(ner_end) < len(ner_begin):             # <<<<<<<<<<<<<<
 *                         ner_end.append( len(sentence) )
 *                     assert len(ner_end) == len(ner_begin)
 */
                }

                /* "gigaword2feature.pyx":268
 *                     if len(ner_end) < len(ner_begin):
 *                         ner_end.append( len(sentence) )
 *                     assert len(ner_end) == len(ner_begin)             # <<<<<<<<<<<<<<
 *                     yield sentence, ner_begin, ner_end, ner_label
 *                     # if filename.endswith( 'eng.train' ) and 3 in ner_label:
 */
                #ifndef CYTHON_WITHOUT_ASSERTIONS
                if (unlikely(!Py_OptimizeFlag)) {
                  __pyx_t_15 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_ner_end); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 268, __pyx_L8_error)
                  __pyx_t_12 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_ner_begin); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 268, __pyx_L8_error)
                  if (unlikely(!((__pyx_t_15 == __pyx_t_12) != 0))) {
                    PyErr_SetNone(PyExc_AssertionError);
                    __PYX_ERR(0, 268, __pyx_L8_error)
                  }
                }
                #endif

                /* "gigaword2feature.pyx":269
 *                         ner_end.append( len(sentence) )
 *                     assert len(ner_end) == len(ner_begin)
 *                     yield sentence, ner_begin, ner_end, ner_label             # <<<<<<<<<<<<<<
 *                     # if filename.endswith( 'eng.train' ) and 3 in ner_label:
 *                     #     yield sentence, ner_begin, ner_end, ner_label
 */
                __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 269, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence);
                __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentence);
                PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_sentence);
                __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner_begin);
                __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner_begin);
                PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_cur_scope->__pyx_v_ner_begin);
                __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner_end);
                __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner_end);
                PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_cur_scope->__pyx_v_ner_end);
                __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner_label);
                __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner_label);
                PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_cur_scope->__pyx_v_ner_label);
                __pyx_r = __pyx_t_4;
                __pyx_t_4 = 0;
                __Pyx_XGIVEREF(__pyx_t_2);
                __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
                __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
                __Pyx_XGIVEREF(__pyx_t_7);
                __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
                __Pyx_XGIVEREF(__pyx_t_8);
                __pyx_cur_scope->__pyx_t_3 = __pyx_t_8;
                __Pyx_XGIVEREF(__pyx_t_9);
                __pyx_cur_scope->__pyx_t_4 = __pyx_t_9;
                __Pyx_XGIVEREF(__pyx_t_10);
                __pyx_cur_scope->__pyx_t_5 = __pyx_t_10;
                __pyx_cur_scope->__pyx_t_6 = __pyx_t_11;
                __Pyx_XGIVEREF(__pyx_r);
                __Pyx_RefNannyFinishContext();
                /* return from generator, yielding value */
                __pyx_generator->resume_label = 1;
                return __pyx_r;
                __pyx_L24_resume_from_yield:;
                __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
                __pyx_cur_scope->__pyx_t_0 = 0;
                __Pyx_XGOTREF(__pyx_t_2);
                __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
                __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
                __pyx_cur_scope->__pyx_t_2 = 0;
                __Pyx_XGOTREF(__pyx_t_7);
                __pyx_t_8 = __pyx_cur_scope->__pyx_t_3;
                __pyx_cur_scope->__pyx_t_3 = 0;
                __Pyx_XGOTREF(__pyx_t_8);
                __pyx_t_9 = __pyx_cur_scope->__pyx_t_4;
                __pyx_cur_scope->__pyx_t_4 = 0;
                __Pyx_XGOTREF(__pyx_t_9);
                __pyx_t_10 = __pyx_cur_scope->__pyx_t_5;
                __pyx_cur_scope->__pyx_t_5 = 0;
                __Pyx_XGOTREF(__pyx_t_10);
                __pyx_t_11 = __pyx_cur_scope->__pyx_t_6;
                if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 269, __pyx_L8_error)

                /* "gigaword2feature.pyx":272
 *                     # if filename.endswith( 'eng.train' ) and 3 in ner_label:
 *                     #     yield sentence, ner_begin, ner_end, ner_label
 *                     sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4             # <<<<<<<<<<<<<<
 * 
 * ################################################################################
 */
                __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 272, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_16 = __pyx_int_4;
                __Pyx_INCREF(__pyx_t_16);
                __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_sentence);
                __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_sentence, ((PyObject*)__pyx_t_4));
                __Pyx_GIVEREF(__pyx_t_4);
                __pyx_t_4 = 0;
                __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_ner_begin);
                __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_ner_begin, ((PyObject*)__pyx_t_5));
                __Pyx_GIVEREF(__pyx_t_5);
                __pyx_t_5 = 0;
                __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_ner_end);
                __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_ner_end, ((PyObject*)__pyx_t_3));
                __Pyx_GIVEREF(__pyx_t_3);
                __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_ner_label);
                __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_ner_label, ((PyObject*)__pyx_t_1));
                __Pyx_GIVEREF(__pyx_t_1);
                __pyx_t_1 = 0;
                __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_last_ner);
                __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_last_ner, __pyx_t_16);
                __Pyx_GIVEREF(__pyx_t_16);
                __pyx_t_16 = 0;

                /* "gigaword2feature.pyx":265
 * 
 *             else:
 *                 if len(sentence) > 0:             # <<<<<<<<<<<<<<
 *                     if len(ner_end) < len(ner_begin):
 *                         ner_end.append( len(sentence) )
 */
              }
            }
            __pyx_L18:;

            /* "gigaword2feature.pyx":249
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:
 *         for line in text_file:             # <<<<<<<<<<<<<<
 *             tokens = line.strip().split()
 * 
 */
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "gigaword2feature.pyx":248
 *     sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:             # <<<<<<<<<<<<<<
 *         for line in text_file:
 *             tokens = line.strip().split()
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L15_try_end;
        __pyx_L8_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("gigaword2feature.CoNLL2003", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_16, &__pyx_t_1) < 0) __PYX_ERR(0, 248, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_16, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 248, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (__pyx_t_13 < 0) __PYX_ERR(0, 248, __pyx_L10_except_error)
          __pyx_t_18 = ((!(__pyx_t_13 != 0)) != 0);
          if (__pyx_t_18) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_16, __pyx_t_1);
            __pyx_t_2 = 0; __pyx_t_16 = 0; __pyx_t_1 = 0; 
            __PYX_ERR(0, 248, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L15_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_7) {
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__27, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 248, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L28;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L1_error;
    __pyx_L28:;
  }

  /* "gigaword2feature.pyx":224
 * 
 * 
 * def CoNLL2003( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("CoNLL2003", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":277
 * 
 * 
 * def prepare_mini_batch( batch_generator, batch_buffer, timeout ):             # <<<<<<<<<<<<<<
 *     """
 *     Put every single element that 'batch_generator' yields into 'batch_buffer'.
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_12prepare_mini_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_11prepare_mini_batch[] = "\n    Put every single element that 'batch_generator' yields into 'batch_buffer'. \n\n    batch_generator : iterable\n    batch_buffer : Queue\n    ";
static PyMethodDef __pyx_mdef_16gigaword2feature_12prepare_mini_batch = {"prepare_mini_batch", (PyCFunction)__pyx_pw_16gigaword2feature_12prepare_mini_batch, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_11prepare_mini_batch};
static PyObject *__pyx_pw_16gigaword2feature_12prepare_mini_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_batch_generator = 0;
  PyObject *__pyx_v_batch_buffer = 0;
  PyObject *__pyx_v_timeout = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepare_mini_batch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_batch_generator,&__pyx_n_s_batch_buffer,&__pyx_n_s_timeout,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_batch_generator)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_batch_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prepare_mini_batch", 1, 3, 3, 1); __PYX_ERR(0, 277, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeout)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prepare_mini_batch", 1, 3, 3, 2); __PYX_ERR(0, 277, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prepare_mini_batch") < 0)) __PYX_ERR(0, 277, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_batch_generator = values[0];
    __pyx_v_batch_buffer = values[1];
    __pyx_v_timeout = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prepare_mini_batch", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.prepare_mini_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_11prepare_mini_batch(__pyx_self, __pyx_v_batch_generator, __pyx_v_batch_buffer, __pyx_v_timeout);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_11prepare_mini_batch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_batch_generator, PyObject *__pyx_v_batch_buffer, PyObject *__pyx_v_timeout) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("prepare_mini_batch", 0);

  /* "gigaword2feature.pyx":284
 *     batch_buffer : Queue
 *     """
 *     for x in batch_generator:             # <<<<<<<<<<<<<<
 *         batch_buffer.put( x, True, timeout )
 *     batch_buffer.put( None, True, timeout )
 */
  if (likely(PyList_CheckExact(__pyx_v_batch_generator)) || PyTuple_CheckExact(__pyx_v_batch_generator)) {
    __pyx_t_1 = __pyx_v_batch_generator; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_batch_generator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 284, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 284, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 284, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":285
 *     """
 *     for x in batch_generator:
 *         batch_buffer.put( x, True, timeout )             # <<<<<<<<<<<<<<
 *     batch_buffer.put( None, True, timeout )
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_batch_buffer, __pyx_n_s_put); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_x);
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, Py_True);
    __Pyx_INCREF(__pyx_v_timeout);
    __Pyx_GIVEREF(__pyx_v_timeout);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_timeout);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":284
 *     batch_buffer : Queue
 *     """
 *     for x in batch_generator:             # <<<<<<<<<<<<<<
 *         batch_buffer.put( x, True, timeout )
 *     batch_buffer.put( None, True, timeout )
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":286
 *     for x in batch_generator:
 *         batch_buffer.put( x, True, timeout )
 *     batch_buffer.put( None, True, timeout )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_batch_buffer, __pyx_n_s_put); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_2 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_2 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(3+__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_2, Py_None);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_2, Py_True);
  __Pyx_INCREF(__pyx_v_timeout);
  __Pyx_GIVEREF(__pyx_v_timeout);
  PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_2, __pyx_v_timeout);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":277
 * 
 * 
 * def prepare_mini_batch( batch_generator, batch_buffer, timeout ):             # <<<<<<<<<<<<<<
 *     """
 *     Put every single element that 'batch_generator' yields into 'batch_buffer'.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gigaword2feature.prepare_mini_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":292
 * 
 * class chinese_char_vocab( object ):
 *     def __init__( self, filename ):             # <<<<<<<<<<<<<<
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18chinese_char_vocab_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_18chinese_char_vocab_1__init__ = {"__init__", (PyCFunction)__pyx_pw_16gigaword2feature_18chinese_char_vocab_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_16gigaword2feature_18chinese_char_vocab_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_filename,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 292, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 292, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_filename = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 292, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.chinese_char_vocab.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_18chinese_char_vocab___init__(__pyx_self, __pyx_v_self, __pyx_v_filename);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18chinese_char_vocab___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_fp = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gigaword2feature.pyx":293
 * class chinese_char_vocab( object ):
 *     def __init__( self, filename ):
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )             # <<<<<<<<<<<<<<
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_compile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_A_Za_z_0_9, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_number, __pyx_t_1) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":295
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:             # <<<<<<<<<<<<<<
 *             self.idx2char = [ c.strip() for c in fp.read().strip().split( u'\n' ) ]
 *         self.char2idx = { c:i for (i,c) in enumerate( self.idx2char ) }
 */
  /*with:*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_open); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_4 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_filename);
    __Pyx_GIVEREF(__pyx_v_filename);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_filename);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_n_s_rb);
    __Pyx_INCREF(__pyx_n_s_utf8);
    __Pyx_GIVEREF(__pyx_n_s_utf8);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_n_s_utf8);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {
          __pyx_v_fp = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":296
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 *             self.idx2char = [ c.strip() for c in fp.read().strip().split( u'\n' ) ]             # <<<<<<<<<<<<<<
 *         self.char2idx = { c:i for (i,c) in enumerate( self.idx2char ) }
 * 
 */
          __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 296, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_2) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          } else {
            __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L7_error)
          }
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_5) {
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L7_error)
          }
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
            __pyx_t_11 = NULL;
          } else {
            __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 296, __pyx_L7_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_11)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 296, __pyx_L7_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 296, __pyx_L7_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_11(__pyx_t_3);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 296, __pyx_L7_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_strip); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_2 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            if (__pyx_t_2) {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            } else {
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L7_error)
            }
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 296, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_idx2char, __pyx_t_4) < 0) __PYX_ERR(0, 296, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":295
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:             # <<<<<<<<<<<<<<
 *             self.idx2char = [ c.strip() for c in fp.read().strip().split( u'\n' ) ]
 *         self.char2idx = { c:i for (i,c) in enumerate( self.idx2char ) }
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("gigaword2feature.chinese_char_vocab.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_1) < 0) __PYX_ERR(0, 295, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 295, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_13 < 0) __PYX_ERR(0, 295, __pyx_L9_except_error)
          __pyx_t_14 = ((!(__pyx_t_13 != 0)) != 0);
          if (__pyx_t_14) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_3, __pyx_t_1);
            __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_1 = 0; 
            __PYX_ERR(0, 295, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_7) {
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__31, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L20;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L1_error;
    __pyx_L20:;
  }

  /* "gigaword2feature.pyx":297
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 *             self.idx2char = [ c.strip() for c in fp.read().strip().split( u'\n' ) ]
 *         self.char2idx = { c:i for (i,c) in enumerate( self.idx2char ) }             # <<<<<<<<<<<<<<
 * 
 * 
 */
  { /* enter inner scope */
    PyObject *__pyx_8genexpr1__pyx_v_i = NULL;
    PyObject *__pyx_8genexpr1__pyx_v_c = NULL;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L23_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_3 = __pyx_int_0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_idx2char); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L23_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L23_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 297, __pyx_L23_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 297, __pyx_L23_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 297, __pyx_L23_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_11(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 297, __pyx_L23_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_c, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_i, __pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L23_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_c, (PyObject*)__pyx_8genexpr1__pyx_v_i))) __PYX_ERR(0, 297, __pyx_L23_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i);
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_c);
    goto __pyx_L26_exit_scope;
    __pyx_L23_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i);
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_c);
    goto __pyx_L1_error;
    __pyx_L26_exit_scope:;
  } /* exit inner scope */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_char2idx, __pyx_t_1) < 0) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":292
 * 
 * class chinese_char_vocab( object ):
 *     def __init__( self, filename ):             # <<<<<<<<<<<<<<
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gigaword2feature.chinese_char_vocab.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fp);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":300
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         # This must be same as in "skipgram-trainer.py"
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18chinese_char_vocab_3sentence2indices(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_18chinese_char_vocab_3sentence2indices = {"sentence2indices", (PyCFunction)__pyx_pw_16gigaword2feature_18chinese_char_vocab_3sentence2indices, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_16gigaword2feature_18chinese_char_vocab_3sentence2indices(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sentence = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sentence2indices (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_sentence,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sentence2indices", 1, 2, 2, 1); __PYX_ERR(0, 300, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sentence2indices") < 0)) __PYX_ERR(0, 300, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_sentence = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sentence2indices", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 300, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.chinese_char_vocab.sentence2indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_18chinese_char_vocab_2sentence2indices(__pyx_self, __pyx_v_self, __pyx_v_sentence);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_18chinese_char_vocab_16sentence2indices_2generator11(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":304
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 *         for w in sentence:
 *             has_chinese = any( u'\u4e00' <= c <= u'\u9fff' for c in w )             # <<<<<<<<<<<<<<
 *             if has_chinese:
 *                 chars.extend( list(w) )
 */

static PyObject *__pyx_pf_16gigaword2feature_18chinese_char_vocab_16sentence2indices_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_6_genexpr(__pyx_ptype_16gigaword2feature___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_18chinese_char_vocab_16sentence2indices_2generator11, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_chinese_char_vocab_sentence2indi); if (unlikely(!gen)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.chinese_char_vocab.sentence2indices.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_18chinese_char_vocab_16sentence2indices_2generator11(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 304, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_w)) { __Pyx_RaiseClosureNameError("w"); __PYX_ERR(0, 304, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_w)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_w)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_w; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 304, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_c);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_c, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_n_u__32, __pyx_cur_scope->__pyx_v_c, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
    if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {
      __Pyx_DECREF(__pyx_t_4);
      __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_c, __pyx_kp_u__33, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":311
 * 
 *         return [ self.char2idx.get(c, c_unk) for c in \
 *                  imap( lambda c: u'<numeric>' if re.match(self.number, c) else c, chars ) ]             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18chinese_char_vocab_16sentence2indices_3lambda2(PyObject *__pyx_self, PyObject *__pyx_v_c); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_18chinese_char_vocab_16sentence2indices_3lambda2 = {"lambda2", (PyCFunction)__pyx_pw_16gigaword2feature_18chinese_char_vocab_16sentence2indices_3lambda2, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_18chinese_char_vocab_16sentence2indices_3lambda2(PyObject *__pyx_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda2(__pyx_self, ((PyObject *)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_c) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *__pyx_cur_scope;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("lambda2", 0);
  __pyx_outer_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_match); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 311, __pyx_L1_error) }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_c);
  __Pyx_GIVEREF(__pyx_v_c);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_c);
  __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {
    __Pyx_INCREF(__pyx_kp_u_numeric);
    __pyx_t_1 = __pyx_kp_u_numeric;
  } else {
    __Pyx_INCREF(__pyx_v_c);
    __pyx_t_1 = __pyx_v_c;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gigaword2feature.chinese_char_vocab.sentence2indices.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":300
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         # This must be same as in "skipgram-trainer.py"
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 */

static PyObject *__pyx_pf_16gigaword2feature_18chinese_char_vocab_2sentence2indices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sentence) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *__pyx_cur_scope;
  PyObject *__pyx_v_chars = NULL;
  PyObject *__pyx_v_c_unk = NULL;
  PyObject *__pyx_v_has_chinese = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  __Pyx_RefNannySetupContext("sentence2indices", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_5_sentence2indices(__pyx_ptype_16gigaword2feature___pyx_scope_struct_5_sentence2indices, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "gigaword2feature.pyx":302
 *     def sentence2indices( self, sentence ):
 *         # This must be same as in "skipgram-trainer.py"
 *         chars, c_unk = [], self.word2idx[u'<unk>']             # <<<<<<<<<<<<<<
 *         for w in sentence:
 *             has_chinese = any( u'\u4e00' <= c <= u'\u9fff' for c in w )
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_word2idx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_2, __pyx_kp_u_unk); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_chars = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_c_unk = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":303
 *         # This must be same as in "skipgram-trainer.py"
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 *         for w in sentence:             # <<<<<<<<<<<<<<
 *             has_chinese = any( u'\u4e00' <= c <= u'\u9fff' for c in w )
 *             if has_chinese:
 */
  if (likely(PyList_CheckExact(__pyx_v_sentence)) || PyTuple_CheckExact(__pyx_v_sentence)) {
    __pyx_t_3 = __pyx_v_sentence; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_sentence); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 303, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 303, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 303, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_w);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_w, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":304
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 *         for w in sentence:
 *             has_chinese = any( u'\u4e00' <= c <= u'\u9fff' for c in w )             # <<<<<<<<<<<<<<
 *             if has_chinese:
 *                 chars.extend( list(w) )
 */
    __pyx_t_1 = __pyx_pf_16gigaword2feature_18chinese_char_vocab_16sentence2indices_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_has_chinese, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gigaword2feature.pyx":305
 *         for w in sentence:
 *             has_chinese = any( u'\u4e00' <= c <= u'\u9fff' for c in w )
 *             if has_chinese:             # <<<<<<<<<<<<<<
 *                 chars.extend( list(w) )
 *             else:
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_has_chinese); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 305, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "gigaword2feature.pyx":306
 *             has_chinese = any( u'\u4e00' <= c <= u'\u9fff' for c in w )
 *             if has_chinese:
 *                 chars.extend( list(w) )             # <<<<<<<<<<<<<<
 *             else:
 *                 chars.append( w )
 */
      __pyx_t_2 = PySequence_List(__pyx_cur_scope->__pyx_v_w); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyList_Extend(__pyx_v_chars, __pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 306, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "gigaword2feature.pyx":305
 *         for w in sentence:
 *             has_chinese = any( u'\u4e00' <= c <= u'\u9fff' for c in w )
 *             if has_chinese:             # <<<<<<<<<<<<<<
 *                 chars.extend( list(w) )
 *             else:
 */
      goto __pyx_L5;
    }

    /* "gigaword2feature.pyx":308
 *                 chars.extend( list(w) )
 *             else:
 *                 chars.append( w )             # <<<<<<<<<<<<<<
 * 
 *         return [ self.char2idx.get(c, c_unk) for c in \
 */
    /*else*/ {
      __pyx_t_2 = __pyx_cur_scope->__pyx_v_w;
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_chars, __pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 308, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "gigaword2feature.pyx":303
 *         # This must be same as in "skipgram-trainer.py"
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 *         for w in sentence:             # <<<<<<<<<<<<<<
 *             has_chinese = any( u'\u4e00' <= c <= u'\u9fff' for c in w )
 *             if has_chinese:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":310
 *                 chars.append( w )
 * 
 *         return [ self.char2idx.get(c, c_unk) for c in \             # <<<<<<<<<<<<<<
 *                  imap( lambda c: u'<numeric>' if re.match(self.number, c) else c, chars ) ]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "gigaword2feature.pyx":311
 * 
 *         return [ self.char2idx.get(c, c_unk) for c in \
 *                  imap( lambda c: u'<numeric>' if re.match(self.number, c) else c, chars ) ]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_imap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_18chinese_char_vocab_16sentence2indices_3lambda2, 0, __pyx_n_s_chinese_char_vocab_sentence2indi_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gigaword2feature, __pyx_d, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_9) {
    __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_4, __pyx_t_8);
  __Pyx_INCREF(__pyx_v_chars);
  __Pyx_GIVEREF(__pyx_v_chars);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_4, __pyx_v_chars);
  __pyx_t_8 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 311, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 311, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 311, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 311, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gigaword2feature.pyx":310
 *                 chars.append( w )
 * 
 *         return [ self.char2idx.get(c, c_unk) for c in \             # <<<<<<<<<<<<<<
 *                  imap( lambda c: u'<numeric>' if re.match(self.number, c) else c, chars ) ]
 * 
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_char2idx); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_11 = 1;
      }
    }
    __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_c);
    __Pyx_GIVEREF(__pyx_v_c);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_v_c);
    __Pyx_INCREF(__pyx_v_c_unk);
    __Pyx_GIVEREF(__pyx_v_c_unk);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_v_c_unk);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":300
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         # This must be same as in "skipgram-trainer.py"
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("gigaword2feature.chinese_char_vocab.sentence2indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chars);
  __Pyx_XDECREF(__pyx_v_c_unk);
  __Pyx_XDECREF(__pyx_v_has_chinese);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":329
 *     cdef regex* contains_digit
 * 
 *     def __cinit__( self, filename, alpha = 0.7, case_sensitive = False ):             # <<<<<<<<<<<<<<
 *         self.word2idx = {}
 *         self.word2fofe = {}
 */

/* Python wrapper */
static int __pyx_pw_16gigaword2feature_10vocabulary_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_16gigaword2feature_10vocabulary_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_case_sensitive = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_alpha,&__pyx_n_s_case_sensitive,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_float_0_7);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_case_sensitive);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 329, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_alpha = values[1];
    __pyx_v_case_sensitive = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 329, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.vocabulary.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_10vocabulary___cinit__(((struct __pyx_obj_16gigaword2feature_vocabulary *)__pyx_v_self), __pyx_v_filename, __pyx_v_alpha, __pyx_v_case_sensitive);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_16gigaword2feature_10vocabulary___cinit__(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_alpha, PyObject *__pyx_v_case_sensitive) {
  PyObject *__pyx_v_word_file = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_word = NULL;
  Py_ssize_t __pyx_v_idx;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  int __pyx_t_3;
  std::string __pyx_t_4;
  std::regex *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gigaword2feature.pyx":330
 * 
 *     def __cinit__( self, filename, alpha = 0.7, case_sensitive = False ):
 *         self.word2idx = {}             # <<<<<<<<<<<<<<
 *         self.word2fofe = {}
 *         self.alpha = alpha
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->word2idx);
  __Pyx_DECREF(__pyx_v_self->word2idx);
  __pyx_v_self->word2idx = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":331
 *     def __cinit__( self, filename, alpha = 0.7, case_sensitive = False ):
 *         self.word2idx = {}
 *         self.word2fofe = {}             # <<<<<<<<<<<<<<
 *         self.alpha = alpha
 *         self.case_sensitive = case_sensitive
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->word2fofe);
  __Pyx_DECREF(__pyx_v_self->word2fofe);
  __pyx_v_self->word2fofe = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":332
 *         self.word2idx = {}
 *         self.word2fofe = {}
 *         self.alpha = alpha             # <<<<<<<<<<<<<<
 *         self.case_sensitive = case_sensitive
 *         self.date_pattern_1 = new regex( r"^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$" )
 */
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_alpha); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L1_error)
  __pyx_v_self->alpha = __pyx_t_2;

  /* "gigaword2feature.pyx":333
 *         self.word2fofe = {}
 *         self.alpha = alpha
 *         self.case_sensitive = case_sensitive             # <<<<<<<<<<<<<<
 *         self.date_pattern_1 = new regex( r"^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$" )
 *         self.date_pattern_2 = new regex( r"^(((\d{4}(\/|-|\.)((0[13578](\/|-|\.)|1[02](\/|-|\.))(0[1-9]|[12]\d|3[01])|(0[13456789](\/|-|\.)|1[012](\/|-|\.))(0[1-9]|[12]\d|30)|02(\/|-|\.)(0[1-9]|1\d|2[0-8])))|((([02468][048]|[13579][26])00|\d{2}([13579][26]|0[48]|[2468][048])))(\/|-|\.)02(\/|-|\.)29)){0,10}$" )
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_case_sensitive); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L1_error)
  __pyx_v_self->case_sensitive = __pyx_t_3;

  /* "gigaword2feature.pyx":334
 *         self.alpha = alpha
 *         self.case_sensitive = case_sensitive
 *         self.date_pattern_1 = new regex( r"^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$" )             # <<<<<<<<<<<<<<
 *         self.date_pattern_2 = new regex( r"^(((\d{4}(\/|-|\.)((0[13578](\/|-|\.)|1[02](\/|-|\.))(0[1-9]|[12]\d|3[01])|(0[13456789](\/|-|\.)|1[012](\/|-|\.))(0[1-9]|[12]\d|30)|02(\/|-|\.)(0[1-9]|1\d|2[0-8])))|((([02468][048]|[13579][26])00|\d{2}([13579][26]|0[48]|[2468][048])))(\/|-|\.)02(\/|-|\.)29)){0,10}$" )
 *         self.number_pattern = new regex( r"^(\+|-)?(([1-9]\d{0,2}(,\d{3})*)|([1-9]\d*)|0)(\.\d+)?$" )
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_31_0_13578_1_02_Jan_Mar_May_Jul); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 334, __pyx_L1_error)
  try {
    __pyx_t_5 = new std::regex(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 334, __pyx_L1_error)
  }
  __pyx_v_self->date_pattern_1 = __pyx_t_5;

  /* "gigaword2feature.pyx":335
 *         self.case_sensitive = case_sensitive
 *         self.date_pattern_1 = new regex( r"^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$" )
 *         self.date_pattern_2 = new regex( r"^(((\d{4}(\/|-|\.)((0[13578](\/|-|\.)|1[02](\/|-|\.))(0[1-9]|[12]\d|3[01])|(0[13456789](\/|-|\.)|1[012](\/|-|\.))(0[1-9]|[12]\d|30)|02(\/|-|\.)(0[1-9]|1\d|2[0-8])))|((([02468][048]|[13579][26])00|\d{2}([13579][26]|0[48]|[2468][048])))(\/|-|\.)02(\/|-|\.)29)){0,10}$" )             # <<<<<<<<<<<<<<
 *         self.number_pattern = new regex( r"^(\+|-)?(([1-9]\d{0,2}(,\d{3})*)|([1-9]\d*)|0)(\.\d+)?$" )
 *         self.phone_pattern = new regex( r"^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$" )
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_d_4_0_13578_1_02_0_1_9_12_d_3_0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
  try {
    __pyx_t_5 = new std::regex(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 335, __pyx_L1_error)
  }
  __pyx_v_self->date_pattern_2 = __pyx_t_5;

  /* "gigaword2feature.pyx":336
 *         self.date_pattern_1 = new regex( r"^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$" )
 *         self.date_pattern_2 = new regex( r"^(((\d{4}(\/|-|\.)((0[13578](\/|-|\.)|1[02](\/|-|\.))(0[1-9]|[12]\d|3[01])|(0[13456789](\/|-|\.)|1[012](\/|-|\.))(0[1-9]|[12]\d|30)|02(\/|-|\.)(0[1-9]|1\d|2[0-8])))|((([02468][048]|[13579][26])00|\d{2}([13579][26]|0[48]|[2468][048])))(\/|-|\.)02(\/|-|\.)29)){0,10}$" )
 *         self.number_pattern = new regex( r"^(\+|-)?(([1-9]\d{0,2}(,\d{3})*)|([1-9]\d*)|0)(\.\d+)?$" )             # <<<<<<<<<<<<<<
 *         self.phone_pattern = new regex( r"^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$" )
 *         self.time_pattern = new regex( r"^(?:(?:([01]?\d|2[0-3]):)?([0-5]?\d):)?([0-5]?\d)$" )
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_1_9_d_0_2_d_3_1_9_d_0_d); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
  try {
    __pyx_t_5 = new std::regex(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 336, __pyx_L1_error)
  }
  __pyx_v_self->number_pattern = __pyx_t_5;

  /* "gigaword2feature.pyx":337
 *         self.date_pattern_2 = new regex( r"^(((\d{4}(\/|-|\.)((0[13578](\/|-|\.)|1[02](\/|-|\.))(0[1-9]|[12]\d|3[01])|(0[13456789](\/|-|\.)|1[012](\/|-|\.))(0[1-9]|[12]\d|30)|02(\/|-|\.)(0[1-9]|1\d|2[0-8])))|((([02468][048]|[13579][26])00|\d{2}([13579][26]|0[48]|[2468][048])))(\/|-|\.)02(\/|-|\.)29)){0,10}$" )
 *         self.number_pattern = new regex( r"^(\+|-)?(([1-9]\d{0,2}(,\d{3})*)|([1-9]\d*)|0)(\.\d+)?$" )
 *         self.phone_pattern = new regex( r"^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$" )             # <<<<<<<<<<<<<<
 *         self.time_pattern = new regex( r"^(?:(?:([01]?\d|2[0-3]):)?([0-5]?\d):)?([0-5]?\d)$" )
 *         self.contains_digit = new regex( r"^.*[0-9].*$" )
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_1_s_s_s_2_9_1_02_9_2_9_02_8_1_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
  try {
    __pyx_t_5 = new std::regex(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 337, __pyx_L1_error)
  }
  __pyx_v_self->phone_pattern = __pyx_t_5;

  /* "gigaword2feature.pyx":338
 *         self.number_pattern = new regex( r"^(\+|-)?(([1-9]\d{0,2}(,\d{3})*)|([1-9]\d*)|0)(\.\d+)?$" )
 *         self.phone_pattern = new regex( r"^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$" )
 *         self.time_pattern = new regex( r"^(?:(?:([01]?\d|2[0-3]):)?([0-5]?\d):)?([0-5]?\d)$" )             # <<<<<<<<<<<<<<
 *         self.contains_digit = new regex( r"^.*[0-9].*$" )
 * 
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_01_d_2_0_3_0_5_d_0_5_d); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L1_error)
  try {
    __pyx_t_5 = new std::regex(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 338, __pyx_L1_error)
  }
  __pyx_v_self->time_pattern = __pyx_t_5;

  /* "gigaword2feature.pyx":339
 *         self.phone_pattern = new regex( r"^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$" )
 *         self.time_pattern = new regex( r"^(?:(?:([01]?\d|2[0-3]):)?([0-5]?\d):)?([0-5]?\d)$" )
 *         self.contains_digit = new regex( r"^.*[0-9].*$" )             # <<<<<<<<<<<<<<
 * 
 *         with codecs.open( filename ) as word_file:
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_0_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 339, __pyx_L1_error)
  try {
    __pyx_t_5 = new std::regex(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 339, __pyx_L1_error)
  }
  __pyx_v_self->contains_digit = __pyx_t_5;

  /* "gigaword2feature.pyx":341
 *         self.contains_digit = new regex( r"^.*[0-9].*$" )
 * 
 *         with codecs.open( filename ) as word_file:             # <<<<<<<<<<<<<<
 *             for line in word_file:
 *                 word = line.strip().split()[0]
 */
  /*with:*/ {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_open); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_filename);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 341, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 341, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 341, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {
          __pyx_v_word_file = __pyx_t_8;
          __pyx_t_8 = 0;

          /* "gigaword2feature.pyx":342
 * 
 *         with codecs.open( filename ) as word_file:
 *             for line in word_file:             # <<<<<<<<<<<<<<
 *                 word = line.strip().split()[0]
 *                 idx = len(self.word2idx)
 */
          if (likely(PyList_CheckExact(__pyx_v_word_file)) || PyTuple_CheckExact(__pyx_v_word_file)) {
            __pyx_t_8 = __pyx_v_word_file; __Pyx_INCREF(__pyx_t_8); __pyx_t_13 = 0;
            __pyx_t_14 = NULL;
          } else {
            __pyx_t_13 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_word_file); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 342, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 342, __pyx_L7_error)
          }
          for (;;) {
            if (likely(!__pyx_t_14)) {
              if (likely(PyList_CheckExact(__pyx_t_8))) {
                if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_8)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 342, __pyx_L7_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 342, __pyx_L7_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_14(__pyx_t_8);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 342, __pyx_L7_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "gigaword2feature.pyx":343
 *         with codecs.open( filename ) as word_file:
 *             for line in word_file:
 *                 word = line.strip().split()[0]             # <<<<<<<<<<<<<<
 *                 idx = len(self.word2idx)
 *                 self.word2idx[word] = idx
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 343, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_15 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            if (__pyx_t_15) {
              __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_15); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 343, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else {
              __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 343, __pyx_L7_error)
            }
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 343, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_7)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            if (__pyx_t_7) {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            } else {
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L7_error)
            }
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 343, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF_SET(__pyx_v_word, __pyx_t_6);
            __pyx_t_6 = 0;

            /* "gigaword2feature.pyx":344
 *             for line in word_file:
 *                 word = line.strip().split()[0]
 *                 idx = len(self.word2idx)             # <<<<<<<<<<<<<<
 *                 self.word2idx[word] = idx
 * 
 */
            __pyx_t_6 = __pyx_v_self->word2idx;
            __Pyx_INCREF(__pyx_t_6);
            if (unlikely(__pyx_t_6 == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
              __PYX_ERR(0, 344, __pyx_L7_error)
            }
            __pyx_t_16 = PyDict_Size(__pyx_t_6); if (unlikely(__pyx_t_16 == -1)) __PYX_ERR(0, 344, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_v_idx = __pyx_t_16;

            /* "gigaword2feature.pyx":345
 *                 word = line.strip().split()[0]
 *                 idx = len(self.word2idx)
 *                 self.word2idx[word] = idx             # <<<<<<<<<<<<<<
 * 
 *         logger.info( '%d words' % len(self.word2idx) )
 */
            __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_idx); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 345, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            if (unlikely(__pyx_v_self->word2idx == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
              __PYX_ERR(0, 345, __pyx_L7_error)
            }
            if (unlikely(PyDict_SetItem(__pyx_v_self->word2idx, __pyx_v_word, __pyx_t_6) < 0)) __PYX_ERR(0, 345, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "gigaword2feature.pyx":342
 * 
 *         with codecs.open( filename ) as word_file:
 *             for line in word_file:             # <<<<<<<<<<<<<<
 *                 word = line.strip().split()[0]
 *                 idx = len(self.word2idx)
 */
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "gigaword2feature.pyx":341
 *         self.contains_digit = new regex( r"^.*[0-9].*$" )
 * 
 *         with codecs.open( filename ) as word_file:             # <<<<<<<<<<<<<<
 *             for line in word_file:
 *                 word = line.strip().split()[0]
 */
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("gigaword2feature.vocabulary.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_6, &__pyx_t_1) < 0) __PYX_ERR(0, 341, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = PyTuple_Pack(3, __pyx_t_8, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 341, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_7, NULL);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 341, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (__pyx_t_3 < 0) __PYX_ERR(0, 341, __pyx_L9_except_error)
          __pyx_t_18 = ((!(__pyx_t_3 != 0)) != 0);
          if (__pyx_t_18) {
            __Pyx_GIVEREF(__pyx_t_8);
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_8, __pyx_t_6, __pyx_t_1);
            __pyx_t_8 = 0; __pyx_t_6 = 0; __pyx_t_1 = 0; 
            __PYX_ERR(0, 341, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_9) {
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__34, NULL);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L20;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L1_error;
    __pyx_L20:;
  }

  /* "gigaword2feature.pyx":347
 *                 self.word2idx[word] = idx
 * 
 *         logger.info( '%d words' % len(self.word2idx) )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_v_self->word2idx;
  __Pyx_INCREF(__pyx_t_6);
  if (unlikely(__pyx_t_6 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 347, __pyx_L1_error)
  }
  __pyx_t_13 = PyDict_Size(__pyx_t_6); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_d_words, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":329
 *     cdef regex* contains_digit
 * 
 *     def __cinit__( self, filename, alpha = 0.7, case_sensitive = False ):             # <<<<<<<<<<<<<<
 *         self.word2idx = {}
 *         self.word2fofe = {}
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("gigaword2feature.vocabulary.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_word_file);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_word);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":350
 * 
 * 
 *     cdef sentence2indices( self, sentence, vector[int]& numeric ):             # <<<<<<<<<<<<<<
 *         cdef string s
 *         cdef int i
 */

static PyObject *__pyx_f_16gigaword2feature_10vocabulary_sentence2indices(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self, PyObject *__pyx_v_sentence, std::vector<int>  &__pyx_v_numeric) {
  std::string __pyx_v_s;
  int __pyx_v_i;
  int __pyx_v_n;
  int __pyx_v_unk;
  int __pyx_v_UNK;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  std::string __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("sentence2indices", 0);

  /* "gigaword2feature.pyx":353
 *         cdef string s
 *         cdef int i
 *         cdef int n = len( sentence )             # <<<<<<<<<<<<<<
 *         cdef int unk = self.word2idx['<unk>']
 *         cdef int UNK = self.word2idx.get( '<UNK>', unk )
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_sentence); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "gigaword2feature.pyx":354
 *         cdef int i
 *         cdef int n = len( sentence )
 *         cdef int unk = self.word2idx['<unk>']             # <<<<<<<<<<<<<<
 *         cdef int UNK = self.word2idx.get( '<UNK>', unk )
 *         numeric.resize( n )
 */
  if (unlikely(__pyx_v_self->word2idx == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 354, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->word2idx, __pyx_kp_s_unk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_unk = __pyx_t_3;

  /* "gigaword2feature.pyx":355
 *         cdef int n = len( sentence )
 *         cdef int unk = self.word2idx['<unk>']
 *         cdef int UNK = self.word2idx.get( '<UNK>', unk )             # <<<<<<<<<<<<<<
 *         numeric.resize( n )
 *         for i, w in enumerate(sentence):
 */
  if (unlikely(__pyx_v_self->word2idx == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
    __PYX_ERR(0, 355, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_unk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->word2idx, __pyx_kp_s_UNK, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_UNK = __pyx_t_3;

  /* "gigaword2feature.pyx":356
 *         cdef int unk = self.word2idx['<unk>']
 *         cdef int UNK = self.word2idx.get( '<UNK>', unk )
 *         numeric.resize( n )             # <<<<<<<<<<<<<<
 *         for i, w in enumerate(sentence):
 *             s = w.lower()
 */
  try {
    __pyx_v_numeric.resize(__pyx_v_n);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 356, __pyx_L1_error)
  }

  /* "gigaword2feature.pyx":357
 *         cdef int UNK = self.word2idx.get( '<UNK>', unk )
 *         numeric.resize( n )
 *         for i, w in enumerate(sentence):             # <<<<<<<<<<<<<<
 *             s = w.lower()
 *             if regex_match( s, self.contains_digit[0] ):
 */
  __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_v_sentence)) || PyTuple_CheckExact(__pyx_v_sentence)) {
    __pyx_t_4 = __pyx_v_sentence; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_sentence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 357, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 357, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_v_i = __pyx_t_3;
    __pyx_t_3 = (__pyx_t_3 + 1);

    /* "gigaword2feature.pyx":358
 *         numeric.resize( n )
 *         for i, w in enumerate(sentence):
 *             s = w.lower()             # <<<<<<<<<<<<<<
 *             if regex_match( s, self.contains_digit[0] ):
 *                 if regex_match( s, self.number_pattern[0] ):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_w, __pyx_n_s_lower); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_s = __pyx_t_8;

    /* "gigaword2feature.pyx":359
 *         for i, w in enumerate(sentence):
 *             s = w.lower()
 *             if regex_match( s, self.contains_digit[0] ):             # <<<<<<<<<<<<<<
 *                 if regex_match( s, self.number_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<numeric-value>', unk)
 */
    __pyx_t_9 = (std::regex_match(__pyx_v_s, (__pyx_v_self->contains_digit[0])) != 0);
    if (__pyx_t_9) {

      /* "gigaword2feature.pyx":360
 *             s = w.lower()
 *             if regex_match( s, self.contains_digit[0] ):
 *                 if regex_match( s, self.number_pattern[0] ):             # <<<<<<<<<<<<<<
 *                     numeric[i] = self.word2idx.get('<numeric-value>', unk)
 *                 elif regex_match( s, self.date_pattern_1[0] ) or \
 */
      __pyx_t_9 = (std::regex_match(__pyx_v_s, (__pyx_v_self->number_pattern[0])) != 0);
      if (__pyx_t_9) {

        /* "gigaword2feature.pyx":361
 *             if regex_match( s, self.contains_digit[0] ):
 *                 if regex_match( s, self.number_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<numeric-value>', unk)             # <<<<<<<<<<<<<<
 *                 elif regex_match( s, self.date_pattern_1[0] ) or \
 *                                 regex_match( w, self.date_pattern_2[0] ):
 */
        if (unlikely(__pyx_v_self->word2idx == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
          __PYX_ERR(0, 361, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_unk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->word2idx, __pyx_kp_s_numeric_value, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_numeric[__pyx_v_i]) = __pyx_t_10;

        /* "gigaword2feature.pyx":360
 *             s = w.lower()
 *             if regex_match( s, self.contains_digit[0] ):
 *                 if regex_match( s, self.number_pattern[0] ):             # <<<<<<<<<<<<<<
 *                     numeric[i] = self.word2idx.get('<numeric-value>', unk)
 *                 elif regex_match( s, self.date_pattern_1[0] ) or \
 */
        goto __pyx_L6;
      }

      /* "gigaword2feature.pyx":362
 *                 if regex_match( s, self.number_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<numeric-value>', unk)
 *                 elif regex_match( s, self.date_pattern_1[0] ) or \             # <<<<<<<<<<<<<<
 *                                 regex_match( w, self.date_pattern_2[0] ):
 *                     numeric[i] = self.word2idx.get('<date-value>', unk)
 */
      __pyx_t_11 = (std::regex_match(__pyx_v_s, (__pyx_v_self->date_pattern_1[0])) != 0);
      if (!__pyx_t_11) {
      } else {
        __pyx_t_9 = __pyx_t_11;
        goto __pyx_L7_bool_binop_done;
      }

      /* "gigaword2feature.pyx":363
 *                     numeric[i] = self.word2idx.get('<numeric-value>', unk)
 *                 elif regex_match( s, self.date_pattern_1[0] ) or \
 *                                 regex_match( w, self.date_pattern_2[0] ):             # <<<<<<<<<<<<<<
 *                     numeric[i] = self.word2idx.get('<date-value>', unk)
 *                 elif regex_match( s, self.time_pattern[0] ):
 */
      __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_w); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L1_error)
      __pyx_t_11 = (std::regex_match(__pyx_t_8, (__pyx_v_self->date_pattern_2[0])) != 0);
      __pyx_t_9 = __pyx_t_11;
      __pyx_L7_bool_binop_done:;

      /* "gigaword2feature.pyx":362
 *                 if regex_match( s, self.number_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<numeric-value>', unk)
 *                 elif regex_match( s, self.date_pattern_1[0] ) or \             # <<<<<<<<<<<<<<
 *                                 regex_match( w, self.date_pattern_2[0] ):
 *                     numeric[i] = self.word2idx.get('<date-value>', unk)
 */
      if (__pyx_t_9) {

        /* "gigaword2feature.pyx":364
 *                 elif regex_match( s, self.date_pattern_1[0] ) or \
 *                                 regex_match( w, self.date_pattern_2[0] ):
 *                     numeric[i] = self.word2idx.get('<date-value>', unk)             # <<<<<<<<<<<<<<
 *                 elif regex_match( s, self.time_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<time-value>', unk)
 */
        if (unlikely(__pyx_v_self->word2idx == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
          __PYX_ERR(0, 364, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_unk); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->word2idx, __pyx_kp_s_date_value, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        (__pyx_v_numeric[__pyx_v_i]) = __pyx_t_10;

        /* "gigaword2feature.pyx":362
 *                 if regex_match( s, self.number_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<numeric-value>', unk)
 *                 elif regex_match( s, self.date_pattern_1[0] ) or \             # <<<<<<<<<<<<<<
 *                                 regex_match( w, self.date_pattern_2[0] ):
 *                     numeric[i] = self.word2idx.get('<date-value>', unk)
 */
        goto __pyx_L6;
      }

      /* "gigaword2feature.pyx":365
 *                                 regex_match( w, self.date_pattern_2[0] ):
 *                     numeric[i] = self.word2idx.get('<date-value>', unk)
 *                 elif regex_match( s, self.time_pattern[0] ):             # <<<<<<<<<<<<<<
 *                     numeric[i] = self.word2idx.get('<time-value>', unk)
 *                 elif regex_match( s, self.phone_pattern[0] ):
 */
      __pyx_t_9 = (std::regex_match(__pyx_v_s, (__pyx_v_self->time_pattern[0])) != 0);
      if (__pyx_t_9) {

        /* "gigaword2feature.pyx":366
 *                     numeric[i] = self.word2idx.get('<date-value>', unk)
 *                 elif regex_match( s, self.time_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<time-value>', unk)             # <<<<<<<<<<<<<<
 *                 elif regex_match( s, self.phone_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<phone-value>', unk)
 */
        if (unlikely(__pyx_v_self->word2idx == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
          __PYX_ERR(0, 366, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_unk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->word2idx, __pyx_kp_s_time_value, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_numeric[__pyx_v_i]) = __pyx_t_10;

        /* "gigaword2feature.pyx":365
 *                                 regex_match( w, self.date_pattern_2[0] ):
 *                     numeric[i] = self.word2idx.get('<date-value>', unk)
 *                 elif regex_match( s, self.time_pattern[0] ):             # <<<<<<<<<<<<<<
 *                     numeric[i] = self.word2idx.get('<time-value>', unk)
 *                 elif regex_match( s, self.phone_pattern[0] ):
 */
        goto __pyx_L6;
      }

      /* "gigaword2feature.pyx":367
 *                 elif regex_match( s, self.time_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<time-value>', unk)
 *                 elif regex_match( s, self.phone_pattern[0] ):             # <<<<<<<<<<<<<<
 *                     numeric[i] = self.word2idx.get('<phone-value>', unk)
 *                 else:
 */
      __pyx_t_9 = (std::regex_match(__pyx_v_s, (__pyx_v_self->phone_pattern[0])) != 0);
      if (__pyx_t_9) {

        /* "gigaword2feature.pyx":368
 *                     numeric[i] = self.word2idx.get('<time-value>', unk)
 *                 elif regex_match( s, self.phone_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<phone-value>', unk)             # <<<<<<<<<<<<<<
 *                 else:
 *                     numeric[i] = self.word2idx.get('<contains-digit>', unk)
 */
        if (unlikely(__pyx_v_self->word2idx == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
          __PYX_ERR(0, 368, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_unk); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->word2idx, __pyx_kp_s_phone_value, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 368, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        (__pyx_v_numeric[__pyx_v_i]) = __pyx_t_10;

        /* "gigaword2feature.pyx":367
 *                 elif regex_match( s, self.time_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<time-value>', unk)
 *                 elif regex_match( s, self.phone_pattern[0] ):             # <<<<<<<<<<<<<<
 *                     numeric[i] = self.word2idx.get('<phone-value>', unk)
 *                 else:
 */
        goto __pyx_L6;
      }

      /* "gigaword2feature.pyx":370
 *                     numeric[i] = self.word2idx.get('<phone-value>', unk)
 *                 else:
 *                     numeric[i] = self.word2idx.get('<contains-digit>', unk)             # <<<<<<<<<<<<<<
 *             else:
 *                 if self.case_sensitive:
 */
      /*else*/ {
        if (unlikely(__pyx_v_self->word2idx == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
          __PYX_ERR(0, 370, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_unk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 370, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->word2idx, __pyx_kp_s_contains_digit, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 370, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 370, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_numeric[__pyx_v_i]) = __pyx_t_10;
      }
      __pyx_L6:;

      /* "gigaword2feature.pyx":359
 *         for i, w in enumerate(sentence):
 *             s = w.lower()
 *             if regex_match( s, self.contains_digit[0] ):             # <<<<<<<<<<<<<<
 *                 if regex_match( s, self.number_pattern[0] ):
 *                     numeric[i] = self.word2idx.get('<numeric-value>', unk)
 */
      goto __pyx_L5;
    }

    /* "gigaword2feature.pyx":372
 *                     numeric[i] = self.word2idx.get('<contains-digit>', unk)
 *             else:
 *                 if self.case_sensitive:             # <<<<<<<<<<<<<<
 *                     if w == w.lower():
 *                         numeric[i] = self.word2idx.get( w, unk )
 */
    /*else*/ {
      __pyx_t_9 = (__pyx_v_self->case_sensitive != 0);
      if (__pyx_t_9) {

        /* "gigaword2feature.pyx":373
 *             else:
 *                 if self.case_sensitive:
 *                     if w == w.lower():             # <<<<<<<<<<<<<<
 *                         numeric[i] = self.word2idx.get( w, unk )
 *                     else:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_w, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (__pyx_t_7) {
          __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 373, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 373, __pyx_L1_error)
        }
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_RichCompare(__pyx_v_w, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 373, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_9) {

          /* "gigaword2feature.pyx":374
 *                 if self.case_sensitive:
 *                     if w == w.lower():
 *                         numeric[i] = self.word2idx.get( w, unk )             # <<<<<<<<<<<<<<
 *                     else:
 *                         numeric[i] = self.word2idx.get( w, UNK )
 */
          if (unlikely(__pyx_v_self->word2idx == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
            __PYX_ERR(0, 374, __pyx_L1_error)
          }
          __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_unk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_6 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->word2idx, __pyx_v_w, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 374, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 374, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          (__pyx_v_numeric[__pyx_v_i]) = __pyx_t_10;

          /* "gigaword2feature.pyx":373
 *             else:
 *                 if self.case_sensitive:
 *                     if w == w.lower():             # <<<<<<<<<<<<<<
 *                         numeric[i] = self.word2idx.get( w, unk )
 *                     else:
 */
          goto __pyx_L10;
        }

        /* "gigaword2feature.pyx":376
 *                         numeric[i] = self.word2idx.get( w, unk )
 *                     else:
 *                         numeric[i] = self.word2idx.get( w, UNK )             # <<<<<<<<<<<<<<
 *                 else:
 *                     numeric[i] = self.word2idx.get( s, unk )
 */
        /*else*/ {
          if (unlikely(__pyx_v_self->word2idx == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
            __PYX_ERR(0, 376, __pyx_L1_error)
          }
          __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_UNK); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->word2idx, __pyx_v_w, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 376, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          (__pyx_v_numeric[__pyx_v_i]) = __pyx_t_10;
        }
        __pyx_L10:;

        /* "gigaword2feature.pyx":372
 *                     numeric[i] = self.word2idx.get('<contains-digit>', unk)
 *             else:
 *                 if self.case_sensitive:             # <<<<<<<<<<<<<<
 *                     if w == w.lower():
 *                         numeric[i] = self.word2idx.get( w, unk )
 */
        goto __pyx_L9;
      }

      /* "gigaword2feature.pyx":378
 *                         numeric[i] = self.word2idx.get( w, UNK )
 *                 else:
 *                     numeric[i] = self.word2idx.get( s, unk )             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__( self ):
 */
      /*else*/ {
        if (unlikely(__pyx_v_self->word2idx == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
          __PYX_ERR(0, 378, __pyx_L1_error)
        }
        __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_unk); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 378, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->word2idx, __pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 378, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 378, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (__pyx_v_numeric[__pyx_v_i]) = __pyx_t_10;
      }
      __pyx_L9:;
    }
    __pyx_L5:;

    /* "gigaword2feature.pyx":357
 *         cdef int UNK = self.word2idx.get( '<UNK>', unk )
 *         numeric.resize( n )
 *         for i, w in enumerate(sentence):             # <<<<<<<<<<<<<<
 *             s = w.lower()
 *             if regex_match( s, self.contains_digit[0] ):
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":350
 * 
 * 
 *     cdef sentence2indices( self, sentence, vector[int]& numeric ):             # <<<<<<<<<<<<<<
 *         cdef string s
 *         cdef int i
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gigaword2feature.vocabulary.sentence2indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":380
 *                     numeric[i] = self.word2idx.get( s, unk )
 * 
 *     def __dealloc__( self ):             # <<<<<<<<<<<<<<
 *         del self.date_pattern_1
 *         del self.date_pattern_2
 */

/* Python wrapper */
static void __pyx_pw_16gigaword2feature_10vocabulary_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_16gigaword2feature_10vocabulary_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_16gigaword2feature_10vocabulary_2__dealloc__(((struct __pyx_obj_16gigaword2feature_vocabulary *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_16gigaword2feature_10vocabulary_2__dealloc__(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gigaword2feature.pyx":381
 * 
 *     def __dealloc__( self ):
 *         del self.date_pattern_1             # <<<<<<<<<<<<<<
 *         del self.date_pattern_2
 *         del self.time_pattern
 */
  delete __pyx_v_self->date_pattern_1;

  /* "gigaword2feature.pyx":382
 *     def __dealloc__( self ):
 *         del self.date_pattern_1
 *         del self.date_pattern_2             # <<<<<<<<<<<<<<
 *         del self.time_pattern
 *         del self.number_pattern
 */
  delete __pyx_v_self->date_pattern_2;

  /* "gigaword2feature.pyx":383
 *         del self.date_pattern_1
 *         del self.date_pattern_2
 *         del self.time_pattern             # <<<<<<<<<<<<<<
 *         del self.number_pattern
 *         del self.phone_pattern
 */
  delete __pyx_v_self->time_pattern;

  /* "gigaword2feature.pyx":384
 *         del self.date_pattern_2
 *         del self.time_pattern
 *         del self.number_pattern             # <<<<<<<<<<<<<<
 *         del self.phone_pattern
 *         del self.contains_digit
 */
  delete __pyx_v_self->number_pattern;

  /* "gigaword2feature.pyx":385
 *         del self.time_pattern
 *         del self.number_pattern
 *         del self.phone_pattern             # <<<<<<<<<<<<<<
 *         del self.contains_digit
 * 
 */
  delete __pyx_v_self->phone_pattern;

  /* "gigaword2feature.pyx":386
 *         del self.number_pattern
 *         del self.phone_pattern
 *         del self.contains_digit             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->contains_digit;

  /* "gigaword2feature.pyx":380
 *                     numeric[i] = self.word2idx.get( s, unk )
 * 
 *     def __dealloc__( self ):             # <<<<<<<<<<<<<<
 *         del self.date_pattern_1
 *         del self.date_pattern_2
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gigaword2feature.pyx":391
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def char_fofe_of_word( self, word ):             # <<<<<<<<<<<<<<
 *         if len( self.word2fofe ) > 2 * len(self.word2idx):
 *             self.word2fofe = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_10vocabulary_5char_fofe_of_word(PyObject *__pyx_v_self, PyObject *__pyx_v_word); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_10vocabulary_5char_fofe_of_word(PyObject *__pyx_v_self, PyObject *__pyx_v_word) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("char_fofe_of_word (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_10vocabulary_4char_fofe_of_word(((struct __pyx_obj_16gigaword2feature_vocabulary *)__pyx_v_self), ((PyObject *)__pyx_v_word));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_10vocabulary_4char_fofe_of_word(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self, PyObject *__pyx_v_word) {
  PyObject *__pyx_v_lfofe = NULL;
  PyObject *__pyx_v_coeff = NULL;
  PyObject *__pyx_v_c = NULL;
  long __pyx_v_i;
  PyObject *__pyx_v_rfofe = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  long __pyx_t_11;
  long __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("char_fofe_of_word", 0);

  /* "gigaword2feature.pyx":392
 *     @cython.wraparound(False)
 *     def char_fofe_of_word( self, word ):
 *         if len( self.word2fofe ) > 2 * len(self.word2idx):             # <<<<<<<<<<<<<<
 *             self.word2fofe = {}
 *         if word in self.word2fofe:
 */
  __pyx_t_1 = __pyx_v_self->word2fofe;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 392, __pyx_L1_error)
  }
  __pyx_t_2 = PyDict_Size(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_v_self->word2idx;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 392, __pyx_L1_error)
  }
  __pyx_t_3 = PyDict_Size(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = ((__pyx_t_2 > (2 * __pyx_t_3)) != 0);
  if (__pyx_t_4) {

    /* "gigaword2feature.pyx":393
 *     def char_fofe_of_word( self, word ):
 *         if len( self.word2fofe ) > 2 * len(self.word2idx):
 *             self.word2fofe = {}             # <<<<<<<<<<<<<<
 *         if word in self.word2fofe:
 *             return self.word2fofe[word]
 */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->word2fofe);
    __Pyx_DECREF(__pyx_v_self->word2fofe);
    __pyx_v_self->word2fofe = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":392
 *     @cython.wraparound(False)
 *     def char_fofe_of_word( self, word ):
 *         if len( self.word2fofe ) > 2 * len(self.word2idx):             # <<<<<<<<<<<<<<
 *             self.word2fofe = {}
 *         if word in self.word2fofe:
 */
  }

  /* "gigaword2feature.pyx":394
 *         if len( self.word2fofe ) > 2 * len(self.word2idx):
 *             self.word2fofe = {}
 *         if word in self.word2fofe:             # <<<<<<<<<<<<<<
 *             return self.word2fofe[word]
 *         else:
 */
  if (unlikely(__pyx_v_self->word2fofe == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 394, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_v_word, __pyx_v_self->word2fofe, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 394, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "gigaword2feature.pyx":395
 *             self.word2fofe = {}
 *         if word in self.word2fofe:
 *             return self.word2fofe[word]             # <<<<<<<<<<<<<<
 *         else:
 *             lfofe, coeff = numpy.zeros((128,), numpy.float32), 1
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_self->word2fofe == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 395, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->word2fofe, __pyx_v_word); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "gigaword2feature.pyx":394
 *         if len( self.word2fofe ) > 2 * len(self.word2idx):
 *             self.word2fofe = {}
 *         if word in self.word2fofe:             # <<<<<<<<<<<<<<
 *             return self.word2fofe[word]
 *         else:
 */
  }

  /* "gigaword2feature.pyx":397
 *             return self.word2fofe[word]
 *         else:
 *             lfofe, coeff = numpy.zeros((128,), numpy.float32), 1             # <<<<<<<<<<<<<<
 *             for c in reversed(word):
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_3 = 1;
      }
    }
    __pyx_t_9 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_tuple__35);
    __Pyx_GIVEREF(__pyx_tuple__35);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_3, __pyx_tuple__35);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_3, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __pyx_int_1;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_v_lfofe = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_v_coeff = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "gigaword2feature.pyx":398
 *         else:
 *             lfofe, coeff = numpy.zeros((128,), numpy.float32), 1
 *             for c in reversed(word):             # <<<<<<<<<<<<<<
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 *                 lfofe[i] += numpy.float32(coeff)
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_word);
    __Pyx_GIVEREF(__pyx_v_word);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_word);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_reversed, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7); __pyx_t_3 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 398, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 398, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 398, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_10(__pyx_t_7);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 398, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "gigaword2feature.pyx":399
 *             lfofe, coeff = numpy.zeros((128,), numpy.float32), 1
 *             for c in reversed(word):
 *                 i = ord(c) if 0 < ord(c) < 128 else 0             # <<<<<<<<<<<<<<
 *                 lfofe[i] += numpy.float32(coeff)
 *                 coeff *= self.alpha
 */
      __pyx_t_12 = __Pyx_PyObject_Ord(__pyx_v_c); if (unlikely(__pyx_t_12 == (long)(Py_UCS4)-1)) __PYX_ERR(0, 399, __pyx_L1_error)
      __pyx_t_5 = (0 < __pyx_t_12);
      if (__pyx_t_5) {
        __pyx_t_5 = (__pyx_t_12 < 0x80);
      }
      if ((__pyx_t_5 != 0)) {
        __pyx_t_12 = __Pyx_PyObject_Ord(__pyx_v_c); if (unlikely(__pyx_t_12 == (long)(Py_UCS4)-1)) __PYX_ERR(0, 399, __pyx_L1_error)
        __pyx_t_11 = __pyx_t_12;
      } else {
        __pyx_t_11 = 0;
      }
      __pyx_v_i = __pyx_t_11;

      /* "gigaword2feature.pyx":400
 *             for c in reversed(word):
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 *                 lfofe[i] += numpy.float32(coeff)             # <<<<<<<<<<<<<<
 *                 coeff *= self.alpha
 *             rfofe, coeff = numpy.zeros((128,), numpy.float32), 1
 */
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_lfofe, __pyx_t_11, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_coeff); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
      } else {
        __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_INCREF(__pyx_v_coeff);
        __Pyx_GIVEREF(__pyx_v_coeff);
        PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_v_coeff);
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_lfofe, __pyx_t_11, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "gigaword2feature.pyx":401
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 *                 lfofe[i] += numpy.float32(coeff)
 *                 coeff *= self.alpha             # <<<<<<<<<<<<<<
 *             rfofe, coeff = numpy.zeros((128,), numpy.float32), 1
 *             for c in word:
 */
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->alpha); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = PyNumber_InPlaceMultiply(__pyx_v_coeff, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_coeff, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "gigaword2feature.pyx":398
 *         else:
 *             lfofe, coeff = numpy.zeros((128,), numpy.float32), 1
 *             for c in reversed(word):             # <<<<<<<<<<<<<<
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 *                 lfofe[i] += numpy.float32(coeff)
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gigaword2feature.pyx":402
 *                 lfofe[i] += numpy.float32(coeff)
 *                 coeff *= self.alpha
 *             rfofe, coeff = numpy.zeros((128,), numpy.float32), 1             # <<<<<<<<<<<<<<
 *             for c in word:
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_3 = 1;
      }
    }
    __pyx_t_13 = PyTuple_New(2+__pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_INCREF(__pyx_tuple__36);
    __Pyx_GIVEREF(__pyx_tuple__36);
    PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_3, __pyx_tuple__36);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_3, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_int_1;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_rfofe = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_coeff, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "gigaword2feature.pyx":403
 *                 coeff *= self.alpha
 *             rfofe, coeff = numpy.zeros((128,), numpy.float32), 1
 *             for c in word:             # <<<<<<<<<<<<<<
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 *                 rfofe[i] += numpy.float32(coeff)
 */
    if (likely(PyList_CheckExact(__pyx_v_word)) || PyTuple_CheckExact(__pyx_v_word)) {
      __pyx_t_6 = __pyx_v_word; __Pyx_INCREF(__pyx_t_6); __pyx_t_3 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_word); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 403, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 403, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 403, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 403, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 403, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_10(__pyx_t_6);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 403, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "gigaword2feature.pyx":404
 *             rfofe, coeff = numpy.zeros((128,), numpy.float32), 1
 *             for c in word:
 *                 i = ord(c) if 0 < ord(c) < 128 else 0             # <<<<<<<<<<<<<<
 *                 rfofe[i] += numpy.float32(coeff)
 *                 coeff *= self.alpha
 */
      __pyx_t_12 = __Pyx_PyObject_Ord(__pyx_v_c); if (unlikely(__pyx_t_12 == (long)(Py_UCS4)-1)) __PYX_ERR(0, 404, __pyx_L1_error)
      __pyx_t_5 = (0 < __pyx_t_12);
      if (__pyx_t_5) {
        __pyx_t_5 = (__pyx_t_12 < 0x80);
      }
      if ((__pyx_t_5 != 0)) {
        __pyx_t_12 = __Pyx_PyObject_Ord(__pyx_v_c); if (unlikely(__pyx_t_12 == (long)(Py_UCS4)-1)) __PYX_ERR(0, 404, __pyx_L1_error)
        __pyx_t_11 = __pyx_t_12;
      } else {
        __pyx_t_11 = 0;
      }
      __pyx_v_i = __pyx_t_11;

      /* "gigaword2feature.pyx":405
 *             for c in word:
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 *                 rfofe[i] += numpy.float32(coeff)             # <<<<<<<<<<<<<<
 *                 coeff *= self.alpha
 *             self.word2fofe[word] = [lfofe, rfofe]
 */
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_rfofe, __pyx_t_11, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (!__pyx_t_1) {
        __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_coeff); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 405, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
      } else {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 405, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_INCREF(__pyx_v_coeff);
        __Pyx_GIVEREF(__pyx_v_coeff);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_coeff);
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 405, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_t_7, __pyx_t_13); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_rfofe, __pyx_t_11, __pyx_t_9, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "gigaword2feature.pyx":406
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 *                 rfofe[i] += numpy.float32(coeff)
 *                 coeff *= self.alpha             # <<<<<<<<<<<<<<
 *             self.word2fofe[word] = [lfofe, rfofe]
 *             return [lfofe, rfofe]
 */
      __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->alpha); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_13 = PyNumber_InPlaceMultiply(__pyx_v_coeff, __pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF_SET(__pyx_v_coeff, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "gigaword2feature.pyx":403
 *                 coeff *= self.alpha
 *             rfofe, coeff = numpy.zeros((128,), numpy.float32), 1
 *             for c in word:             # <<<<<<<<<<<<<<
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 *                 rfofe[i] += numpy.float32(coeff)
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "gigaword2feature.pyx":407
 *                 rfofe[i] += numpy.float32(coeff)
 *                 coeff *= self.alpha
 *             self.word2fofe[word] = [lfofe, rfofe]             # <<<<<<<<<<<<<<
 *             return [lfofe, rfofe]
 * 
 */
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_lfofe);
    __Pyx_GIVEREF(__pyx_v_lfofe);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_lfofe);
    __Pyx_INCREF(__pyx_v_rfofe);
    __Pyx_GIVEREF(__pyx_v_rfofe);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_v_rfofe);
    if (unlikely(__pyx_v_self->word2fofe == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 407, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->word2fofe, __pyx_v_word, __pyx_t_6) < 0)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "gigaword2feature.pyx":408
 *                 coeff *= self.alpha
 *             self.word2fofe[word] = [lfofe, rfofe]
 *             return [lfofe, rfofe]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_lfofe);
    __Pyx_GIVEREF(__pyx_v_lfofe);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_lfofe);
    __Pyx_INCREF(__pyx_v_rfofe);
    __Pyx_GIVEREF(__pyx_v_rfofe);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_v_rfofe);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "gigaword2feature.pyx":391
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def char_fofe_of_word( self, word ):             # <<<<<<<<<<<<<<
 *         if len( self.word2fofe ) > 2 * len(self.word2idx):
 *             self.word2fofe = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("gigaword2feature.vocabulary.char_fofe_of_word", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lfofe);
  __Pyx_XDECREF(__pyx_v_coeff);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_rfofe);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":413
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def char_fofe_of_phrase( self, phrase ):             # <<<<<<<<<<<<<<
 *         cdef int i, n = len(phrase)
 *         fofe = [ self.char_fofe_of_word(w) for w in phrase ]
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_10vocabulary_7char_fofe_of_phrase(PyObject *__pyx_v_self, PyObject *__pyx_v_phrase); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_10vocabulary_7char_fofe_of_phrase(PyObject *__pyx_v_self, PyObject *__pyx_v_phrase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("char_fofe_of_phrase (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_10vocabulary_6char_fofe_of_phrase(((struct __pyx_obj_16gigaword2feature_vocabulary *)__pyx_v_self), ((PyObject *)__pyx_v_phrase));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_10vocabulary_6char_fofe_of_phrase(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self, PyObject *__pyx_v_phrase) {
  int __pyx_v_i;
  int __pyx_v_n;
  PyObject *__pyx_v_fofe = NULL;
  PyObject *__pyx_v_lfofe = NULL;
  PyObject *__pyx_v_rfofe = NULL;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("char_fofe_of_phrase", 0);

  /* "gigaword2feature.pyx":414
 *     @cython.wraparound(False)
 *     def char_fofe_of_phrase( self, phrase ):
 *         cdef int i, n = len(phrase)             # <<<<<<<<<<<<<<
 *         fofe = [ self.char_fofe_of_word(w) for w in phrase ]
 *         lfofe = fofe[0][0].copy()
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_phrase); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "gigaword2feature.pyx":415
 *     def char_fofe_of_phrase( self, phrase ):
 *         cdef int i, n = len(phrase)
 *         fofe = [ self.char_fofe_of_word(w) for w in phrase ]             # <<<<<<<<<<<<<<
 *         lfofe = fofe[0][0].copy()
 *         rfofe = fofe[n - 1][1].copy()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_v_phrase)) || PyTuple_CheckExact(__pyx_v_phrase)) {
    __pyx_t_3 = __pyx_v_phrase; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_phrase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 415, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 415, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 415, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 415, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_char_fofe_of_word); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_w);
      __Pyx_GIVEREF(__pyx_v_w);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_w);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_fofe = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":416
 *         cdef int i, n = len(phrase)
 *         fofe = [ self.char_fofe_of_word(w) for w in phrase ]
 *         lfofe = fofe[0][0].copy()             # <<<<<<<<<<<<<<
 *         rfofe = fofe[n - 1][1].copy()
 *         for i in range(1, n):
 */
  __pyx_t_3 = __Pyx_GetItemInt(PyList_GET_ITEM(__pyx_v_fofe, 0), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 416, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 416, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_lfofe = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":417
 *         fofe = [ self.char_fofe_of_word(w) for w in phrase ]
 *         lfofe = fofe[0][0].copy()
 *         rfofe = fofe[n - 1][1].copy()             # <<<<<<<<<<<<<<
 *         for i in range(1, n):
 *             lfofe *= self.alpha ** len(phrase[i - 1])
 */
  __pyx_t_9 = (__pyx_v_n - 1);
  __pyx_t_5 = __Pyx_GetItemInt(PyList_GET_ITEM(__pyx_v_fofe, __pyx_t_9), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_rfofe = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":418
 *         lfofe = fofe[0][0].copy()
 *         rfofe = fofe[n - 1][1].copy()
 *         for i in range(1, n):             # <<<<<<<<<<<<<<
 *             lfofe *= self.alpha ** len(phrase[i - 1])
 *             lfofe += fofe[i][0]
 */
  __pyx_t_10 = __pyx_v_n;
  for (__pyx_t_11 = 1; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "gigaword2feature.pyx":419
 *         rfofe = fofe[n - 1][1].copy()
 *         for i in range(1, n):
 *             lfofe *= self.alpha ** len(phrase[i - 1])             # <<<<<<<<<<<<<<
 *             lfofe += fofe[i][0]
 *         for i in reversed(range(n - 1)):
 */
    __pyx_t_9 = (__pyx_v_i - 1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_phrase, __pyx_t_9, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(powf(__pyx_v_self->alpha, ((float)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_v_lfofe, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_lfofe, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "gigaword2feature.pyx":420
 *         for i in range(1, n):
 *             lfofe *= self.alpha ** len(phrase[i - 1])
 *             lfofe += fofe[i][0]             # <<<<<<<<<<<<<<
 *         for i in reversed(range(n - 1)):
 *             rfofe *= self.alpha ** len(phrase[i + 1])
 */
    __pyx_t_3 = __Pyx_GetItemInt(PyList_GET_ITEM(__pyx_v_fofe, __pyx_v_i), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_lfofe, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_lfofe, __pyx_t_2);
    __pyx_t_2 = 0;
  }

  /* "gigaword2feature.pyx":421
 *             lfofe *= self.alpha ** len(phrase[i - 1])
 *             lfofe += fofe[i][0]
 *         for i in reversed(range(n - 1)):             # <<<<<<<<<<<<<<
 *             rfofe *= self.alpha ** len(phrase[i + 1])
 *             rfofe += fofe[i][1]
 */
  for (__pyx_t_10 = (__pyx_v_n - 1)-1; __pyx_t_10 >= 0; __pyx_t_10-=1) {
    __pyx_v_i = __pyx_t_10;

    /* "gigaword2feature.pyx":422
 *             lfofe += fofe[i][0]
 *         for i in reversed(range(n - 1)):
 *             rfofe *= self.alpha ** len(phrase[i + 1])             # <<<<<<<<<<<<<<
 *             rfofe += fofe[i][1]
 *         return lfofe, rfofe
 */
    __pyx_t_9 = (__pyx_v_i + 1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_phrase, __pyx_t_9, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(powf(__pyx_v_self->alpha, ((float)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_v_rfofe, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_rfofe, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "gigaword2feature.pyx":423
 *         for i in reversed(range(n - 1)):
 *             rfofe *= self.alpha ** len(phrase[i + 1])
 *             rfofe += fofe[i][1]             # <<<<<<<<<<<<<<
 *         return lfofe, rfofe
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(PyList_GET_ITEM(__pyx_v_fofe, __pyx_v_i), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_rfofe, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_rfofe, __pyx_t_2);
    __pyx_t_2 = 0;
  }

  /* "gigaword2feature.pyx":424
 *             rfofe *= self.alpha ** len(phrase[i + 1])
 *             rfofe += fofe[i][1]
 *         return lfofe, rfofe             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_lfofe);
  __Pyx_GIVEREF(__pyx_v_lfofe);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_lfofe);
  __Pyx_INCREF(__pyx_v_rfofe);
  __Pyx_GIVEREF(__pyx_v_rfofe);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_rfofe);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":413
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def char_fofe_of_phrase( self, phrase ):             # <<<<<<<<<<<<<<
 *         cdef int i, n = len(phrase)
 *         fofe = [ self.char_fofe_of_word(w) for w in phrase ]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gigaword2feature.vocabulary.char_fofe_of_phrase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fofe);
  __Pyx_XDECREF(__pyx_v_lfofe);
  __Pyx_XDECREF(__pyx_v_rfofe);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":320
 *     cdef dict word2idx
 *     cdef dict word2fofe
 *     cdef readonly float alpha             # <<<<<<<<<<<<<<
 *     cdef bint case_sensitive
 *     cdef regex* date_pattern_1
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_10vocabulary_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_10vocabulary_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_10vocabulary_5alpha___get__(((struct __pyx_obj_16gigaword2feature_vocabulary *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_10vocabulary_5alpha___get__(struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.vocabulary.alpha.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":434
 *     The legancy code is strongly-typed. Polymorphism is the fastest fix.
 *     """
 *     def __init__( self, filename ):             # <<<<<<<<<<<<<<
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_18chinese_word_vocab_1__init__ = {"__init__", (PyCFunction)__pyx_pw_16gigaword2feature_18chinese_word_vocab_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_filename,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 434, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 434, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_filename = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 434, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.chinese_word_vocab.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_18chinese_word_vocab___init__(__pyx_self, __pyx_v_self, __pyx_v_filename);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18chinese_word_vocab___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_fp = NULL;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gigaword2feature.pyx":435
 *     """
 *     def __init__( self, filename ):
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )             # <<<<<<<<<<<<<<
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_compile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_A_Za_z_0_9, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_number, __pyx_t_1) < 0) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":437
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:             # <<<<<<<<<<<<<<
 *             self.idx2word = [ w.strip() for w in fp.read().strip().split( u'\n' ) ]
 *         self.word2idx = { w:i for (i,w) in enumerate( self.idx2word ) }
 */
  /*with:*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_open); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_4 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_filename);
    __Pyx_GIVEREF(__pyx_v_filename);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_filename);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_n_s_rb);
    __Pyx_INCREF(__pyx_n_s_utf8);
    __Pyx_GIVEREF(__pyx_n_s_utf8);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_n_s_utf8);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L3_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {
          __pyx_v_fp = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":438
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 *             self.idx2word = [ w.strip() for w in fp.read().strip().split( u'\n' ) ]             # <<<<<<<<<<<<<<
 *         self.word2idx = { w:i for (i,w) in enumerate( self.idx2word ) }
 * 
 */
          __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 438, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_fp, __pyx_n_s_read); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_2) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          } else {
            __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L7_error)
          }
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_5) {
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L7_error)
          }
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
            __pyx_t_11 = NULL;
          } else {
            __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 438, __pyx_L7_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_11)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 438, __pyx_L7_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 438, __pyx_L7_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_11(__pyx_t_3);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 438, __pyx_L7_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_w, __pyx_n_s_strip); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_2 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
              }
            }
            if (__pyx_t_2) {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            } else {
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L7_error)
            }
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 438, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_idx2word, __pyx_t_4) < 0) __PYX_ERR(0, 438, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":437
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:             # <<<<<<<<<<<<<<
 *             self.idx2word = [ w.strip() for w in fp.read().strip().split( u'\n' ) ]
 *         self.word2idx = { w:i for (i,w) in enumerate( self.idx2word ) }
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("gigaword2feature.chinese_word_vocab.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_1) < 0) __PYX_ERR(0, 437, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 437, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_13 < 0) __PYX_ERR(0, 437, __pyx_L9_except_error)
          __pyx_t_14 = ((!(__pyx_t_13 != 0)) != 0);
          if (__pyx_t_14) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_3, __pyx_t_1);
            __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_1 = 0; 
            __PYX_ERR(0, 437, __pyx_L9_except_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L14_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_7) {
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__39, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 437, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L20;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L1_error;
    __pyx_L20:;
  }

  /* "gigaword2feature.pyx":439
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 *             self.idx2word = [ w.strip() for w in fp.read().strip().split( u'\n' ) ]
 *         self.word2idx = { w:i for (i,w) in enumerate( self.idx2word ) }             # <<<<<<<<<<<<<<
 * 
 * 
 */
  { /* enter inner scope */
    PyObject *__pyx_8genexpr3__pyx_v_i = NULL;
    PyObject *__pyx_8genexpr3__pyx_v_w = NULL;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L23_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_3 = __pyx_int_0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_idx2word); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L23_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L23_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 439, __pyx_L23_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 439, __pyx_L23_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 439, __pyx_L23_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_11(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 439, __pyx_L23_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_w, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_i, __pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L23_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr3__pyx_v_w, (PyObject*)__pyx_8genexpr3__pyx_v_i))) __PYX_ERR(0, 439, __pyx_L23_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i);
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_w);
    goto __pyx_L26_exit_scope;
    __pyx_L23_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i);
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_w);
    goto __pyx_L1_error;
    __pyx_L26_exit_scope:;
  } /* exit inner scope */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_word2idx, __pyx_t_1) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":434
 *     The legancy code is strongly-typed. Polymorphism is the fastest fix.
 *     """
 *     def __init__( self, filename ):             # <<<<<<<<<<<<<<
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gigaword2feature.chinese_word_vocab.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fp);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":443
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_3sentence2indices(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_18chinese_word_vocab_3sentence2indices = {"sentence2indices", (PyCFunction)__pyx_pw_16gigaword2feature_18chinese_word_vocab_3sentence2indices, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_3sentence2indices(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_sentence = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sentence2indices (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_sentence,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sentence2indices", 1, 2, 2, 1); __PYX_ERR(0, 443, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sentence2indices") < 0)) __PYX_ERR(0, 443, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_sentence = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sentence2indices", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 443, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.chinese_word_vocab.sentence2indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_18chinese_word_vocab_2sentence2indices(__pyx_self, __pyx_v_self, __pyx_v_sentence);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":446
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 *                    imap( lambda w: u'<numeric>' if re.match(self.number, w) else w, sentence ) ]             # <<<<<<<<<<<<<<
 *         return result
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_16sentence2indices_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_w); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_18chinese_word_vocab_16sentence2indices_lambda3 = {"lambda3", (PyCFunction)__pyx_pw_16gigaword2feature_18chinese_word_vocab_16sentence2indices_lambda3, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_16sentence2indices_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_w) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda3(__pyx_self, ((PyObject *)__pyx_v_w));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_w) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *__pyx_cur_scope;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __pyx_outer_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_re); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_match); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 446, __pyx_L1_error) }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_w);
  __Pyx_GIVEREF(__pyx_v_w);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_w);
  __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_8) {
    __Pyx_INCREF(__pyx_kp_u_numeric);
    __pyx_t_1 = __pyx_kp_u_numeric;
  } else {
    __Pyx_INCREF(__pyx_v_w);
    __pyx_t_1 = __pyx_v_w;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gigaword2feature.chinese_word_vocab.sentence2indices.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":443
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 */

static PyObject *__pyx_pf_16gigaword2feature_18chinese_word_vocab_2sentence2indices(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_sentence) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *__pyx_cur_scope;
  PyObject *__pyx_v_w_unk = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("sentence2indices", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_7_sentence2indices(__pyx_ptype_16gigaword2feature___pyx_scope_struct_7_sentence2indices, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "gigaword2feature.pyx":444
 * 
 *     def sentence2indices( self, sentence ):
 *         w_unk = self.word2idx[u'<unk>']             # <<<<<<<<<<<<<<
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 *                    imap( lambda w: u'<numeric>' if re.match(self.number, w) else w, sentence ) ]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_word2idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_kp_u_unk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_w_unk = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":445
 *     def sentence2indices( self, sentence ):
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \             # <<<<<<<<<<<<<<
 *                    imap( lambda w: u'<numeric>' if re.match(self.number, w) else w, sentence ) ]
 *         return result
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "gigaword2feature.pyx":446
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 *                    imap( lambda w: u'<numeric>' if re.match(self.number, w) else w, sentence ) ]             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_imap); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_18chinese_word_vocab_16sentence2indices_lambda3, 0, __pyx_n_s_chinese_word_vocab_sentence2indi, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gigaword2feature, __pyx_d, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_4);
  __Pyx_INCREF(__pyx_v_sentence);
  __Pyx_GIVEREF(__pyx_v_sentence);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_sentence);
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 446, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 446, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 446, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 446, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":445
 *     def sentence2indices( self, sentence ):
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \             # <<<<<<<<<<<<<<
 *                    imap( lambda w: u'<numeric>' if re.match(self.number, w) else w, sentence ) ]
 *         return result
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_word2idx); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_9 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_w);
    __Pyx_GIVEREF(__pyx_v_w);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_9, __pyx_v_w);
    __Pyx_INCREF(__pyx_v_w_unk);
    __Pyx_GIVEREF(__pyx_v_w_unk);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_9, __pyx_v_w_unk);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":447
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 *                    imap( lambda w: u'<numeric>' if re.match(self.number, w) else w, sentence ) ]
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":443
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gigaword2feature.chinese_word_vocab.sentence2indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_w_unk);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":450
 * 
 * 
 *     def char_fofe_of_word( self ):             # <<<<<<<<<<<<<<
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_word'" )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_5char_fofe_of_word(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_18chinese_word_vocab_5char_fofe_of_word = {"char_fofe_of_word", (PyCFunction)__pyx_pw_16gigaword2feature_18chinese_word_vocab_5char_fofe_of_word, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_5char_fofe_of_word(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("char_fofe_of_word (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_18chinese_word_vocab_4char_fofe_of_word(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18chinese_word_vocab_4char_fofe_of_word(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("char_fofe_of_word", 0);

  /* "gigaword2feature.pyx":451
 * 
 *     def char_fofe_of_word( self ):
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_word'" )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 451, __pyx_L1_error)

  /* "gigaword2feature.pyx":450
 * 
 * 
 *     def char_fofe_of_word( self ):             # <<<<<<<<<<<<<<
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_word'" )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.chinese_word_vocab.char_fofe_of_word", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":454
 * 
 * 
 *     def char_fofe_of_phrase( self ):             # <<<<<<<<<<<<<<
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_phrase'" )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_7char_fofe_of_phrase(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_18chinese_word_vocab_7char_fofe_of_phrase = {"char_fofe_of_phrase", (PyCFunction)__pyx_pw_16gigaword2feature_18chinese_word_vocab_7char_fofe_of_phrase, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_18chinese_word_vocab_7char_fofe_of_phrase(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("char_fofe_of_phrase (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_18chinese_word_vocab_6char_fofe_of_phrase(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18chinese_word_vocab_6char_fofe_of_phrase(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("char_fofe_of_phrase", 0);

  /* "gigaword2feature.pyx":455
 * 
 *     def char_fofe_of_phrase( self ):
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_phrase'" )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 455, __pyx_L1_error)

  /* "gigaword2feature.pyx":454
 * 
 * 
 *     def char_fofe_of_phrase( self ):             # <<<<<<<<<<<<<<
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_phrase'" )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.chinese_word_vocab.char_fofe_of_phrase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":473
 *     cdef readonly vector[vector[float]] right_context_data
 * 
 *     def __init__( self, sentence, numericizer, a = 0.7, language = 'eng' ):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

/* Python wrapper */
static int __pyx_pw_16gigaword2feature_18processed_sentence_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_18processed_sentence___init__[] = "\n        Parameters\n        ----------\n            sentence : list of str\n            numericizer : vocabulary\n            a : float\n                word-level forgetting factor\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_16gigaword2feature_18processed_sentence___init__;
#endif
static int __pyx_pw_16gigaword2feature_18processed_sentence_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sentence = 0;
  PyObject *__pyx_v_numericizer = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_language = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sentence,&__pyx_n_s_numericizer,&__pyx_n_s_a,&__pyx_n_s_language,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_float_0_7);
    values[3] = ((PyObject *)__pyx_n_s_eng);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numericizer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 473, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_language);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 473, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sentence = values[0];
    __pyx_v_numericizer = values[1];
    __pyx_v_a = values[2];
    __pyx_v_language = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 473, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_18processed_sentence___init__(((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_v_self), __pyx_v_sentence, __pyx_v_numericizer, __pyx_v_a, __pyx_v_language);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_18processed_sentence_8__init___2generator12(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":487
 *         if language != 'cmn':
 *             for w in sentence:
 *                 self.sentence.push_back( u''.join( c if ord(c) < 128 else chr(ord(c) % 32) for c in list(w) ) )             # <<<<<<<<<<<<<<
 *             vocab = numericizer
 *             vocab.sentence2indices( self.sentence, self.numeric )
 */

static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_8__init___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_9_genexpr(__pyx_ptype_16gigaword2feature___pyx_scope_struct_9_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_18processed_sentence_8__init___2generator12, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init___locals_genexpr); if (unlikely(!gen)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.__init__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_18processed_sentence_8__init___2generator12(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  long __pyx_t_4;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_w)) { __Pyx_RaiseClosureNameError("w"); __PYX_ERR(0, 487, __pyx_L1_error) }
  __pyx_t_1 = PySequence_List(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 487, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_c);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_c, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_Ord(__pyx_cur_scope->__pyx_v_c); if (unlikely(__pyx_t_4 == (long)(Py_UCS4)-1)) __PYX_ERR(0, 487, __pyx_L1_error)
    if (((__pyx_t_4 < 0x80) != 0)) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_c);
      __pyx_t_1 = __pyx_cur_scope->__pyx_v_c;
    } else {
      __pyx_t_5 = __Pyx_PyObject_Ord(__pyx_cur_scope->__pyx_v_c); if (unlikely(__pyx_t_5 == (long)(Py_UCS4)-1)) __PYX_ERR(0, 487, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyInt_From_long(__Pyx_mod_long(__pyx_t_5, 32)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_1 = __pyx_t_6;
      __pyx_t_6 = 0;
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":473
 *     cdef readonly vector[vector[float]] right_context_data
 * 
 *     def __init__( self, sentence, numericizer, a = 0.7, language = 'eng' ):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

static int __pyx_pf_16gigaword2feature_18processed_sentence___init__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_numericizer, PyObject *__pyx_v_a, PyObject *__pyx_v_language) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *__pyx_cur_scope;
  struct __pyx_obj_16gigaword2feature_vocabulary *__pyx_v_vocab = 0;
  std::vector<int>  __pyx_v_idx_buffer;
  std::vector<float>  __pyx_v_data_buffer;
  std::map<int,float>  __pyx_v_left_context;
  std::map<int,float>  __pyx_v_right_context;
  std::map<int,float> ::iterator __pyx_v_map_itr;
  float __pyx_v_alpha;
  int __pyx_v_i;
  int __pyx_v_idx;
  int __pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  std::vector<int>  __pyx_t_9;
  float __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_8___init__(__pyx_ptype_16gigaword2feature___pyx_scope_struct_8___init__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_cur_scope);

  /* "gigaword2feature.pyx":485
 *         cdef vocabulary vocab
 * 
 *         if language != 'cmn':             # <<<<<<<<<<<<<<
 *             for w in sentence:
 *                 self.sentence.push_back( u''.join( c if ord(c) < 128 else chr(ord(c) % 32) for c in list(w) ) )
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_language, __pyx_n_s_cmn, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 485, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "gigaword2feature.pyx":486
 * 
 *         if language != 'cmn':
 *             for w in sentence:             # <<<<<<<<<<<<<<
 *                 self.sentence.push_back( u''.join( c if ord(c) < 128 else chr(ord(c) % 32) for c in list(w) ) )
 *             vocab = numericizer
 */
    if (likely(PyList_CheckExact(__pyx_v_sentence)) || PyTuple_CheckExact(__pyx_v_sentence)) {
      __pyx_t_2 = __pyx_v_sentence; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_sentence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 486, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_w);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_w, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;

      /* "gigaword2feature.pyx":487
 *         if language != 'cmn':
 *             for w in sentence:
 *                 self.sentence.push_back( u''.join( c if ord(c) < 128 else chr(ord(c) % 32) for c in list(w) ) )             # <<<<<<<<<<<<<<
 *             vocab = numericizer
 *             vocab.sentence2indices( self.sentence, self.numeric )
 */
      __pyx_t_5 = __pyx_pf_16gigaword2feature_18processed_sentence_8__init___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_Generator_Next(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyUnicode_Join(__pyx_kp_u__42, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      try {
        __pyx_v_self->sentence.push_back(__pyx_t_7);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 487, __pyx_L1_error)
      }

      /* "gigaword2feature.pyx":486
 * 
 *         if language != 'cmn':
 *             for w in sentence:             # <<<<<<<<<<<<<<
 *                 self.sentence.push_back( u''.join( c if ord(c) < 128 else chr(ord(c) % 32) for c in list(w) ) )
 *             vocab = numericizer
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "gigaword2feature.pyx":488
 *             for w in sentence:
 *                 self.sentence.push_back( u''.join( c if ord(c) < 128 else chr(ord(c) % 32) for c in list(w) ) )
 *             vocab = numericizer             # <<<<<<<<<<<<<<
 *             vocab.sentence2indices( self.sentence, self.numeric )
 *         else:
 */
    if (!(likely(((__pyx_v_numericizer) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_numericizer, __pyx_ptype_16gigaword2feature_vocabulary))))) __PYX_ERR(0, 488, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_numericizer;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_vocab = ((struct __pyx_obj_16gigaword2feature_vocabulary *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "gigaword2feature.pyx":489
 *                 self.sentence.push_back( u''.join( c if ord(c) < 128 else chr(ord(c) % 32) for c in list(w) ) )
 *             vocab = numericizer
 *             vocab.sentence2indices( self.sentence, self.numeric )             # <<<<<<<<<<<<<<
 *         else:
 *             self.numeric = numericizer.sentence2indices( sentence )
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->sentence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = ((struct __pyx_vtabstruct_16gigaword2feature_vocabulary *)__pyx_v_vocab->__pyx_vtab)->sentence2indices(__pyx_v_vocab, __pyx_t_2, __pyx_v_self->numeric); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gigaword2feature.pyx":485
 *         cdef vocabulary vocab
 * 
 *         if language != 'cmn':             # <<<<<<<<<<<<<<
 *             for w in sentence:
 *                 self.sentence.push_back( u''.join( c if ord(c) < 128 else chr(ord(c) % 32) for c in list(w) ) )
 */
    goto __pyx_L3;
  }

  /* "gigaword2feature.pyx":491
 *             vocab.sentence2indices( self.sentence, self.numeric )
 *         else:
 *             self.numeric = numericizer.sentence2indices( sentence )             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int] idx_buffer
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_numericizer, __pyx_n_s_sentence2indices); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_sentence); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_sentence);
      __Pyx_GIVEREF(__pyx_v_sentence);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_sentence);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_convert_vector_from_py_int(__pyx_t_5); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_self->numeric = __pyx_t_9;
  }
  __pyx_L3:;

  /* "gigaword2feature.pyx":498
 *         cdef ordered_map[int,float] right_context
 *         cdef ordered_map[int,float].iterator map_itr
 *         cdef float alpha = a             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef int idx
 */
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_a); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 498, __pyx_L1_error)
  __pyx_v_alpha = __pyx_t_10;

  /* "gigaword2feature.pyx":501
 *         cdef int i
 *         cdef int idx
 *         cdef int n = self.numeric.size()             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_v_n = __pyx_v_self->numeric.size();

  /* "gigaword2feature.pyx":503
 *         cdef int n = self.numeric.size()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in range( n ):
 *                 idx = self.numeric[i]
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "gigaword2feature.pyx":504
 * 
 *         with nogil:
 *             for i in range( n ):             # <<<<<<<<<<<<<<
 *                 idx = self.numeric[i]
 *                 if i == 0:
 */
        __pyx_t_11 = __pyx_v_n;
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
          __pyx_v_i = __pyx_t_12;

          /* "gigaword2feature.pyx":505
 *         with nogil:
 *             for i in range( n ):
 *                 idx = self.numeric[i]             # <<<<<<<<<<<<<<
 *                 if i == 0:
 *                     left_context[idx] = 1
 */
          __pyx_v_idx = (__pyx_v_self->numeric[__pyx_v_i]);

          /* "gigaword2feature.pyx":506
 *             for i in range( n ):
 *                 idx = self.numeric[i]
 *                 if i == 0:             # <<<<<<<<<<<<<<
 *                     left_context[idx] = 1
 *                 else:
 */
          __pyx_t_1 = ((__pyx_v_i == 0) != 0);
          if (__pyx_t_1) {

            /* "gigaword2feature.pyx":507
 *                 idx = self.numeric[i]
 *                 if i == 0:
 *                     left_context[idx] = 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     map_itr = left_context.begin()
 */
            (__pyx_v_left_context[__pyx_v_idx]) = 1.0;

            /* "gigaword2feature.pyx":506
 *             for i in range( n ):
 *                 idx = self.numeric[i]
 *                 if i == 0:             # <<<<<<<<<<<<<<
 *                     left_context[idx] = 1
 *                 else:
 */
            goto __pyx_L11;
          }

          /* "gigaword2feature.pyx":509
 *                     left_context[idx] = 1
 *                 else:
 *                     map_itr = left_context.begin()             # <<<<<<<<<<<<<<
 *                     while map_itr != left_context.end():
 *                         left_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 */
          /*else*/ {
            __pyx_v_map_itr = __pyx_v_left_context.begin();

            /* "gigaword2feature.pyx":510
 *                 else:
 *                     map_itr = left_context.begin()
 *                     while map_itr != left_context.end():             # <<<<<<<<<<<<<<
 *                         left_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 *                         preincrement(map_itr)
 */
            while (1) {
              __pyx_t_1 = ((__pyx_v_map_itr != __pyx_v_left_context.end()) != 0);
              if (!__pyx_t_1) break;

              /* "gigaword2feature.pyx":511
 *                     map_itr = left_context.begin()
 *                     while map_itr != left_context.end():
 *                         left_context[dereference(map_itr).first] = dereference(map_itr).second * alpha             # <<<<<<<<<<<<<<
 *                         preincrement(map_itr)
 *                     if left_context.find(idx) != left_context.end():
 */
              (__pyx_v_left_context[(*__pyx_v_map_itr).first]) = ((*__pyx_v_map_itr).second * __pyx_v_alpha);

              /* "gigaword2feature.pyx":512
 *                     while map_itr != left_context.end():
 *                         left_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 *                         preincrement(map_itr)             # <<<<<<<<<<<<<<
 *                     if left_context.find(idx) != left_context.end():
 *                         left_context[idx] += 1
 */
              (++__pyx_v_map_itr);
            }

            /* "gigaword2feature.pyx":513
 *                         left_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 *                         preincrement(map_itr)
 *                     if left_context.find(idx) != left_context.end():             # <<<<<<<<<<<<<<
 *                         left_context[idx] += 1
 *                     else:
 */
            __pyx_t_1 = ((__pyx_v_left_context.find(__pyx_v_idx) != __pyx_v_left_context.end()) != 0);
            if (__pyx_t_1) {

              /* "gigaword2feature.pyx":514
 *                         preincrement(map_itr)
 *                     if left_context.find(idx) != left_context.end():
 *                         left_context[idx] += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         left_context[idx] = 1
 */
              __pyx_t_13 = __pyx_v_idx;
              (__pyx_v_left_context[__pyx_t_13]) = ((__pyx_v_left_context[__pyx_t_13]) + 1.0);

              /* "gigaword2feature.pyx":513
 *                         left_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 *                         preincrement(map_itr)
 *                     if left_context.find(idx) != left_context.end():             # <<<<<<<<<<<<<<
 *                         left_context[idx] += 1
 *                     else:
 */
              goto __pyx_L14;
            }

            /* "gigaword2feature.pyx":516
 *                         left_context[idx] += 1
 *                     else:
 *                         left_context[idx] = 1             # <<<<<<<<<<<<<<
 * 
 *                 idx_buffer.clear()
 */
            /*else*/ {
              (__pyx_v_left_context[__pyx_v_idx]) = 1.0;
            }
            __pyx_L14:;
          }
          __pyx_L11:;

          /* "gigaword2feature.pyx":518
 *                         left_context[idx] = 1
 * 
 *                 idx_buffer.clear()             # <<<<<<<<<<<<<<
 *                 data_buffer.clear()
 *                 map_itr = left_context.begin()
 */
          __pyx_v_idx_buffer.clear();

          /* "gigaword2feature.pyx":519
 * 
 *                 idx_buffer.clear()
 *                 data_buffer.clear()             # <<<<<<<<<<<<<<
 *                 map_itr = left_context.begin()
 *                 while map_itr != left_context.end():
 */
          __pyx_v_data_buffer.clear();

          /* "gigaword2feature.pyx":520
 *                 idx_buffer.clear()
 *                 data_buffer.clear()
 *                 map_itr = left_context.begin()             # <<<<<<<<<<<<<<
 *                 while map_itr != left_context.end():
 *                     idx_buffer.push_back( dereference(map_itr).first )
 */
          __pyx_v_map_itr = __pyx_v_left_context.begin();

          /* "gigaword2feature.pyx":521
 *                 data_buffer.clear()
 *                 map_itr = left_context.begin()
 *                 while map_itr != left_context.end():             # <<<<<<<<<<<<<<
 *                     idx_buffer.push_back( dereference(map_itr).first )
 *                     data_buffer.push_back( dereference(map_itr).second )
 */
          while (1) {
            __pyx_t_1 = ((__pyx_v_map_itr != __pyx_v_left_context.end()) != 0);
            if (!__pyx_t_1) break;

            /* "gigaword2feature.pyx":522
 *                 map_itr = left_context.begin()
 *                 while map_itr != left_context.end():
 *                     idx_buffer.push_back( dereference(map_itr).first )             # <<<<<<<<<<<<<<
 *                     data_buffer.push_back( dereference(map_itr).second )
 *                     preincrement(map_itr)
 */
            try {
              __pyx_v_idx_buffer.push_back((*__pyx_v_map_itr).first);
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 522, __pyx_L7_error)
            }

            /* "gigaword2feature.pyx":523
 *                 while map_itr != left_context.end():
 *                     idx_buffer.push_back( dereference(map_itr).first )
 *                     data_buffer.push_back( dereference(map_itr).second )             # <<<<<<<<<<<<<<
 *                     preincrement(map_itr)
 *                 self.left_context_idx.push_back( idx_buffer )
 */
            try {
              __pyx_v_data_buffer.push_back((*__pyx_v_map_itr).second);
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 523, __pyx_L7_error)
            }

            /* "gigaword2feature.pyx":524
 *                     idx_buffer.push_back( dereference(map_itr).first )
 *                     data_buffer.push_back( dereference(map_itr).second )
 *                     preincrement(map_itr)             # <<<<<<<<<<<<<<
 *                 self.left_context_idx.push_back( idx_buffer )
 *                 self.left_context_data.push_back( data_buffer )
 */
            (++__pyx_v_map_itr);
          }

          /* "gigaword2feature.pyx":525
 *                     data_buffer.push_back( dereference(map_itr).second )
 *                     preincrement(map_itr)
 *                 self.left_context_idx.push_back( idx_buffer )             # <<<<<<<<<<<<<<
 *                 self.left_context_data.push_back( data_buffer )
 * 
 */
          try {
            __pyx_v_self->left_context_idx.push_back(__pyx_v_idx_buffer);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 525, __pyx_L7_error)
          }

          /* "gigaword2feature.pyx":526
 *                     preincrement(map_itr)
 *                 self.left_context_idx.push_back( idx_buffer )
 *                 self.left_context_data.push_back( data_buffer )             # <<<<<<<<<<<<<<
 * 
 *             for i in reversed( range( n ) ):
 */
          try {
            __pyx_v_self->left_context_data.push_back(__pyx_v_data_buffer);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 526, __pyx_L7_error)
          }
        }

        /* "gigaword2feature.pyx":528
 *                 self.left_context_data.push_back( data_buffer )
 * 
 *             for i in reversed( range( n ) ):             # <<<<<<<<<<<<<<
 *                 idx = self.numeric[i]
 *                 if i == n - 1:
 */
        for (__pyx_t_11 = __pyx_v_n-1; __pyx_t_11 >= 0; __pyx_t_11-=1) {
          __pyx_v_i = __pyx_t_11;

          /* "gigaword2feature.pyx":529
 * 
 *             for i in reversed( range( n ) ):
 *                 idx = self.numeric[i]             # <<<<<<<<<<<<<<
 *                 if i == n - 1:
 *                     right_context[idx] = 1
 */
          __pyx_v_idx = (__pyx_v_self->numeric[__pyx_v_i]);

          /* "gigaword2feature.pyx":530
 *             for i in reversed( range( n ) ):
 *                 idx = self.numeric[i]
 *                 if i == n - 1:             # <<<<<<<<<<<<<<
 *                     right_context[idx] = 1
 *                 else:
 */
          __pyx_t_1 = ((__pyx_v_i == (__pyx_v_n - 1)) != 0);
          if (__pyx_t_1) {

            /* "gigaword2feature.pyx":531
 *                 idx = self.numeric[i]
 *                 if i == n - 1:
 *                     right_context[idx] = 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     map_itr = right_context.begin()
 */
            (__pyx_v_right_context[__pyx_v_idx]) = 1.0;

            /* "gigaword2feature.pyx":530
 *             for i in reversed( range( n ) ):
 *                 idx = self.numeric[i]
 *                 if i == n - 1:             # <<<<<<<<<<<<<<
 *                     right_context[idx] = 1
 *                 else:
 */
            goto __pyx_L19;
          }

          /* "gigaword2feature.pyx":533
 *                     right_context[idx] = 1
 *                 else:
 *                     map_itr = right_context.begin()             # <<<<<<<<<<<<<<
 *                     while map_itr != right_context.end():
 *                         right_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 */
          /*else*/ {
            __pyx_v_map_itr = __pyx_v_right_context.begin();

            /* "gigaword2feature.pyx":534
 *                 else:
 *                     map_itr = right_context.begin()
 *                     while map_itr != right_context.end():             # <<<<<<<<<<<<<<
 *                         right_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 *                         preincrement(map_itr)
 */
            while (1) {
              __pyx_t_1 = ((__pyx_v_map_itr != __pyx_v_right_context.end()) != 0);
              if (!__pyx_t_1) break;

              /* "gigaword2feature.pyx":535
 *                     map_itr = right_context.begin()
 *                     while map_itr != right_context.end():
 *                         right_context[dereference(map_itr).first] = dereference(map_itr).second * alpha             # <<<<<<<<<<<<<<
 *                         preincrement(map_itr)
 *                     if right_context.find(idx) != right_context.end():
 */
              (__pyx_v_right_context[(*__pyx_v_map_itr).first]) = ((*__pyx_v_map_itr).second * __pyx_v_alpha);

              /* "gigaword2feature.pyx":536
 *                     while map_itr != right_context.end():
 *                         right_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 *                         preincrement(map_itr)             # <<<<<<<<<<<<<<
 *                     if right_context.find(idx) != right_context.end():
 *                         right_context[idx] += 1
 */
              (++__pyx_v_map_itr);
            }

            /* "gigaword2feature.pyx":537
 *                         right_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 *                         preincrement(map_itr)
 *                     if right_context.find(idx) != right_context.end():             # <<<<<<<<<<<<<<
 *                         right_context[idx] += 1
 *                     else:
 */
            __pyx_t_1 = ((__pyx_v_right_context.find(__pyx_v_idx) != __pyx_v_right_context.end()) != 0);
            if (__pyx_t_1) {

              /* "gigaword2feature.pyx":538
 *                         preincrement(map_itr)
 *                     if right_context.find(idx) != right_context.end():
 *                         right_context[idx] += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         right_context[idx] = 1
 */
              __pyx_t_12 = __pyx_v_idx;
              (__pyx_v_right_context[__pyx_t_12]) = ((__pyx_v_right_context[__pyx_t_12]) + 1.0);

              /* "gigaword2feature.pyx":537
 *                         right_context[dereference(map_itr).first] = dereference(map_itr).second * alpha
 *                         preincrement(map_itr)
 *                     if right_context.find(idx) != right_context.end():             # <<<<<<<<<<<<<<
 *                         right_context[idx] += 1
 *                     else:
 */
              goto __pyx_L22;
            }

            /* "gigaword2feature.pyx":540
 *                         right_context[idx] += 1
 *                     else:
 *                         right_context[idx] = 1             # <<<<<<<<<<<<<<
 * 
 *                 idx_buffer.clear()
 */
            /*else*/ {
              (__pyx_v_right_context[__pyx_v_idx]) = 1.0;
            }
            __pyx_L22:;
          }
          __pyx_L19:;

          /* "gigaword2feature.pyx":542
 *                         right_context[idx] = 1
 * 
 *                 idx_buffer.clear()             # <<<<<<<<<<<<<<
 *                 data_buffer.clear()
 *                 map_itr = right_context.begin()
 */
          __pyx_v_idx_buffer.clear();

          /* "gigaword2feature.pyx":543
 * 
 *                 idx_buffer.clear()
 *                 data_buffer.clear()             # <<<<<<<<<<<<<<
 *                 map_itr = right_context.begin()
 *                 while map_itr != right_context.end():
 */
          __pyx_v_data_buffer.clear();

          /* "gigaword2feature.pyx":544
 *                 idx_buffer.clear()
 *                 data_buffer.clear()
 *                 map_itr = right_context.begin()             # <<<<<<<<<<<<<<
 *                 while map_itr != right_context.end():
 *                     idx_buffer.push_back( dereference(map_itr).first )
 */
          __pyx_v_map_itr = __pyx_v_right_context.begin();

          /* "gigaword2feature.pyx":545
 *                 data_buffer.clear()
 *                 map_itr = right_context.begin()
 *                 while map_itr != right_context.end():             # <<<<<<<<<<<<<<
 *                     idx_buffer.push_back( dereference(map_itr).first )
 *                     data_buffer.push_back( dereference(map_itr).second )
 */
          while (1) {
            __pyx_t_1 = ((__pyx_v_map_itr != __pyx_v_right_context.end()) != 0);
            if (!__pyx_t_1) break;

            /* "gigaword2feature.pyx":546
 *                 map_itr = right_context.begin()
 *                 while map_itr != right_context.end():
 *                     idx_buffer.push_back( dereference(map_itr).first )             # <<<<<<<<<<<<<<
 *                     data_buffer.push_back( dereference(map_itr).second )
 *                     preincrement(map_itr)
 */
            try {
              __pyx_v_idx_buffer.push_back((*__pyx_v_map_itr).first);
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 546, __pyx_L7_error)
            }

            /* "gigaword2feature.pyx":547
 *                 while map_itr != right_context.end():
 *                     idx_buffer.push_back( dereference(map_itr).first )
 *                     data_buffer.push_back( dereference(map_itr).second )             # <<<<<<<<<<<<<<
 *                     preincrement(map_itr)
 *                 self.right_context_idx.push_back( idx_buffer )
 */
            try {
              __pyx_v_data_buffer.push_back((*__pyx_v_map_itr).second);
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 547, __pyx_L7_error)
            }

            /* "gigaword2feature.pyx":548
 *                     idx_buffer.push_back( dereference(map_itr).first )
 *                     data_buffer.push_back( dereference(map_itr).second )
 *                     preincrement(map_itr)             # <<<<<<<<<<<<<<
 *                 self.right_context_idx.push_back( idx_buffer )
 *                 self.right_context_data.push_back( data_buffer )
 */
            (++__pyx_v_map_itr);
          }

          /* "gigaword2feature.pyx":549
 *                     data_buffer.push_back( dereference(map_itr).second )
 *                     preincrement(map_itr)
 *                 self.right_context_idx.push_back( idx_buffer )             # <<<<<<<<<<<<<<
 *                 self.right_context_data.push_back( data_buffer )
 * 
 */
          try {
            __pyx_v_self->right_context_idx.push_back(__pyx_v_idx_buffer);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 549, __pyx_L7_error)
          }

          /* "gigaword2feature.pyx":550
 *                     preincrement(map_itr)
 *                 self.right_context_idx.push_back( idx_buffer )
 *                 self.right_context_data.push_back( data_buffer )             # <<<<<<<<<<<<<<
 * 
 *             reverse( self.right_context_idx.begin(), self.right_context_idx.end() )
 */
          try {
            __pyx_v_self->right_context_data.push_back(__pyx_v_data_buffer);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 550, __pyx_L7_error)
          }
        }

        /* "gigaword2feature.pyx":552
 *                 self.right_context_data.push_back( data_buffer )
 * 
 *             reverse( self.right_context_idx.begin(), self.right_context_idx.end() )             # <<<<<<<<<<<<<<
 *             reverse( self.right_context_data.begin(), self.right_context_data.end() )
 * 
 */
        std::reverse<std::vector<std::vector<int> > ::iterator>(__pyx_v_self->right_context_idx.begin(), __pyx_v_self->right_context_idx.end());

        /* "gigaword2feature.pyx":553
 * 
 *             reverse( self.right_context_idx.begin(), self.right_context_idx.end() )
 *             reverse( self.right_context_data.begin(), self.right_context_data.end() )             # <<<<<<<<<<<<<<
 * 
 *         # print self.left_context_idx
 */
        std::reverse<std::vector<std::vector<float> > ::iterator>(__pyx_v_self->right_context_data.begin(), __pyx_v_self->right_context_data.end());
      }

      /* "gigaword2feature.pyx":503
 *         cdef int n = self.numeric.size()
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in range( n ):
 *                 idx = self.numeric[i]
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "gigaword2feature.pyx":473
 *     cdef readonly vector[vector[float]] right_context_data
 * 
 *     def __init__( self, sentence, numericizer, a = 0.7, language = 'eng' ):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vocab);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":561
 * 
 * 
 *     cdef insert_left_fofe( self, int pos, int row_id,             # <<<<<<<<<<<<<<
 *                            vector[int]& indices, vector[float]& values ):
 *         """ help to construct mini-batch """
 */

static PyObject *__pyx_f_16gigaword2feature_18processed_sentence_insert_left_fofe(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, int __pyx_v_pos, int __pyx_v_row_id, std::vector<int>  &__pyx_v_indices, std::vector<float>  &__pyx_v_values) {
  int __pyx_v_n;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("insert_left_fofe", 0);

  /* "gigaword2feature.pyx":564
 *                            vector[int]& indices, vector[float]& values ):
 *         """ help to construct mini-batch """
 *         cdef int n = self.left_context_idx[pos].size()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             for j in range( n ):
 */
  __pyx_v_n = (__pyx_v_self->left_context_idx[__pyx_v_pos]).size();

  /* "gigaword2feature.pyx":565
 *         """ help to construct mini-batch """
 *         cdef int n = self.left_context_idx[pos].size()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for j in range( n ):
 *                 values.push_back( self.left_context_data[pos][j] )
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "gigaword2feature.pyx":566
 *         cdef int n = self.left_context_idx[pos].size()
 *         with nogil:
 *             for j in range( n ):             # <<<<<<<<<<<<<<
 *                 values.push_back( self.left_context_data[pos][j] )
 *                 indices.push_back( row_id )
 */
        __pyx_t_1 = __pyx_v_n;
        for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
          __pyx_v_j = __pyx_t_2;

          /* "gigaword2feature.pyx":567
 *         with nogil:
 *             for j in range( n ):
 *                 values.push_back( self.left_context_data[pos][j] )             # <<<<<<<<<<<<<<
 *                 indices.push_back( row_id )
 *                 indices.push_back( self.left_context_idx[pos][j] )
 */
          try {
            __pyx_v_values.push_back(((__pyx_v_self->left_context_data[__pyx_v_pos])[__pyx_v_j]));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 567, __pyx_L4_error)
          }

          /* "gigaword2feature.pyx":568
 *             for j in range( n ):
 *                 values.push_back( self.left_context_data[pos][j] )
 *                 indices.push_back( row_id )             # <<<<<<<<<<<<<<
 *                 indices.push_back( self.left_context_idx[pos][j] )
 * 
 */
          try {
            __pyx_v_indices.push_back(__pyx_v_row_id);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 568, __pyx_L4_error)
          }

          /* "gigaword2feature.pyx":569
 *                 values.push_back( self.left_context_data[pos][j] )
 *                 indices.push_back( row_id )
 *                 indices.push_back( self.left_context_idx[pos][j] )             # <<<<<<<<<<<<<<
 * 
 * 
 */
          try {
            __pyx_v_indices.push_back(((__pyx_v_self->left_context_idx[__pyx_v_pos])[__pyx_v_j]));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 569, __pyx_L4_error)
          }
        }
      }

      /* "gigaword2feature.pyx":565
 *         """ help to construct mini-batch """
 *         cdef int n = self.left_context_idx[pos].size()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for j in range( n ):
 *                 values.push_back( self.left_context_data[pos][j] )
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "gigaword2feature.pyx":561
 * 
 * 
 *     cdef insert_left_fofe( self, int pos, int row_id,             # <<<<<<<<<<<<<<
 *                            vector[int]& indices, vector[float]& values ):
 *         """ help to construct mini-batch """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.insert_left_fofe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":572
 * 
 * 
 *     cdef insert_right_fofe( self, int pos, int row_id,             # <<<<<<<<<<<<<<
 *                            vector[int]& indices, vector[float]& values ):
 *         """ help to construct mini-batch """
 */

static PyObject *__pyx_f_16gigaword2feature_18processed_sentence_insert_right_fofe(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, int __pyx_v_pos, int __pyx_v_row_id, std::vector<int>  &__pyx_v_indices, std::vector<float>  &__pyx_v_values) {
  int __pyx_v_i;
  int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("insert_right_fofe", 0);

  /* "gigaword2feature.pyx":576
 *         """ help to construct mini-batch """
 *         cdef int i
 *         cdef int n = self.right_context_idx[pos].size()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             for i in range( n ):
 */
  __pyx_v_n = (__pyx_v_self->right_context_idx[__pyx_v_pos]).size();

  /* "gigaword2feature.pyx":577
 *         cdef int i
 *         cdef int n = self.right_context_idx[pos].size()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in range( n ):
 *                 values.push_back( self.right_context_data[pos][i] )
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "gigaword2feature.pyx":578
 *         cdef int n = self.right_context_idx[pos].size()
 *         with nogil:
 *             for i in range( n ):             # <<<<<<<<<<<<<<
 *                 values.push_back( self.right_context_data[pos][i] )
 *                 indices.push_back( row_id )
 */
        __pyx_t_1 = __pyx_v_n;
        for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
          __pyx_v_i = __pyx_t_2;

          /* "gigaword2feature.pyx":579
 *         with nogil:
 *             for i in range( n ):
 *                 values.push_back( self.right_context_data[pos][i] )             # <<<<<<<<<<<<<<
 *                 indices.push_back( row_id )
 *                 indices.push_back( self.right_context_idx[pos][i] )
 */
          try {
            __pyx_v_values.push_back(((__pyx_v_self->right_context_data[__pyx_v_pos])[__pyx_v_i]));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 579, __pyx_L4_error)
          }

          /* "gigaword2feature.pyx":580
 *             for i in range( n ):
 *                 values.push_back( self.right_context_data[pos][i] )
 *                 indices.push_back( row_id )             # <<<<<<<<<<<<<<
 *                 indices.push_back( self.right_context_idx[pos][i] )
 * 
 */
          try {
            __pyx_v_indices.push_back(__pyx_v_row_id);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 580, __pyx_L4_error)
          }

          /* "gigaword2feature.pyx":581
 *                 values.push_back( self.right_context_data[pos][i] )
 *                 indices.push_back( row_id )
 *                 indices.push_back( self.right_context_idx[pos][i] )             # <<<<<<<<<<<<<<
 * 
 * 
 */
          try {
            __pyx_v_indices.push_back(((__pyx_v_self->right_context_idx[__pyx_v_pos])[__pyx_v_i]));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 581, __pyx_L4_error)
          }
        }
      }

      /* "gigaword2feature.pyx":577
 *         cdef int i
 *         cdef int n = self.right_context_idx[pos].size()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in range( n ):
 *                 values.push_back( self.right_context_data[pos][i] )
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "gigaword2feature.pyx":572
 * 
 * 
 *     cdef insert_right_fofe( self, int pos, int row_id,             # <<<<<<<<<<<<<<
 *                            vector[int]& indices, vector[float]& values ):
 *         """ help to construct mini-batch """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.insert_right_fofe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":584
 * 
 * 
 *     cdef insert_bow( self, int begin_idx, int end_idx,             # <<<<<<<<<<<<<<
 *                      int row_id, vector[int]& indices ):
 *         """ help to construct mini-batch """
 */

static PyObject *__pyx_f_16gigaword2feature_18processed_sentence_insert_bow(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, int __pyx_v_begin_idx, int __pyx_v_end_idx, int __pyx_v_row_id, std::vector<int>  &__pyx_v_indices) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("insert_bow", 0);

  /* "gigaword2feature.pyx":588
 *         """ help to construct mini-batch """
 *         cdef int i
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in range( begin_idx, end_idx ):
 *                 indices.push_back( row_id )
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {

        /* "gigaword2feature.pyx":589
 *         cdef int i
 *         with nogil:
 *             for i in range( begin_idx, end_idx ):             # <<<<<<<<<<<<<<
 *                 indices.push_back( row_id )
 *                 indices.push_back( self.numeric[i] )
 */
        __pyx_t_1 = __pyx_v_end_idx;
        for (__pyx_t_2 = __pyx_v_begin_idx; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
          __pyx_v_i = __pyx_t_2;

          /* "gigaword2feature.pyx":590
 *         with nogil:
 *             for i in range( begin_idx, end_idx ):
 *                 indices.push_back( row_id )             # <<<<<<<<<<<<<<
 *                 indices.push_back( self.numeric[i] )
 * 
 */
          try {
            __pyx_v_indices.push_back(__pyx_v_row_id);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 590, __pyx_L4_error)
          }

          /* "gigaword2feature.pyx":591
 *             for i in range( begin_idx, end_idx ):
 *                 indices.push_back( row_id )
 *                 indices.push_back( self.numeric[i] )             # <<<<<<<<<<<<<<
 * 
 * 
 */
          try {
            __pyx_v_indices.push_back((__pyx_v_self->numeric[__pyx_v_i]));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 591, __pyx_L4_error)
          }
        }
      }

      /* "gigaword2feature.pyx":588
 *         """ help to construct mini-batch """
 *         cdef int i
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in range( begin_idx, end_idx ):
 *                 indices.push_back( row_id )
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "gigaword2feature.pyx":584
 * 
 * 
 *     cdef insert_bow( self, int begin_idx, int end_idx,             # <<<<<<<<<<<<<<
 *                      int row_id, vector[int]& indices ):
 *         """ help to construct mini-batch """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.insert_bow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":466
 *     Any object of this class should not be instantiated outside this module.
 *     """
 *     cdef public vector[int] numeric             # <<<<<<<<<<<<<<
 *     cdef readonly vector[string] sentence
 *     cdef readonly vector[vector[int]] left_context_idx
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_7numeric_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_7numeric_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_18processed_sentence_7numeric___get__(((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_7numeric___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->numeric); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.numeric.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_16gigaword2feature_18processed_sentence_7numeric_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_16gigaword2feature_18processed_sentence_7numeric_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_18processed_sentence_7numeric_2__set__(((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_16gigaword2feature_18processed_sentence_7numeric_2__set__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L1_error)
  __pyx_v_self->numeric = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.numeric.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":467
 *     """
 *     cdef public vector[int] numeric
 *     cdef readonly vector[string] sentence             # <<<<<<<<<<<<<<
 *     cdef readonly vector[vector[int]] left_context_idx
 *     cdef readonly vector[vector[float]] left_context_data
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_8sentence_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_8sentence_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_18processed_sentence_8sentence___get__(((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_8sentence___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->sentence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.sentence.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":468
 *     cdef public vector[int] numeric
 *     cdef readonly vector[string] sentence
 *     cdef readonly vector[vector[int]] left_context_idx             # <<<<<<<<<<<<<<
 *     cdef readonly vector[vector[float]] left_context_data
 *     cdef readonly vector[vector[int]] right_context_idx
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_16left_context_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_16left_context_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_18processed_sentence_16left_context_idx___get__(((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_16left_context_idx___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_self->left_context_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.left_context_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":469
 *     cdef readonly vector[string] sentence
 *     cdef readonly vector[vector[int]] left_context_idx
 *     cdef readonly vector[vector[float]] left_context_data             # <<<<<<<<<<<<<<
 *     cdef readonly vector[vector[int]] right_context_idx
 *     cdef readonly vector[vector[float]] right_context_data
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_17left_context_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_17left_context_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_18processed_sentence_17left_context_data___get__(((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_17left_context_data___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___(__pyx_v_self->left_context_data); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.left_context_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":470
 *     cdef readonly vector[vector[int]] left_context_idx
 *     cdef readonly vector[vector[float]] left_context_data
 *     cdef readonly vector[vector[int]] right_context_idx             # <<<<<<<<<<<<<<
 *     cdef readonly vector[vector[float]] right_context_data
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_17right_context_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_17right_context_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_18processed_sentence_17right_context_idx___get__(((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_17right_context_idx___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_self->right_context_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.right_context_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":471
 *     cdef readonly vector[vector[float]] left_context_data
 *     cdef readonly vector[vector[int]] right_context_idx
 *     cdef readonly vector[vector[float]] right_context_data             # <<<<<<<<<<<<<<
 * 
 *     def __init__( self, sentence, numericizer, a = 0.7, language = 'eng' ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_18right_context_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_18processed_sentence_18right_context_data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_18processed_sentence_18right_context_data___get__(((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_18processed_sentence_18right_context_data___get__(struct __pyx_obj_16gigaword2feature_processed_sentence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___(__pyx_v_self->right_context_data); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.processed_sentence.right_context_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":605
 *     cdef readonly numpy.ndarray gazetteer
 * 
 *     def __init__( self, sentence_id, begin_idx, end_idx, label, gazetteer = None ):             # <<<<<<<<<<<<<<
 *         self.sentence_id = sentence_id
 *         self.begin_idx = begin_idx
 */

/* Python wrapper */
static int __pyx_pw_16gigaword2feature_7example_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_16gigaword2feature_7example_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sentence_id = 0;
  PyObject *__pyx_v_begin_idx = 0;
  PyObject *__pyx_v_end_idx = 0;
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_v_gazetteer = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sentence_id,&__pyx_n_s_begin_idx,&__pyx_n_s_end_idx,&__pyx_n_s_label,&__pyx_n_s_gazetteer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_begin_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 1); __PYX_ERR(0, 605, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 2); __PYX_ERR(0, 605, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 3); __PYX_ERR(0, 605, __pyx_L3_error)
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gazetteer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 605, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sentence_id = values[0];
    __pyx_v_begin_idx = values[1];
    __pyx_v_end_idx = values[2];
    __pyx_v_label = values[3];
    __pyx_v_gazetteer = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 605, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.example.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_7example___init__(((struct __pyx_obj_16gigaword2feature_example *)__pyx_v_self), __pyx_v_sentence_id, __pyx_v_begin_idx, __pyx_v_end_idx, __pyx_v_label, __pyx_v_gazetteer);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_16gigaword2feature_7example___init__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self, PyObject *__pyx_v_sentence_id, PyObject *__pyx_v_begin_idx, PyObject *__pyx_v_end_idx, PyObject *__pyx_v_label, PyObject *__pyx_v_gazetteer) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gigaword2feature.pyx":606
 * 
 *     def __init__( self, sentence_id, begin_idx, end_idx, label, gazetteer = None ):
 *         self.sentence_id = sentence_id             # <<<<<<<<<<<<<<
 *         self.begin_idx = begin_idx
 *         self.end_idx = end_idx
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_sentence_id); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L1_error)
  __pyx_v_self->sentence_id = __pyx_t_1;

  /* "gigaword2feature.pyx":607
 *     def __init__( self, sentence_id, begin_idx, end_idx, label, gazetteer = None ):
 *         self.sentence_id = sentence_id
 *         self.begin_idx = begin_idx             # <<<<<<<<<<<<<<
 *         self.end_idx = end_idx
 *         self.label = label
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_begin_idx); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 607, __pyx_L1_error)
  __pyx_v_self->begin_idx = __pyx_t_1;

  /* "gigaword2feature.pyx":608
 *         self.sentence_id = sentence_id
 *         self.begin_idx = begin_idx
 *         self.end_idx = end_idx             # <<<<<<<<<<<<<<
 *         self.label = label
 *         self.gazetteer = gazetteer
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_end_idx); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_v_self->end_idx = __pyx_t_1;

  /* "gigaword2feature.pyx":609
 *         self.begin_idx = begin_idx
 *         self.end_idx = end_idx
 *         self.label = label             # <<<<<<<<<<<<<<
 *         self.gazetteer = gazetteer
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_label); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 609, __pyx_L1_error)
  __pyx_v_self->label = __pyx_t_1;

  /* "gigaword2feature.pyx":610
 *         self.end_idx = end_idx
 *         self.label = label
 *         self.gazetteer = gazetteer             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (!(likely(((__pyx_v_gazetteer) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_gazetteer, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 610, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_gazetteer;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->gazetteer);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->gazetteer));
  __pyx_v_self->gazetteer = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":605
 *     cdef readonly numpy.ndarray gazetteer
 * 
 *     def __init__( self, sentence_id, begin_idx, end_idx, label, gazetteer = None ):             # <<<<<<<<<<<<<<
 *         self.sentence_id = sentence_id
 *         self.begin_idx = begin_idx
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gigaword2feature.example.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":599
 * 
 * cdef class example:
 *     cdef readonly int sentence_id             # <<<<<<<<<<<<<<
 *     cdef readonly int begin_idx
 *     cdef readonly int end_idx
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_7example_11sentence_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_7example_11sentence_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_7example_11sentence_id___get__(((struct __pyx_obj_16gigaword2feature_example *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_7example_11sentence_id___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->sentence_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.example.sentence_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":600
 * cdef class example:
 *     cdef readonly int sentence_id
 *     cdef readonly int begin_idx             # <<<<<<<<<<<<<<
 *     cdef readonly int end_idx
 *     cdef readonly int label
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_7example_9begin_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_7example_9begin_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_7example_9begin_idx___get__(((struct __pyx_obj_16gigaword2feature_example *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_7example_9begin_idx___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->begin_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.example.begin_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":601
 *     cdef readonly int sentence_id
 *     cdef readonly int begin_idx
 *     cdef readonly int end_idx             # <<<<<<<<<<<<<<
 *     cdef readonly int label
 *     cdef readonly numpy.ndarray gazetteer
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_7example_7end_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_7example_7end_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_7example_7end_idx___get__(((struct __pyx_obj_16gigaword2feature_example *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_7example_7end_idx___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->end_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.example.end_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":602
 *     cdef readonly int begin_idx
 *     cdef readonly int end_idx
 *     cdef readonly int label             # <<<<<<<<<<<<<<
 *     cdef readonly numpy.ndarray gazetteer
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_7example_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_7example_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_7example_5label___get__(((struct __pyx_obj_16gigaword2feature_example *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_7example_5label___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.example.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":603
 *     cdef readonly int end_idx
 *     cdef readonly int label
 *     cdef readonly numpy.ndarray gazetteer             # <<<<<<<<<<<<<<
 * 
 *     def __init__( self, sentence_id, begin_idx, end_idx, label, gazetteer = None ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_7example_9gazetteer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_16gigaword2feature_7example_9gazetteer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_7example_9gazetteer___get__(((struct __pyx_obj_16gigaword2feature_example *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_7example_9gazetteer___get__(struct __pyx_obj_16gigaword2feature_example *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->gazetteer));
  __pyx_r = ((PyObject *)__pyx_v_self->gazetteer);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":617
 * 
 * 
 * cdef void bigram_char_fofe( string phrase,             # <<<<<<<<<<<<<<
 *                             vector[float]& values, vector[int]& indices,
 *                             float alpha, int row_id = 0 ) nogil:
 */

static void __pyx_f_16gigaword2feature_bigram_char_fofe(std::string __pyx_v_phrase, std::vector<float>  &__pyx_v_values, std::vector<int>  &__pyx_v_indices, CYTHON_UNUSED float __pyx_v_alpha, struct __pyx_opt_args_16gigaword2feature_bigram_char_fofe *__pyx_optional_args) {
  int __pyx_v_row_id = ((int)0);
  int __pyx_v_i;
  int __pyx_v_c;
  float __pyx_v_coef;
  std::vector<int>  __pyx_v_char_array;
  std::map<int,float>  __pyx_v_fofe;
  std::map<int,float> ::iterator __pyx_v_map_itr;
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_row_id = __pyx_optional_args->row_id;
    }
  }

  /* "gigaword2feature.pyx":623
 *     # anything out of this range is considered OOV
 *     cdef int i, c
 *     cdef float coef = 1             # <<<<<<<<<<<<<<
 *     cdef vector[int] char_array
 *     cdef ordered_map[int,float] fofe
 */
  __pyx_v_coef = 1.0;

  /* "gigaword2feature.pyx":628
 *     cdef ordered_map[int,float].iterator map_itr
 * 
 *     for i in range( phrase.size() ):             # <<<<<<<<<<<<<<
 *         c = <int>phrase[i];
 *         if 32 <= c < 127:
 */
  __pyx_t_1 = __pyx_v_phrase.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "gigaword2feature.pyx":629
 * 
 *     for i in range( phrase.size() ):
 *         c = <int>phrase[i];             # <<<<<<<<<<<<<<
 *         if 32 <= c < 127:
 *             char_array.push_back( c - 32 )
 */
    __pyx_v_c = ((int)(__pyx_v_phrase[__pyx_v_i]));

    /* "gigaword2feature.pyx":630
 *     for i in range( phrase.size() ):
 *         c = <int>phrase[i];
 *         if 32 <= c < 127:             # <<<<<<<<<<<<<<
 *             char_array.push_back( c - 32 )
 *         else:
 */
    __pyx_t_3 = (32 <= __pyx_v_c);
    if (__pyx_t_3) {
      __pyx_t_3 = (__pyx_v_c < 0x7F);
    }
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {

      /* "gigaword2feature.pyx":631
 *         c = <int>phrase[i];
 *         if 32 <= c < 127:
 *             char_array.push_back( c - 32 )             # <<<<<<<<<<<<<<
 *         else:
 *             char_array.push_back( 95 )
 */
      try {
        __pyx_v_char_array.push_back((__pyx_v_c - 32));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 631, __pyx_L1_error)
      }

      /* "gigaword2feature.pyx":630
 *     for i in range( phrase.size() ):
 *         c = <int>phrase[i];
 *         if 32 <= c < 127:             # <<<<<<<<<<<<<<
 *             char_array.push_back( c - 32 )
 *         else:
 */
      goto __pyx_L5;
    }

    /* "gigaword2feature.pyx":633
 *             char_array.push_back( c - 32 )
 *         else:
 *             char_array.push_back( 95 )             # <<<<<<<<<<<<<<
 * 
 *     for i in reversed( range( char_array.size() - 1 ) ):
 */
    /*else*/ {
      try {
        __pyx_v_char_array.push_back(95);
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 633, __pyx_L1_error)
      }
    }
    __pyx_L5:;
  }

  /* "gigaword2feature.pyx":635
 *             char_array.push_back( 95 )
 * 
 *     for i in reversed( range( char_array.size() - 1 ) ):             # <<<<<<<<<<<<<<
 *         c = char_array[i] * 96 + char_array[i + 1]
 *         if fofe.find( c ) != fofe.end():
 */
  for (__pyx_t_2 = (__pyx_v_char_array.size() - 1)-1; __pyx_t_2 >= 0; __pyx_t_2-=1) {
    __pyx_v_i = __pyx_t_2;

    /* "gigaword2feature.pyx":636
 * 
 *     for i in reversed( range( char_array.size() - 1 ) ):
 *         c = char_array[i] * 96 + char_array[i + 1]             # <<<<<<<<<<<<<<
 *         if fofe.find( c ) != fofe.end():
 *             fofe[c] += coef
 */
    __pyx_v_c = (((__pyx_v_char_array[__pyx_v_i]) * 96) + (__pyx_v_char_array[(__pyx_v_i + 1)]));

    /* "gigaword2feature.pyx":637
 *     for i in reversed( range( char_array.size() - 1 ) ):
 *         c = char_array[i] * 96 + char_array[i + 1]
 *         if fofe.find( c ) != fofe.end():             # <<<<<<<<<<<<<<
 *             fofe[c] += coef
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_fofe.find(__pyx_v_c) != __pyx_v_fofe.end()) != 0);
    if (__pyx_t_4) {

      /* "gigaword2feature.pyx":638
 *         c = char_array[i] * 96 + char_array[i + 1]
 *         if fofe.find( c ) != fofe.end():
 *             fofe[c] += coef             # <<<<<<<<<<<<<<
 *         else:
 *             fofe[c] = coef
 */
      __pyx_t_5 = __pyx_v_c;
      (__pyx_v_fofe[__pyx_t_5]) = ((__pyx_v_fofe[__pyx_t_5]) + __pyx_v_coef);

      /* "gigaword2feature.pyx":637
 *     for i in reversed( range( char_array.size() - 1 ) ):
 *         c = char_array[i] * 96 + char_array[i + 1]
 *         if fofe.find( c ) != fofe.end():             # <<<<<<<<<<<<<<
 *             fofe[c] += coef
 *         else:
 */
      goto __pyx_L8;
    }

    /* "gigaword2feature.pyx":640
 *             fofe[c] += coef
 *         else:
 *             fofe[c] = coef             # <<<<<<<<<<<<<<
 * 
 *     map_itr = fofe.begin()
 */
    /*else*/ {
      (__pyx_v_fofe[__pyx_v_c]) = __pyx_v_coef;
    }
    __pyx_L8:;
  }

  /* "gigaword2feature.pyx":642
 *             fofe[c] = coef
 * 
 *     map_itr = fofe.begin()             # <<<<<<<<<<<<<<
 *     while map_itr != fofe.end():
 *         indices.push_back( row_id )
 */
  __pyx_v_map_itr = __pyx_v_fofe.begin();

  /* "gigaword2feature.pyx":643
 * 
 *     map_itr = fofe.begin()
 *     while map_itr != fofe.end():             # <<<<<<<<<<<<<<
 *         indices.push_back( row_id )
 *         indices.push_back( dereference(map_itr).first )
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_map_itr != __pyx_v_fofe.end()) != 0);
    if (!__pyx_t_4) break;

    /* "gigaword2feature.pyx":644
 *     map_itr = fofe.begin()
 *     while map_itr != fofe.end():
 *         indices.push_back( row_id )             # <<<<<<<<<<<<<<
 *         indices.push_back( dereference(map_itr).first )
 *         values.push_back( dereference(map_itr).second )
 */
    try {
      __pyx_v_indices.push_back(__pyx_v_row_id);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 644, __pyx_L1_error)
    }

    /* "gigaword2feature.pyx":645
 *     while map_itr != fofe.end():
 *         indices.push_back( row_id )
 *         indices.push_back( dereference(map_itr).first )             # <<<<<<<<<<<<<<
 *         values.push_back( dereference(map_itr).second )
 *         preincrement( map_itr )
 */
    try {
      __pyx_v_indices.push_back((*__pyx_v_map_itr).first);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 645, __pyx_L1_error)
    }

    /* "gigaword2feature.pyx":646
 *         indices.push_back( row_id )
 *         indices.push_back( dereference(map_itr).first )
 *         values.push_back( dereference(map_itr).second )             # <<<<<<<<<<<<<<
 *         preincrement( map_itr )
 * 
 */
    try {
      __pyx_v_values.push_back((*__pyx_v_map_itr).second);
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 646, __pyx_L1_error)
    }

    /* "gigaword2feature.pyx":647
 *         indices.push_back( dereference(map_itr).first )
 *         values.push_back( dereference(map_itr).second )
 *         preincrement( map_itr )             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (++__pyx_v_map_itr);
  }

  /* "gigaword2feature.pyx":617
 * 
 * 
 * cdef void bigram_char_fofe( string phrase,             # <<<<<<<<<<<<<<
 *                             vector[float]& values, vector[int]& indices,
 *                             float alpha, int row_id = 0 ) nogil:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("gigaword2feature.bigram_char_fofe", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "gigaword2feature.pyx":655
 * 
 * class batch_constructor:
 *     def __init__( self, parser,             # <<<<<<<<<<<<<<
 *                   numericizer1, numericizer2,
 *                   gazetteer = None, window = 7, alpha = 0.7,
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_17batch_constructor___init__[] = "\n        Parameters\n        ----------\n            parser : iterable\n                Likes of KBP2015, CoNLL2003, where each element is a tuple of size 4\n\n            numericizer1 : vocabulary\n                case-insensitive vocabulary\n\n            numericizer2 : vocabulary\n                case-sensitive vocabulary\n\n            gazetteer : list of set\n                Likes of gazetteer, gazetteer[i] contains the known NER of the ith mention type\n\n            window : int\n                the maximum length of a mention\n                \n            n_label_type : int\n                number of mention types excluding O. For example, CoNLL2003 has 4 mention types,\n                namely, PER, ORG, LOC and MISC.\n        ";
static PyMethodDef __pyx_mdef_16gigaword2feature_17batch_constructor_1__init__ = {"__init__", (PyCFunction)__pyx_pw_16gigaword2feature_17batch_constructor_1__init__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_17batch_constructor___init__};
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_parser = 0;
  PyObject *__pyx_v_numericizer1 = 0;
  PyObject *__pyx_v_numericizer2 = 0;
  PyObject *__pyx_v_gazetteer = 0;
  PyObject *__pyx_v_window = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_n_label_type = 0;
  PyObject *__pyx_v_language = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_parser,&__pyx_n_s_numericizer1,&__pyx_n_s_numericizer2,&__pyx_n_s_gazetteer,&__pyx_n_s_window,&__pyx_n_s_alpha,&__pyx_n_s_n_label_type,&__pyx_n_s_language,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "gigaword2feature.pyx":657
 *     def __init__( self, parser,
 *                   numericizer1, numericizer2,
 *                   gazetteer = None, window = 7, alpha = 0.7,             # <<<<<<<<<<<<<<
 *                   n_label_type = 4, language = 'eng' ):
 *         """
 */
    values[4] = ((PyObject *)((PyObject *)Py_None));
    values[5] = ((PyObject *)((PyObject *)__pyx_int_7));
    values[6] = ((PyObject *)((PyObject*)__pyx_float_0_7));
    values[7] = ((PyObject *)((PyObject *)__pyx_int_4));
    values[8] = ((PyObject *)((PyObject*)__pyx_n_s_eng));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parser)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 9, 1); __PYX_ERR(0, 655, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numericizer1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 9, 2); __PYX_ERR(0, 655, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_numericizer2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 9, 3); __PYX_ERR(0, 655, __pyx_L3_error)
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gazetteer);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_window);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_label_type);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_language);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 655, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_parser = values[1];
    __pyx_v_numericizer1 = values[2];
    __pyx_v_numericizer2 = values[3];
    __pyx_v_gazetteer = values[4];
    __pyx_v_window = values[5];
    __pyx_v_alpha = values[6];
    __pyx_v_n_label_type = values[7];
    __pyx_v_language = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 655, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_17batch_constructor___init__(__pyx_self, __pyx_v_self, __pyx_v_parser, __pyx_v_numericizer1, __pyx_v_numericizer2, __pyx_v_gazetteer, __pyx_v_window, __pyx_v_alpha, __pyx_v_n_label_type, __pyx_v_language);

  /* "gigaword2feature.pyx":655
 * 
 * class batch_constructor:
 *     def __init__( self, parser,             # <<<<<<<<<<<<<<
 *                   numericizer1, numericizer2,
 *                   gazetteer = None, window = 7, alpha = 0.7,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_17batch_constructor_8__init___2generator13(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":744
 *                             name = u' '.join(sentence[i:j])
 *                         else:
 *                             name = u''.join( w[:w.find(u'|iNCML|')] for w in sentence[i:j] )             # <<<<<<<<<<<<<<
 *                         for k, g in enumerate(self.gazetteer):
 *                             if name in g:
 */

static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_8__init___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_11_genexpr(__pyx_ptype_16gigaword2feature___pyx_scope_struct_11_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_17batch_constructor_8__init___2generator13, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_batch_constructor___init___local); if (unlikely(!gen)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.__init__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_17batch_constructor_8__init___2generator13(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 744, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_sentence)) { __Pyx_RaiseClosureNameError("sentence"); __PYX_ERR(0, 744, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_i, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_j, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 744, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 744, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 744, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 744, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_w);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_w, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_w, __pyx_n_s_find); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_w, 0, 0, NULL, &__pyx_t_5, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":655
 * 
 * class batch_constructor:
 *     def __init__( self, parser,             # <<<<<<<<<<<<<<
 *                   numericizer1, numericizer2,
 *                   gazetteer = None, window = 7, alpha = 0.7,
 */

static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_parser, PyObject *__pyx_v_numericizer1, PyObject *__pyx_v_numericizer2, PyObject *__pyx_v_gazetteer, PyObject *__pyx_v_window, PyObject *__pyx_v_alpha, PyObject *__pyx_v_n_label_type, PyObject *__pyx_v_language) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *__pyx_cur_scope;
  int __pyx_v_k;
  int __pyx_v_unsure;
  PyObject *__pyx_v_ner_begin = NULL;
  PyObject *__pyx_v_ner_end = NULL;
  PyObject *__pyx_v_ner_label = NULL;
  int __pyx_v_found;
  PyObject *__pyx_v_label = NULL;
  PyObject *__pyx_v_gazetteer_match = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_char_sequence = NULL;
  PyObject *__pyx_v_word_sequence = NULL;
  PyObject *__pyx_v_token = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_t_20;
  PyObject *(*__pyx_t_21)(PyObject *);
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_10___init__(__pyx_ptype_16gigaword2feature___pyx_scope_struct_10___init__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);

  /* "gigaword2feature.pyx":681
 *                 namely, PER, ORG, LOC and MISC.
 *         """
 *         assert language in { 'eng', 'cmn', 'spa' }             # <<<<<<<<<<<<<<
 *         self.language = language
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __Pyx_INCREF(__pyx_v_language);
    __pyx_t_1 = __pyx_v_language;
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_eng, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 681, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_cmn, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 681, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_spa, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 681, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 681, __pyx_L1_error)
    }
  }
  #endif

  /* "gigaword2feature.pyx":682
 *         """
 *         assert language in { 'eng', 'cmn', 'spa' }
 *         self.language = language             # <<<<<<<<<<<<<<
 * 
 *         # case-insensitive sentence set if language in { 'eng', 'spa' }
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_language, __pyx_v_language) < 0) __PYX_ERR(0, 682, __pyx_L1_error)

  /* "gigaword2feature.pyx":686
 *         # case-insensitive sentence set if language in { 'eng', 'spa' }
 *         # sequence at char level
 *         self.sentence1 = []             # <<<<<<<<<<<<<<
 * 
 *         # case-sensitive sentence set if language in { 'eng', 'spa' }
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_sentence1, __pyx_t_1) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":690
 *         # case-sensitive sentence set if language in { 'eng', 'spa' }
 *         # sequence at word level
 *         self.sentence2 = []             # <<<<<<<<<<<<<<
 * 
 *         self.example = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_sentence2, __pyx_t_1) < 0) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":692
 *         self.sentence2 = []
 * 
 *         self.example = []             # <<<<<<<<<<<<<<
 *         self.positive = []
 *         self.overlap = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_example, __pyx_t_1) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":693
 * 
 *         self.example = []
 *         self.positive = []             # <<<<<<<<<<<<<<
 *         self.overlap = []
 *         self.disjoint = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_positive, __pyx_t_1) < 0) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":694
 *         self.example = []
 *         self.positive = []
 *         self.overlap = []             # <<<<<<<<<<<<<<
 *         self.disjoint = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_overlap, __pyx_t_1) < 0) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":695
 *         self.positive = []
 *         self.overlap = []
 *         self.disjoint = []             # <<<<<<<<<<<<<<
 * 
 *         # luckily that 'batch_constructor' is not strongly-typed
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_disjoint, __pyx_t_1) < 0) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":699
 *         # luckily that 'batch_constructor' is not strongly-typed
 *         # it is OK that these two data members hold garbage value when parsing Chinese
 *         self.numericizer1 = numericizer1    # case-insensitive / char-level             # <<<<<<<<<<<<<<
 *         self.numericizer2 = numericizer2    # case-sensitive / word-level
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_numericizer1, __pyx_v_numericizer1) < 0) __PYX_ERR(0, 699, __pyx_L1_error)

  /* "gigaword2feature.pyx":700
 *         # it is OK that these two data members hold garbage value when parsing Chinese
 *         self.numericizer1 = numericizer1    # case-insensitive / char-level
 *         self.numericizer2 = numericizer2    # case-sensitive / word-level             # <<<<<<<<<<<<<<
 * 
 *         self.gazetteer = gazetteer
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_numericizer2, __pyx_v_numericizer2) < 0) __PYX_ERR(0, 700, __pyx_L1_error)

  /* "gigaword2feature.pyx":702
 *         self.numericizer2 = numericizer2    # case-sensitive / word-level
 * 
 *         self.gazetteer = gazetteer             # <<<<<<<<<<<<<<
 *         self.n_label_type = n_label_type
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_gazetteer, __pyx_v_gazetteer) < 0) __PYX_ERR(0, 702, __pyx_L1_error)

  /* "gigaword2feature.pyx":703
 * 
 *         self.gazetteer = gazetteer
 *         self.n_label_type = n_label_type             # <<<<<<<<<<<<<<
 * 
 *         cdef int i, j, k
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_n_label_type, __pyx_v_n_label_type) < 0) __PYX_ERR(0, 703, __pyx_L1_error)

  /* "gigaword2feature.pyx":708
 *         cdef bint unsure
 * 
 *         for sentence, ner_begin, ner_end, ner_label in parser:             # <<<<<<<<<<<<<<
 *             for i in range( len(sentence) ):
 *                 for j in range( i + 1, len(sentence) + 1 ):
 */
  if (likely(PyList_CheckExact(__pyx_v_parser)) || PyTuple_CheckExact(__pyx_v_parser)) {
    __pyx_t_1 = __pyx_v_parser; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_parser); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 708, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 708, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 708, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 708, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 708, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_1);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 708, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
      PyObject* sequence = __pyx_t_6;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 708, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 708, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
      __pyx_t_11 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 708, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 4) < 0) __PYX_ERR(0, 708, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 708, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_sentence);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_sentence, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ner_begin, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ner_end, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ner_label, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "gigaword2feature.pyx":709
 * 
 *         for sentence, ner_begin, ner_end, ner_label in parser:
 *             for i in range( len(sentence) ):             # <<<<<<<<<<<<<<
 *                 for j in range( i + 1, len(sentence) + 1 ):
 *                     unsure, found = False, False
 */
    __pyx_t_6 = __pyx_cur_scope->__pyx_v_sentence;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_13 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 709, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_cur_scope->__pyx_v_i = __pyx_t_14;

      /* "gigaword2feature.pyx":710
 *         for sentence, ner_begin, ner_end, ner_label in parser:
 *             for i in range( len(sentence) ):
 *                 for j in range( i + 1, len(sentence) + 1 ):             # <<<<<<<<<<<<<<
 *                     unsure, found = False, False
 *                     if j - i > window:
 */
      __pyx_t_6 = __pyx_cur_scope->__pyx_v_sentence;
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_15 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 710, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_16 = (__pyx_t_15 + 1);
      for (__pyx_t_17 = (__pyx_cur_scope->__pyx_v_i + 1); __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
        __pyx_cur_scope->__pyx_v_j = __pyx_t_17;

        /* "gigaword2feature.pyx":711
 *             for i in range( len(sentence) ):
 *                 for j in range( i + 1, len(sentence) + 1 ):
 *                     unsure, found = False, False             # <<<<<<<<<<<<<<
 *                     if j - i > window:
 *                         break
 */
        __pyx_t_2 = 0;
        __pyx_t_3 = 0;
        __pyx_v_unsure = __pyx_t_2;
        __pyx_v_found = __pyx_t_3;

        /* "gigaword2feature.pyx":712
 *                 for j in range( i + 1, len(sentence) + 1 ):
 *                     unsure, found = False, False
 *                     if j - i > window:             # <<<<<<<<<<<<<<
 *                         break
 *                     label = n_label_type
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_j - __pyx_cur_scope->__pyx_v_i)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 712, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = PyObject_RichCompare(__pyx_t_6, __pyx_v_window, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 712, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 712, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_3) {

          /* "gigaword2feature.pyx":713
 *                     unsure, found = False, False
 *                     if j - i > window:
 *                         break             # <<<<<<<<<<<<<<
 *                     label = n_label_type
 *                     # look for exact match
 */
          goto __pyx_L13_break;

          /* "gigaword2feature.pyx":712
 *                 for j in range( i + 1, len(sentence) + 1 ):
 *                     unsure, found = False, False
 *                     if j - i > window:             # <<<<<<<<<<<<<<
 *                         break
 *                     label = n_label_type
 */
        }

        /* "gigaword2feature.pyx":714
 *                     if j - i > window:
 *                         break
 *                     label = n_label_type             # <<<<<<<<<<<<<<
 *                     # look for exact match
 *                     for k in range(len(ner_label)):
 */
        __Pyx_INCREF(__pyx_v_n_label_type);
        __Pyx_XDECREF_SET(__pyx_v_label, __pyx_v_n_label_type);

        /* "gigaword2feature.pyx":716
 *                     label = n_label_type
 *                     # look for exact match
 *                     for k in range(len(ner_label)):             # <<<<<<<<<<<<<<
 *                         if i == ner_begin[k] and j == ner_end[k]:
 *                             label = ner_label[k]
 */
        __pyx_t_15 = PyObject_Length(__pyx_v_ner_label); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 716, __pyx_L1_error)
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_15; __pyx_t_18+=1) {
          __pyx_v_k = __pyx_t_18;

          /* "gigaword2feature.pyx":717
 *                     # look for exact match
 *                     for k in range(len(ner_label)):
 *                         if i == ner_begin[k] and j == ner_end[k]:             # <<<<<<<<<<<<<<
 *                             label = ner_label[k]
 *                             if label < n_label_type:
 */
          __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 717, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_ner_begin, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 717, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = PyObject_RichCompare(__pyx_t_10, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 717, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 717, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_2) {
          } else {
            __pyx_t_3 = __pyx_t_2;
            goto __pyx_L18_bool_binop_done;
          }
          __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_j); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 717, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_ner_end, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 717, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_10 = PyObject_RichCompare(__pyx_t_9, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 717, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 717, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_3 = __pyx_t_2;
          __pyx_L18_bool_binop_done:;
          if (__pyx_t_3) {

            /* "gigaword2feature.pyx":718
 *                     for k in range(len(ner_label)):
 *                         if i == ner_begin[k] and j == ner_end[k]:
 *                             label = ner_label[k]             # <<<<<<<<<<<<<<
 *                             if label < n_label_type:
 *                                 self.positive.append( len(self.example) )
 */
            __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_ner_label, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 718, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF_SET(__pyx_v_label, __pyx_t_10);
            __pyx_t_10 = 0;

            /* "gigaword2feature.pyx":719
 *                         if i == ner_begin[k] and j == ner_end[k]:
 *                             label = ner_label[k]
 *                             if label < n_label_type:             # <<<<<<<<<<<<<<
 *                                 self.positive.append( len(self.example) )
 *                             else:
 */
            __pyx_t_10 = PyObject_RichCompare(__pyx_v_label, __pyx_v_n_label_type, Py_LT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 719, __pyx_L1_error)
            __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 719, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (__pyx_t_3) {

              /* "gigaword2feature.pyx":720
 *                             label = ner_label[k]
 *                             if label < n_label_type:
 *                                 self.positive.append( len(self.example) )             # <<<<<<<<<<<<<<
 *                             else:
 *                                 unsure = True
 */
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_positive); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 720, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_example); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 720, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_19 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_19 == -1)) __PYX_ERR(0, 720, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_19); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 720, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_10, __pyx_t_6); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 720, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "gigaword2feature.pyx":719
 *                         if i == ner_begin[k] and j == ner_end[k]:
 *                             label = ner_label[k]
 *                             if label < n_label_type:             # <<<<<<<<<<<<<<
 *                                 self.positive.append( len(self.example) )
 *                             else:
 */
              goto __pyx_L20;
            }

            /* "gigaword2feature.pyx":722
 *                                 self.positive.append( len(self.example) )
 *                             else:
 *                                 unsure = True             # <<<<<<<<<<<<<<
 *                             found = True
 *                             break
 */
            /*else*/ {
              __pyx_v_unsure = 1;
            }
            __pyx_L20:;

            /* "gigaword2feature.pyx":723
 *                             else:
 *                                 unsure = True
 *                             found = True             # <<<<<<<<<<<<<<
 *                             break
 *                     # look for overlap
 */
            __pyx_v_found = 1;

            /* "gigaword2feature.pyx":724
 *                                 unsure = True
 *                             found = True
 *                             break             # <<<<<<<<<<<<<<
 *                     # look for overlap
 *                     if not found:
 */
            goto __pyx_L16_break;

            /* "gigaword2feature.pyx":717
 *                     # look for exact match
 *                     for k in range(len(ner_label)):
 *                         if i == ner_begin[k] and j == ner_end[k]:             # <<<<<<<<<<<<<<
 *                             label = ner_label[k]
 *                             if label < n_label_type:
 */
          }
        }
        __pyx_L16_break:;

        /* "gigaword2feature.pyx":726
 *                             break
 *                     # look for overlap
 *                     if not found:             # <<<<<<<<<<<<<<
 *                         for k in range(len(ner_label)):
 *                             if i < ner_end[k] and ner_begin[k] < j:
 */
        __pyx_t_3 = ((!(__pyx_v_found != 0)) != 0);
        if (__pyx_t_3) {

          /* "gigaword2feature.pyx":727
 *                     # look for overlap
 *                     if not found:
 *                         for k in range(len(ner_label)):             # <<<<<<<<<<<<<<
 *                             if i < ner_end[k] and ner_begin[k] < j:
 *                                 label = n_label_type + 1
 */
          __pyx_t_15 = PyObject_Length(__pyx_v_ner_label); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 727, __pyx_L1_error)
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_15; __pyx_t_18+=1) {
            __pyx_v_k = __pyx_t_18;

            /* "gigaword2feature.pyx":728
 *                     if not found:
 *                         for k in range(len(ner_label)):
 *                             if i < ner_end[k] and ner_begin[k] < j:             # <<<<<<<<<<<<<<
 *                                 label = n_label_type + 1
 *                                 self.overlap.append( len(self.example) )
 */
            __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 728, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_ner_end, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 728, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_9 = PyObject_RichCompare(__pyx_t_6, __pyx_t_10, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 728, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 728, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (__pyx_t_2) {
            } else {
              __pyx_t_3 = __pyx_t_2;
              goto __pyx_L25_bool_binop_done;
            }
            __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_ner_begin, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 728, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_j); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 728, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_6 = PyObject_RichCompare(__pyx_t_9, __pyx_t_10, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 728, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 728, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_3 = __pyx_t_2;
            __pyx_L25_bool_binop_done:;
            if (__pyx_t_3) {

              /* "gigaword2feature.pyx":729
 *                         for k in range(len(ner_label)):
 *                             if i < ner_end[k] and ner_begin[k] < j:
 *                                 label = n_label_type + 1             # <<<<<<<<<<<<<<
 *                                 self.overlap.append( len(self.example) )
 *                                 break
 */
              __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_n_label_type, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 729, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF_SET(__pyx_v_label, __pyx_t_6);
              __pyx_t_6 = 0;

              /* "gigaword2feature.pyx":730
 *                             if i < ner_end[k] and ner_begin[k] < j:
 *                                 label = n_label_type + 1
 *                                 self.overlap.append( len(self.example) )             # <<<<<<<<<<<<<<
 *                                 break
 *                     if unsure:
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_overlap); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 730, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_example); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 730, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_19 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_19 == -1)) __PYX_ERR(0, 730, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_t_10 = PyInt_FromSsize_t(__pyx_t_19); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 730, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_10); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 730, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

              /* "gigaword2feature.pyx":731
 *                                 label = n_label_type + 1
 *                                 self.overlap.append( len(self.example) )
 *                                 break             # <<<<<<<<<<<<<<
 *                     if unsure:
 *                         continue
 */
              goto __pyx_L23_break;

              /* "gigaword2feature.pyx":728
 *                     if not found:
 *                         for k in range(len(ner_label)):
 *                             if i < ner_end[k] and ner_begin[k] < j:             # <<<<<<<<<<<<<<
 *                                 label = n_label_type + 1
 *                                 self.overlap.append( len(self.example) )
 */
            }
          }
          __pyx_L23_break:;

          /* "gigaword2feature.pyx":726
 *                             break
 *                     # look for overlap
 *                     if not found:             # <<<<<<<<<<<<<<
 *                         for k in range(len(ner_label)):
 *                             if i < ner_end[k] and ner_begin[k] < j:
 */
        }

        /* "gigaword2feature.pyx":732
 *                                 self.overlap.append( len(self.example) )
 *                                 break
 *                     if unsure:             # <<<<<<<<<<<<<<
 *                         continue
 *                     if label == n_label_type:
 */
        __pyx_t_3 = (__pyx_v_unsure != 0);
        if (__pyx_t_3) {

          /* "gigaword2feature.pyx":733
 *                                 break
 *                     if unsure:
 *                         continue             # <<<<<<<<<<<<<<
 *                     if label == n_label_type:
 *                         self.disjoint.append( len(self.example) )
 */
          goto __pyx_L12_continue;

          /* "gigaword2feature.pyx":732
 *                                 self.overlap.append( len(self.example) )
 *                                 break
 *                     if unsure:             # <<<<<<<<<<<<<<
 *                         continue
 *                     if label == n_label_type:
 */
        }

        /* "gigaword2feature.pyx":734
 *                     if unsure:
 *                         continue
 *                     if label == n_label_type:             # <<<<<<<<<<<<<<
 *                         self.disjoint.append( len(self.example) )
 *                     if label == n_label_type + 1:
 */
        __pyx_t_10 = PyObject_RichCompare(__pyx_v_label, __pyx_v_n_label_type, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 734, __pyx_L1_error)
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 734, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_3) {

          /* "gigaword2feature.pyx":735
 *                         continue
 *                     if label == n_label_type:
 *                         self.disjoint.append( len(self.example) )             # <<<<<<<<<<<<<<
 *                     if label == n_label_type + 1:
 *                         label = n_label_type
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_disjoint); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_example); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_15 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_10, __pyx_t_6); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "gigaword2feature.pyx":734
 *                     if unsure:
 *                         continue
 *                     if label == n_label_type:             # <<<<<<<<<<<<<<
 *                         self.disjoint.append( len(self.example) )
 *                     if label == n_label_type + 1:
 */
        }

        /* "gigaword2feature.pyx":736
 *                     if label == n_label_type:
 *                         self.disjoint.append( len(self.example) )
 *                     if label == n_label_type + 1:             # <<<<<<<<<<<<<<
 *                         label = n_label_type
 * 
 */
        __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_n_label_type, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = PyObject_RichCompare(__pyx_v_label, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 736, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 736, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_3) {

          /* "gigaword2feature.pyx":737
 *                         self.disjoint.append( len(self.example) )
 *                     if label == n_label_type + 1:
 *                         label = n_label_type             # <<<<<<<<<<<<<<
 * 
 *                     gazetteer_match = numpy.zeros( (n_label_type + 1,), dtype = numpy.float32 )
 */
          __Pyx_INCREF(__pyx_v_n_label_type);
          __Pyx_DECREF_SET(__pyx_v_label, __pyx_v_n_label_type);

          /* "gigaword2feature.pyx":736
 *                     if label == n_label_type:
 *                         self.disjoint.append( len(self.example) )
 *                     if label == n_label_type + 1:             # <<<<<<<<<<<<<<
 *                         label = n_label_type
 * 
 */
        }

        /* "gigaword2feature.pyx":739
 *                         label = n_label_type
 * 
 *                     gazetteer_match = numpy.zeros( (n_label_type + 1,), dtype = numpy.float32 )             # <<<<<<<<<<<<<<
 *                     if self.gazetteer is not None:
 *                         if language != 'cmn':
 */
        __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_v_n_label_type, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_gazetteer_match, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "gigaword2feature.pyx":740
 * 
 *                     gazetteer_match = numpy.zeros( (n_label_type + 1,), dtype = numpy.float32 )
 *                     if self.gazetteer is not None:             # <<<<<<<<<<<<<<
 *                         if language != 'cmn':
 *                             name = u' '.join(sentence[i:j])
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_gazetteer); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 740, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = (__pyx_t_7 != Py_None);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {

          /* "gigaword2feature.pyx":741
 *                     gazetteer_match = numpy.zeros( (n_label_type + 1,), dtype = numpy.float32 )
 *                     if self.gazetteer is not None:
 *                         if language != 'cmn':             # <<<<<<<<<<<<<<
 *                             name = u' '.join(sentence[i:j])
 *                         else:
 */
          __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_language, __pyx_n_s_cmn, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 741, __pyx_L1_error)
          if (__pyx_t_2) {

            /* "gigaword2feature.pyx":742
 *                     if self.gazetteer is not None:
 *                         if language != 'cmn':
 *                             name = u' '.join(sentence[i:j])             # <<<<<<<<<<<<<<
 *                         else:
 *                             name = u''.join( w[:w.find(u'|iNCML|')] for w in sentence[i:j] )
 */
            __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_i, __pyx_cur_scope->__pyx_v_j, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 742, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_9 = PyUnicode_Join(__pyx_kp_u__44, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 742, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_XDECREF_SET(__pyx_v_name, ((PyObject*)__pyx_t_9));
            __pyx_t_9 = 0;

            /* "gigaword2feature.pyx":741
 *                     gazetteer_match = numpy.zeros( (n_label_type + 1,), dtype = numpy.float32 )
 *                     if self.gazetteer is not None:
 *                         if language != 'cmn':             # <<<<<<<<<<<<<<
 *                             name = u' '.join(sentence[i:j])
 *                         else:
 */
            goto __pyx_L31;
          }

          /* "gigaword2feature.pyx":744
 *                             name = u' '.join(sentence[i:j])
 *                         else:
 *                             name = u''.join( w[:w.find(u'|iNCML|')] for w in sentence[i:j] )             # <<<<<<<<<<<<<<
 *                         for k, g in enumerate(self.gazetteer):
 *                             if name in g:
 */
          /*else*/ {
            __pyx_t_9 = __pyx_pf_16gigaword2feature_17batch_constructor_8__init___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 744, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_7 = __Pyx_Generator_Next(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 744, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = PyUnicode_Join(__pyx_kp_u__42, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 744, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_XDECREF_SET(__pyx_v_name, ((PyObject*)__pyx_t_9));
            __pyx_t_9 = 0;
          }
          __pyx_L31:;

          /* "gigaword2feature.pyx":745
 *                         else:
 *                             name = u''.join( w[:w.find(u'|iNCML|')] for w in sentence[i:j] )
 *                         for k, g in enumerate(self.gazetteer):             # <<<<<<<<<<<<<<
 *                             if name in g:
 *                                 gazetteer_match[k] = 1
 */
          __pyx_t_18 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_gazetteer); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 745, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
            __pyx_t_7 = __pyx_t_9; __Pyx_INCREF(__pyx_t_7); __pyx_t_15 = 0;
            __pyx_t_21 = NULL;
          } else {
            __pyx_t_15 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 745, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_21 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 745, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          for (;;) {
            if (likely(!__pyx_t_21)) {
              if (likely(PyList_CheckExact(__pyx_t_7))) {
                if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_7)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_9 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_15); __Pyx_INCREF(__pyx_t_9); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
                #else
                __pyx_t_9 = PySequence_ITEM(__pyx_t_7, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 745, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_9);
                #endif
              } else {
                if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_15); __Pyx_INCREF(__pyx_t_9); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 745, __pyx_L1_error)
                #else
                __pyx_t_9 = PySequence_ITEM(__pyx_t_7, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 745, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_9);
                #endif
              }
            } else {
              __pyx_t_9 = __pyx_t_21(__pyx_t_7);
              if (unlikely(!__pyx_t_9)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 745, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_9);
            }
            __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_9);
            __pyx_t_9 = 0;
            __pyx_v_k = __pyx_t_18;
            __pyx_t_18 = (__pyx_t_18 + 1);

            /* "gigaword2feature.pyx":746
 *                             name = u''.join( w[:w.find(u'|iNCML|')] for w in sentence[i:j] )
 *                         for k, g in enumerate(self.gazetteer):
 *                             if name in g:             # <<<<<<<<<<<<<<
 *                                 gazetteer_match[k] = 1
 * 
 */
            __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_name, __pyx_v_g, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 746, __pyx_L1_error)
            __pyx_t_3 = (__pyx_t_2 != 0);
            if (__pyx_t_3) {

              /* "gigaword2feature.pyx":747
 *                         for k, g in enumerate(self.gazetteer):
 *                             if name in g:
 *                                 gazetteer_match[k] = 1             # <<<<<<<<<<<<<<
 * 
 *                     self.example.append( example( len(self.sentence1),
 */
              if (unlikely(__Pyx_SetItemInt(__pyx_v_gazetteer_match, __pyx_v_k, __pyx_int_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 747, __pyx_L1_error)

              /* "gigaword2feature.pyx":746
 *                             name = u''.join( w[:w.find(u'|iNCML|')] for w in sentence[i:j] )
 *                         for k, g in enumerate(self.gazetteer):
 *                             if name in g:             # <<<<<<<<<<<<<<
 *                                 gazetteer_match[k] = 1
 * 
 */
            }

            /* "gigaword2feature.pyx":745
 *                         else:
 *                             name = u''.join( w[:w.find(u'|iNCML|')] for w in sentence[i:j] )
 *                         for k, g in enumerate(self.gazetteer):             # <<<<<<<<<<<<<<
 *                             if name in g:
 *                                 gazetteer_match[k] = 1
 */
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "gigaword2feature.pyx":740
 * 
 *                     gazetteer_match = numpy.zeros( (n_label_type + 1,), dtype = numpy.float32 )
 *                     if self.gazetteer is not None:             # <<<<<<<<<<<<<<
 *                         if language != 'cmn':
 *                             name = u' '.join(sentence[i:j])
 */
        }

        /* "gigaword2feature.pyx":749
 *                                 gazetteer_match[k] = 1
 * 
 *                     self.example.append( example( len(self.sentence1),             # <<<<<<<<<<<<<<
 *                                                   i, j, label ,gazetteer_match) )
 * 
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_example); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sentence1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = PyObject_Length(__pyx_t_9); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);

        /* "gigaword2feature.pyx":750
 * 
 *                     self.example.append( example( len(self.sentence1),
 *                                                   i, j, label ,gazetteer_match) )             # <<<<<<<<<<<<<<
 * 
 *             if language != 'cmn':
 */
        __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_j); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 750, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "gigaword2feature.pyx":749
 *                                 gazetteer_match[k] = 1
 * 
 *                     self.example.append( example( len(self.sentence1),             # <<<<<<<<<<<<<<
 *                                                   i, j, label ,gazetteer_match) )
 * 
 */
        __pyx_t_8 = PyTuple_New(5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_label);
        __Pyx_GIVEREF(__pyx_v_label);
        PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_label);
        __Pyx_INCREF(__pyx_v_gazetteer_match);
        __Pyx_GIVEREF(__pyx_v_gazetteer_match);
        PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_v_gazetteer_match);
        __pyx_t_9 = 0;
        __pyx_t_10 = 0;
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_16gigaword2feature_example), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_7, __pyx_t_6); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 749, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_L12_continue:;
      }
      __pyx_L13_break:;
    }

    /* "gigaword2feature.pyx":752
 *                                                   i, j, label ,gazetteer_match) )
 * 
 *             if language != 'cmn':             # <<<<<<<<<<<<<<
 *                 self.sentence1.append( processed_sentence( sentence, numericizer1,
 *                                                            alpha, language ) )
 */
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_language, __pyx_n_s_cmn, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 752, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "gigaword2feature.pyx":753
 * 
 *             if language != 'cmn':
 *                 self.sentence1.append( processed_sentence( sentence, numericizer1,             # <<<<<<<<<<<<<<
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( sentence, numericizer2,
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sentence1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "gigaword2feature.pyx":754
 *             if language != 'cmn':
 *                 self.sentence1.append( processed_sentence( sentence, numericizer1,
 *                                                            alpha, language ) )             # <<<<<<<<<<<<<<
 *                 self.sentence2.append( processed_sentence( sentence, numericizer2,
 *                                                            alpha, language ) )
 */
      __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentence);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_cur_scope->__pyx_v_sentence);
      __Pyx_INCREF(__pyx_v_numericizer1);
      __Pyx_GIVEREF(__pyx_v_numericizer1);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_numericizer1);
      __Pyx_INCREF(__pyx_v_alpha);
      __Pyx_GIVEREF(__pyx_v_alpha);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_alpha);
      __Pyx_INCREF(__pyx_v_language);
      __Pyx_GIVEREF(__pyx_v_language);
      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_v_language);

      /* "gigaword2feature.pyx":753
 * 
 *             if language != 'cmn':
 *                 self.sentence1.append( processed_sentence( sentence, numericizer1,             # <<<<<<<<<<<<<<
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( sentence, numericizer2,
 */
      __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_16gigaword2feature_processed_sentence), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_6, __pyx_t_8); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "gigaword2feature.pyx":755
 *                 self.sentence1.append( processed_sentence( sentence, numericizer1,
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( sentence, numericizer2,             # <<<<<<<<<<<<<<
 *                                                            alpha, language ) )
 *             else:
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sentence2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "gigaword2feature.pyx":756
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( sentence, numericizer2,
 *                                                            alpha, language ) )             # <<<<<<<<<<<<<<
 *             else:
 *                 char_sequence, word_sequence = [], []
 */
      __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentence);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_sentence);
      __Pyx_INCREF(__pyx_v_numericizer2);
      __Pyx_GIVEREF(__pyx_v_numericizer2);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_numericizer2);
      __Pyx_INCREF(__pyx_v_alpha);
      __Pyx_GIVEREF(__pyx_v_alpha);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_alpha);
      __Pyx_INCREF(__pyx_v_language);
      __Pyx_GIVEREF(__pyx_v_language);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_language);

      /* "gigaword2feature.pyx":755
 *                 self.sentence1.append( processed_sentence( sentence, numericizer1,
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( sentence, numericizer2,             # <<<<<<<<<<<<<<
 *                                                            alpha, language ) )
 *             else:
 */
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_16gigaword2feature_processed_sentence), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_8, __pyx_t_7); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 755, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "gigaword2feature.pyx":752
 *                                                   i, j, label ,gazetteer_match) )
 * 
 *             if language != 'cmn':             # <<<<<<<<<<<<<<
 *                 self.sentence1.append( processed_sentence( sentence, numericizer1,
 *                                                            alpha, language ) )
 */
      goto __pyx_L35;
    }

    /* "gigaword2feature.pyx":758
 *                                                            alpha, language ) )
 *             else:
 *                 char_sequence, word_sequence = [], []             # <<<<<<<<<<<<<<
 *                 for token in sentence:
 *                     c, w = token.split( u'|iNCML|' )
 */
    /*else*/ {
      __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_char_sequence, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_word_sequence, ((PyObject*)__pyx_t_8));
      __pyx_t_8 = 0;

      /* "gigaword2feature.pyx":759
 *             else:
 *                 char_sequence, word_sequence = [], []
 *                 for token in sentence:             # <<<<<<<<<<<<<<
 *                     c, w = token.split( u'|iNCML|' )
 *                     char_sequence.append( c )
 */
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_sentence)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_sentence)) {
        __pyx_t_8 = __pyx_cur_scope->__pyx_v_sentence; __Pyx_INCREF(__pyx_t_8); __pyx_t_13 = 0;
        __pyx_t_21 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 759, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_21 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 759, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_21)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_7); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 759, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_7); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 759, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_21(__pyx_t_8);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 759, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_token, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "gigaword2feature.pyx":760
 *                 char_sequence, word_sequence = [], []
 *                 for token in sentence:
 *                     c, w = token.split( u'|iNCML|' )             # <<<<<<<<<<<<<<
 *                     char_sequence.append( c )
 *                     word_sequence.append( w )
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_token, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 760, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 760, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
          PyObject* sequence = __pyx_t_6;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 760, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_10);
          #else
          __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 760, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 760, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 760, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_12 = Py_TYPE(__pyx_t_9)->tp_iternext;
          index = 0; __pyx_t_7 = __pyx_t_12(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L38_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_9); if (unlikely(!__pyx_t_10)) goto __pyx_L38_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_10);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_9), 2) < 0) __PYX_ERR(0, 760, __pyx_L1_error)
          __pyx_t_12 = NULL;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L39_unpacking_done;
          __pyx_L38_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_12 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 760, __pyx_L1_error)
          __pyx_L39_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "gigaword2feature.pyx":761
 *                 for token in sentence:
 *                     c, w = token.split( u'|iNCML|' )
 *                     char_sequence.append( c )             # <<<<<<<<<<<<<<
 *                     word_sequence.append( w )
 *                 self.sentence1.append( processed_sentence( char_sequence, numericizer1,
 */
        __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_char_sequence, __pyx_v_c); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 761, __pyx_L1_error)

        /* "gigaword2feature.pyx":762
 *                     c, w = token.split( u'|iNCML|' )
 *                     char_sequence.append( c )
 *                     word_sequence.append( w )             # <<<<<<<<<<<<<<
 *                 self.sentence1.append( processed_sentence( char_sequence, numericizer1,
 *                                                            alpha, language ) )
 */
        __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_word_sequence, __pyx_v_w); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 762, __pyx_L1_error)

        /* "gigaword2feature.pyx":759
 *             else:
 *                 char_sequence, word_sequence = [], []
 *                 for token in sentence:             # <<<<<<<<<<<<<<
 *                     c, w = token.split( u'|iNCML|' )
 *                     char_sequence.append( c )
 */
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "gigaword2feature.pyx":763
 *                     char_sequence.append( c )
 *                     word_sequence.append( w )
 *                 self.sentence1.append( processed_sentence( char_sequence, numericizer1,             # <<<<<<<<<<<<<<
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( word_sequence, numericizer2,
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sentence1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "gigaword2feature.pyx":764
 *                     word_sequence.append( w )
 *                 self.sentence1.append( processed_sentence( char_sequence, numericizer1,
 *                                                            alpha, language ) )             # <<<<<<<<<<<<<<
 *                 self.sentence2.append( processed_sentence( word_sequence, numericizer2,
 *                                                            alpha, language ) )
 */
      __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_char_sequence);
      __Pyx_GIVEREF(__pyx_v_char_sequence);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_char_sequence);
      __Pyx_INCREF(__pyx_v_numericizer1);
      __Pyx_GIVEREF(__pyx_v_numericizer1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_numericizer1);
      __Pyx_INCREF(__pyx_v_alpha);
      __Pyx_GIVEREF(__pyx_v_alpha);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_alpha);
      __Pyx_INCREF(__pyx_v_language);
      __Pyx_GIVEREF(__pyx_v_language);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_language);

      /* "gigaword2feature.pyx":763
 *                     char_sequence.append( c )
 *                     word_sequence.append( w )
 *                 self.sentence1.append( processed_sentence( char_sequence, numericizer1,             # <<<<<<<<<<<<<<
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( word_sequence, numericizer2,
 */
      __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_16gigaword2feature_processed_sentence), __pyx_t_6, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_8, __pyx_t_10); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 763, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "gigaword2feature.pyx":765
 *                 self.sentence1.append( processed_sentence( char_sequence, numericizer1,
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( word_sequence, numericizer2,             # <<<<<<<<<<<<<<
 *                                                            alpha, language ) )
 * 
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sentence2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);

      /* "gigaword2feature.pyx":766
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( word_sequence, numericizer2,
 *                                                            alpha, language ) )             # <<<<<<<<<<<<<<
 * 
 *         self.positive = numpy.asarray( self.positive, dtype = numpy.int32 )
 */
      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_word_sequence);
      __Pyx_GIVEREF(__pyx_v_word_sequence);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_word_sequence);
      __Pyx_INCREF(__pyx_v_numericizer2);
      __Pyx_GIVEREF(__pyx_v_numericizer2);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_numericizer2);
      __Pyx_INCREF(__pyx_v_alpha);
      __Pyx_GIVEREF(__pyx_v_alpha);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_v_alpha);
      __Pyx_INCREF(__pyx_v_language);
      __Pyx_GIVEREF(__pyx_v_language);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_v_language);

      /* "gigaword2feature.pyx":765
 *                 self.sentence1.append( processed_sentence( char_sequence, numericizer1,
 *                                                            alpha, language ) )
 *                 self.sentence2.append( processed_sentence( word_sequence, numericizer2,             # <<<<<<<<<<<<<<
 *                                                            alpha, language ) )
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_16gigaword2feature_processed_sentence), __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_20 = __Pyx_PyObject_Append(__pyx_t_10, __pyx_t_6); if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L35:;

    /* "gigaword2feature.pyx":708
 *         cdef bint unsure
 * 
 *         for sentence, ner_begin, ner_end, ner_label in parser:             # <<<<<<<<<<<<<<
 *             for i in range( len(sentence) ):
 *                 for j in range( i + 1, len(sentence) + 1 ):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":768
 *                                                            alpha, language ) )
 * 
 *         self.positive = numpy.asarray( self.positive, dtype = numpy.int32 )             # <<<<<<<<<<<<<<
 *         self.overlap = numpy.asarray( self.overlap, dtype = numpy.int32 )
 *         self.disjoint = numpy.asarray( self.disjoint, dtype = numpy.int32 )
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_positive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_positive, __pyx_t_7) < 0) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "gigaword2feature.pyx":769
 * 
 *         self.positive = numpy.asarray( self.positive, dtype = numpy.int32 )
 *         self.overlap = numpy.asarray( self.overlap, dtype = numpy.int32 )             # <<<<<<<<<<<<<<
 *         self.disjoint = numpy.asarray( self.disjoint, dtype = numpy.int32 )
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_overlap); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_overlap, __pyx_t_8) < 0) __PYX_ERR(0, 769, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "gigaword2feature.pyx":770
 *         self.positive = numpy.asarray( self.positive, dtype = numpy.int32 )
 *         self.overlap = numpy.asarray( self.overlap, dtype = numpy.int32 )
 *         self.disjoint = numpy.asarray( self.disjoint, dtype = numpy.int32 )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_asarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_disjoint); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_disjoint, __pyx_t_6) < 0) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "gigaword2feature.pyx":655
 * 
 * class batch_constructor:
 *     def __init__( self, parser,             # <<<<<<<<<<<<<<
 *                   numericizer1, numericizer2,
 *                   gazetteer = None, window = 7, alpha = 0.7,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ner_begin);
  __Pyx_XDECREF(__pyx_v_ner_end);
  __Pyx_XDECREF(__pyx_v_ner_label);
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XDECREF(__pyx_v_gazetteer_match);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_char_sequence);
  __Pyx_XDECREF(__pyx_v_word_sequence);
  __Pyx_XDECREF(__pyx_v_token);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":773
 * 
 * 
 *     def __str__( self ):             # <<<<<<<<<<<<<<
 *         """
 *         Returns
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_16gigaword2feature_17batch_constructor_2__str__[] = "\n        Returns\n        -------\n            Return a string description of this object.\n        ";
static PyMethodDef __pyx_mdef_16gigaword2feature_17batch_constructor_3__str__ = {"__str__", (PyCFunction)__pyx_pw_16gigaword2feature_17batch_constructor_3__str__, METH_O, __pyx_doc_16gigaword2feature_17batch_constructor_2__str__};
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_17batch_constructor_2__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "gigaword2feature.pyx":779
 *             Return a string description of this object.
 *         """
 *         return ('%d sentences, %d (positive), %d (overlap), %d (disjoint)' %             # <<<<<<<<<<<<<<
 *                 (len(self.sentence1),
 *                     self.positive.shape[0], self.overlap.shape[0], self.disjoint.shape[0]) )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "gigaword2feature.pyx":780
 *         """
 *         return ('%d sentences, %d (positive), %d (overlap), %d (disjoint)' %
 *                 (len(self.sentence1),             # <<<<<<<<<<<<<<
 *                     self.positive.shape[0], self.overlap.shape[0], self.disjoint.shape[0]) )
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_sentence1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "gigaword2feature.pyx":781
 *         return ('%d sentences, %d (positive), %d (overlap), %d (disjoint)' %
 *                 (len(self.sentence1),
 *                     self.positive.shape[0], self.overlap.shape[0], self.disjoint.shape[0]) )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_positive); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_overlap); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_disjoint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "gigaword2feature.pyx":780
 *         """
 *         return ('%d sentences, %d (positive), %d (overlap), %d (disjoint)' %
 *                 (len(self.sentence1),             # <<<<<<<<<<<<<<
 *                     self.positive.shape[0], self.overlap.shape[0], self.disjoint.shape[0]) )
 * 
 */
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;

  /* "gigaword2feature.pyx":779
 *             Return a string description of this object.
 *         """
 *         return ('%d sentences, %d (positive), %d (overlap), %d (disjoint)' %             # <<<<<<<<<<<<<<
 *                 (len(self.sentence1),
 *                     self.positive.shape[0], self.overlap.shape[0], self.disjoint.shape[0]) )
 */
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_d_sentences_d_positive_d_overla, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":773
 * 
 * 
 *     def __str__( self ):             # <<<<<<<<<<<<<<
 *         """
 *         Returns
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_17batch_constructor_6generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":785
 * 
 *     @cython.boundscheck(False)
 *     def mini_batch( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_5mini_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_17batch_constructor_4mini_batch[] = "\n        The generator yields mini batches of size 'n_batch_size'. Based on \n        'feature_choice', the following features may be selected:\n        1) case-insensitive left fofe including focus word(s)\n        2) case-insensitive right fofe incuding focus word(s)\n\n        Parameters\n        ----------\n            n_batch_size : int\n                mini-batch size, the last mini-batch might be smaller\n\n            shuffle_needed : bool\n                During training, 'shuffle_needed' should be 'True' so as to \n                introduce randomization. During testing, 'shuffle_needed' should \n                be 'False' for alignment.\n\n            overlap_rate : float\n                sample rate of negative examples that overlaps with positive examples\n\n            disjoint_rate : float \n                sample rate of negative examples that is disjoint with postiive examples\n\n            replace : bool\n                when 'overlap_rate' or 'disjoint_rate' is less than 1, sampling \n                is done with/without replacement if True/False\n\n            feature_choice : int\n                Look at 'Returns' for detailed description. If 'feature_choice' & (1 << ith) is 'True',\n\n            n_copy : int\n                how many times to chain this iterator\n\n        Returns\n        -------\n            l1_values : \n            r1_values : \n\n\n        ";
static PyMethodDef __pyx_mdef_16gigaword2feature_17batch_constructor_5mini_batch = {"mini_batch", (PyCFunction)__pyx_pw_16gigaword2feature_17batch_constructor_5mini_batch, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_17batch_constructor_4mini_batch};
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_5mini_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  int __pyx_v_n_batch_size;
  int __pyx_v_shuffle_needed;
  float __pyx_v_overlap_rate;
  float __pyx_v_disjoint_rate;
  int __pyx_v_feature_choice;
  int __pyx_v_replace;
  int __pyx_v_n_copy;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mini_batch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_n_batch_size,&__pyx_n_s_shuffle_needed,&__pyx_n_s_overlap_rate,&__pyx_n_s_disjoint_rate,&__pyx_n_s_feature_choice,&__pyx_n_s_replace,&__pyx_n_s_n_copy,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_batch_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mini_batch", 0, 2, 8, 1); __PYX_ERR(0, 785, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shuffle_needed);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_overlap_rate);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_disjoint_rate);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_feature_choice);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_replace);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_copy);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mini_batch") < 0)) __PYX_ERR(0, 785, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_n_batch_size = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n_batch_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 785, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_shuffle_needed = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_shuffle_needed == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L3_error)
    } else {

      /* "gigaword2feature.pyx":786
 *     @cython.boundscheck(False)
 *     def mini_batch( self, int n_batch_size,
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,             # <<<<<<<<<<<<<<
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 *                     bint replace = False, int n_copy = 1  ):
 */
      __pyx_v_shuffle_needed = ((int)((int)1));
    }
    if (values[3]) {
      __pyx_v_overlap_rate = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_overlap_rate == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 786, __pyx_L3_error)
    } else {
      __pyx_v_overlap_rate = ((float)((double)0.36));
    }
    if (values[4]) {
      __pyx_v_disjoint_rate = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_disjoint_rate == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    } else {
      __pyx_v_disjoint_rate = ((float)((double)0.08));
    }
    if (values[5]) {
      __pyx_v_feature_choice = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_feature_choice == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 787, __pyx_L3_error)
    } else {
      __pyx_v_feature_choice = ((int)((int)0xFF));
    }
    if (values[6]) {
      __pyx_v_replace = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_replace == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 788, __pyx_L3_error)
    } else {

      /* "gigaword2feature.pyx":788
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 *                     bint replace = False, int n_copy = 1  ):             # <<<<<<<<<<<<<<
 *         """
 *         The generator yields mini batches of size 'n_batch_size'. Based on
 */
      __pyx_v_replace = ((int)((int)0));
    }
    if (values[7]) {
      __pyx_v_n_copy = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_n_copy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 788, __pyx_L3_error)
    } else {
      __pyx_v_n_copy = ((int)((int)1));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mini_batch", 0, 2, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 785, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.mini_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_17batch_constructor_4mini_batch(__pyx_self, __pyx_v_self, __pyx_v_n_batch_size, __pyx_v_shuffle_needed, __pyx_v_overlap_rate, __pyx_v_disjoint_rate, __pyx_v_feature_choice, __pyx_v_replace, __pyx_v_n_copy);

  /* "gigaword2feature.pyx":785
 * 
 *     @cython.boundscheck(False)
 *     def mini_batch( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_4mini_batch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, int __pyx_v_n_batch_size, int __pyx_v_shuffle_needed, float __pyx_v_overlap_rate, float __pyx_v_disjoint_rate, int __pyx_v_feature_choice, int __pyx_v_replace, int __pyx_v_n_copy) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mini_batch", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_12_mini_batch(__pyx_ptype_16gigaword2feature___pyx_scope_struct_12_mini_batch, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_n_batch_size = __pyx_v_n_batch_size;
  __pyx_cur_scope->__pyx_v_shuffle_needed = __pyx_v_shuffle_needed;
  __pyx_cur_scope->__pyx_v_overlap_rate = __pyx_v_overlap_rate;
  __pyx_cur_scope->__pyx_v_disjoint_rate = __pyx_v_disjoint_rate;
  __pyx_cur_scope->__pyx_v_feature_choice = __pyx_v_feature_choice;
  __pyx_cur_scope->__pyx_v_replace = __pyx_v_replace;
  __pyx_cur_scope->__pyx_v_n_copy = __pyx_v_n_copy;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_17batch_constructor_6generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_mini_batch, __pyx_n_s_batch_constructor_mini_batch); if (unlikely(!gen)) __PYX_ERR(0, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.mini_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_17batch_constructor_6generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  std::string __pyx_t_15;
  float __pyx_t_16;
  size_t __pyx_t_17;
  struct __pyx_opt_args_16gigaword2feature_bigram_char_fofe __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  PyObject *(*__pyx_t_20)(PyObject *);
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  PyObject *__pyx_t_34 = NULL;
  PyObject *__pyx_t_35 = NULL;
  PyObject *__pyx_t_36 = NULL;
  PyObject *__pyx_t_37 = NULL;
  PyObject *__pyx_t_38 = NULL;
  PyObject *__pyx_t_39 = NULL;
  PyObject *__pyx_t_40 = NULL;
  PyObject *__pyx_t_41 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L56_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 785, __pyx_L1_error)

  /* "gigaword2feature.pyx":862
 *         cdef vector[int] label
 *         cdef int i, j, k, begin_idx, end_idx
 *         cdef int cnt = 0             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef int phrase_max_length = 10
 */
  __pyx_cur_scope->__pyx_v_cnt = 0;

  /* "gigaword2feature.pyx":864
 *         cdef int cnt = 0
 *         cdef int n
 *         cdef int phrase_max_length = 10             # <<<<<<<<<<<<<<
 *         cdef float bigram_alpha
 * 
 */
  __pyx_cur_scope->__pyx_v_phrase_max_length = 10;

  /* "gigaword2feature.pyx":867
 *         cdef float bigram_alpha
 * 
 *         has_char_feature = feature_choice & (64 | 128 | 512 | 1024)             # <<<<<<<<<<<<<<
 *         assert not has_char_feature or self.language != 'cmn', \
 *                 'Chinese is modeled at character level. '
 */
  __pyx_cur_scope->__pyx_v_has_char_feature = (__pyx_cur_scope->__pyx_v_feature_choice & 0x6C0);

  /* "gigaword2feature.pyx":868
 * 
 *         has_char_feature = feature_choice & (64 | 128 | 512 | 1024)
 *         assert not has_char_feature or self.language != 'cmn', \             # <<<<<<<<<<<<<<
 *                 'Chinese is modeled at character level. '
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((!(__pyx_cur_scope->__pyx_v_has_char_feature != 0)) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_language); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_cmn, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L4_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Chinese_is_modeled_at_character);
      __PYX_ERR(0, 868, __pyx_L1_error)
    }
  }
  #endif

  /* "gigaword2feature.pyx":871
 *                 'Chinese is modeled at character level. '
 * 
 *         if n_copy > 1:             # <<<<<<<<<<<<<<
 *             shuffle_needed = True
 *             replace = True
 */
  __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_n_copy > 1) != 0);
  if (__pyx_t_1) {

    /* "gigaword2feature.pyx":872
 * 
 *         if n_copy > 1:
 *             shuffle_needed = True             # <<<<<<<<<<<<<<
 *             replace = True
 * 
 */
    __pyx_cur_scope->__pyx_v_shuffle_needed = 1;

    /* "gigaword2feature.pyx":873
 *         if n_copy > 1:
 *             shuffle_needed = True
 *             replace = True             # <<<<<<<<<<<<<<
 * 
 *         dense_buffer = numpy.zeros( (n_batch_size, 513 + self.n_label_type), dtype = numpy.float32 )
 */
    __pyx_cur_scope->__pyx_v_replace = 1;

    /* "gigaword2feature.pyx":871
 *                 'Chinese is modeled at character level. '
 * 
 *         if n_copy > 1:             # <<<<<<<<<<<<<<
 *             shuffle_needed = True
 *             replace = True
 */
  }

  /* "gigaword2feature.pyx":875
 *             replace = True
 * 
 *         dense_buffer = numpy.zeros( (n_batch_size, 513 + self.n_label_type), dtype = numpy.float32 )             # <<<<<<<<<<<<<<
 * 
 *         if len( self.disjoint ) > 0:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_n_batch_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_n_label_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_AddCObj(__pyx_int_513, __pyx_t_5, 0x201, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_cur_scope->__pyx_v_dense_buffer = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "gigaword2feature.pyx":877
 *         dense_buffer = numpy.zeros( (n_batch_size, 513 + self.n_label_type), dtype = numpy.float32 )
 * 
 *         if len( self.disjoint ) > 0:             # <<<<<<<<<<<<<<
 *             disjoint = numpy.random.choice( self.disjoint,
 *                                             size = numpy.int32( len(self.disjoint) * disjoint_rate * n_copy ),
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_disjoint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_1 = ((__pyx_t_8 > 0) != 0);
  if (__pyx_t_1) {

    /* "gigaword2feature.pyx":878
 * 
 *         if len( self.disjoint ) > 0:
 *             disjoint = numpy.random.choice( self.disjoint,             # <<<<<<<<<<<<<<
 *                                             size = numpy.int32( len(self.disjoint) * disjoint_rate * n_copy ),
 *                                             replace = replace )
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_random); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_choice); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_disjoint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "gigaword2feature.pyx":879
 *         if len( self.disjoint ) > 0:
 *             disjoint = numpy.random.choice( self.disjoint,
 *                                             size = numpy.int32( len(self.disjoint) * disjoint_rate * n_copy ),             # <<<<<<<<<<<<<<
 *                                             replace = replace )
 *         else:
 */
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_int32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_disjoint); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(((__pyx_t_8 * __pyx_cur_scope->__pyx_v_disjoint_rate) * __pyx_cur_scope->__pyx_v_n_copy)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 879, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_size, __pyx_t_4) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":880
 *             disjoint = numpy.random.choice( self.disjoint,
 *                                             size = numpy.int32( len(self.disjoint) * disjoint_rate * n_copy ),
 *                                             replace = replace )             # <<<<<<<<<<<<<<
 *         else:
 *             disjoint = numpy.asarray([]).astype( numpy.int32 )
 */
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_cur_scope->__pyx_v_replace); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_replace, __pyx_t_4) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":878
 * 
 *         if len( self.disjoint ) > 0:
 *             disjoint = numpy.random.choice( self.disjoint,             # <<<<<<<<<<<<<<
 *                                             size = numpy.int32( len(self.disjoint) * disjoint_rate * n_copy ),
 *                                             replace = replace )
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v_disjoint = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":877
 *         dense_buffer = numpy.zeros( (n_batch_size, 513 + self.n_label_type), dtype = numpy.float32 )
 * 
 *         if len( self.disjoint ) > 0:             # <<<<<<<<<<<<<<
 *             disjoint = numpy.random.choice( self.disjoint,
 *                                             size = numpy.int32( len(self.disjoint) * disjoint_rate * n_copy ),
 */
    goto __pyx_L7;
  }

  /* "gigaword2feature.pyx":882
 *                                             replace = replace )
 *         else:
 *             disjoint = numpy.asarray([]).astype( numpy.int32 )             # <<<<<<<<<<<<<<
 * 
 *         if len( self.overlap ) > 0:
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_asarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_astype); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v_disjoint = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L7:;

  /* "gigaword2feature.pyx":884
 *             disjoint = numpy.asarray([]).astype( numpy.int32 )
 * 
 *         if len( self.overlap ) > 0:             # <<<<<<<<<<<<<<
 *             overlap = numpy.random.choice( self.overlap,
 *                                            size = numpy.int32( len(self.overlap) * overlap_rate * n_copy ),
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_overlap); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = ((__pyx_t_8 > 0) != 0);
  if (__pyx_t_1) {

    /* "gigaword2feature.pyx":885
 * 
 *         if len( self.overlap ) > 0:
 *             overlap = numpy.random.choice( self.overlap,             # <<<<<<<<<<<<<<
 *                                            size = numpy.int32( len(self.overlap) * overlap_rate * n_copy ),
 *                                            replace = replace )
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_random); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_choice); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_overlap); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "gigaword2feature.pyx":886
 *         if len( self.overlap ) > 0:
 *             overlap = numpy.random.choice( self.overlap,
 *                                            size = numpy.int32( len(self.overlap) * overlap_rate * n_copy ),             # <<<<<<<<<<<<<<
 *                                            replace = replace )
 *         else:
 */
    __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_overlap); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(((__pyx_t_8 * __pyx_cur_scope->__pyx_v_overlap_rate) * __pyx_cur_scope->__pyx_v_n_copy)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_11);
    } else {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_size, __pyx_t_11) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "gigaword2feature.pyx":887
 *             overlap = numpy.random.choice( self.overlap,
 *                                            size = numpy.int32( len(self.overlap) * overlap_rate * n_copy ),
 *                                            replace = replace )             # <<<<<<<<<<<<<<
 *         else:
 *             overlap = numpy.asarray([]).astype( numpy.int32 )
 */
    __pyx_t_11 = __Pyx_PyBool_FromLong(__pyx_cur_scope->__pyx_v_replace); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_replace, __pyx_t_11) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "gigaword2feature.pyx":885
 * 
 *         if len( self.overlap ) > 0:
 *             overlap = numpy.random.choice( self.overlap,             # <<<<<<<<<<<<<<
 *                                            size = numpy.int32( len(self.overlap) * overlap_rate * n_copy ),
 *                                            replace = replace )
 */
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_cur_scope->__pyx_v_overlap = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "gigaword2feature.pyx":884
 *             disjoint = numpy.asarray([]).astype( numpy.int32 )
 * 
 *         if len( self.overlap ) > 0:             # <<<<<<<<<<<<<<
 *             overlap = numpy.random.choice( self.overlap,
 *                                            size = numpy.int32( len(self.overlap) * overlap_rate * n_copy ),
 */
    goto __pyx_L8;
  }

  /* "gigaword2feature.pyx":889
 *                                            replace = replace )
 *         else:
 *             overlap = numpy.asarray([]).astype( numpy.int32 )             # <<<<<<<<<<<<<<
 * 
 *         candidate = numpy.concatenate( [ self.positive ] * n_copy + [ disjoint, overlap ] )
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_7);
    } else {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_astype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_11);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_cur_scope->__pyx_v_overlap = __pyx_t_11;
    __pyx_t_11 = 0;
  }
  __pyx_L8:;

  /* "gigaword2feature.pyx":891
 *             overlap = numpy.asarray([]).astype( numpy.int32 )
 * 
 *         candidate = numpy.concatenate( [ self.positive ] * n_copy + [ disjoint, overlap ] )             # <<<<<<<<<<<<<<
 * 
 *         if shuffle_needed:
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_positive); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = PyList_New(1 * ((__pyx_cur_scope->__pyx_v_n_copy<0) ? 0:__pyx_cur_scope->__pyx_v_n_copy)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_cur_scope->__pyx_v_n_copy; __pyx_temp++) {
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_10, __pyx_temp, __pyx_t_4);
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_disjoint);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_disjoint);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_disjoint);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_overlap);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_overlap);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_cur_scope->__pyx_v_overlap);
  __pyx_t_7 = PyNumber_Add(__pyx_t_10, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_11);
  } else {
    __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_cur_scope->__pyx_v_candidate = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "gigaword2feature.pyx":893
 *         candidate = numpy.concatenate( [ self.positive ] * n_copy + [ disjoint, overlap ] )
 * 
 *         if shuffle_needed:             # <<<<<<<<<<<<<<
 *             numpy.random.shuffle( candidate )
 *         else:
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_shuffle_needed != 0);
  if (__pyx_t_1) {

    /* "gigaword2feature.pyx":894
 * 
 *         if shuffle_needed:
 *             numpy.random.shuffle( candidate )             # <<<<<<<<<<<<<<
 *         else:
 *             candidate.sort()
 */
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_random); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_shuffle); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_cur_scope->__pyx_v_candidate); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_candidate);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_candidate);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_candidate);
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "gigaword2feature.pyx":893
 *         candidate = numpy.concatenate( [ self.positive ] * n_copy + [ disjoint, overlap ] )
 * 
 *         if shuffle_needed:             # <<<<<<<<<<<<<<
 *             numpy.random.shuffle( candidate )
 *         else:
 */
    goto __pyx_L9;
  }

  /* "gigaword2feature.pyx":896
 *             numpy.random.shuffle( candidate )
 *         else:
 *             candidate.sort()             # <<<<<<<<<<<<<<
 *         n = len(candidate)
 * 
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_candidate, __pyx_n_s_sort); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_7) {
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      __pyx_t_11 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 896, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_L9:;

  /* "gigaword2feature.pyx":897
 *         else:
 *             candidate.sort()
 *         n = len(candidate)             # <<<<<<<<<<<<<<
 * 
 *         for i in range( n ):
 */
  __pyx_t_8 = PyObject_Length(__pyx_cur_scope->__pyx_v_candidate); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 897, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_n = __pyx_t_8;

  /* "gigaword2feature.pyx":899
 *         n = len(candidate)
 * 
 *         for i in range( n ):             # <<<<<<<<<<<<<<
 *             next_example = self.example[ candidate[i] ]
 *             begin_idx = next_example.begin_idx
 */
  __pyx_t_12 = __pyx_cur_scope->__pyx_v_n;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_13;

    /* "gigaword2feature.pyx":900
 * 
 *         for i in range( n ):
 *             next_example = self.example[ candidate[i] ]             # <<<<<<<<<<<<<<
 *             begin_idx = next_example.begin_idx
 *             end_idx = next_example.end_idx
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_example); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_candidate, __pyx_cur_scope->__pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_GetItem(__pyx_t_11, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_16gigaword2feature_example))))) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_next_example));
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_next_example, ((struct __pyx_obj_16gigaword2feature_example *)__pyx_t_7));
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;

    /* "gigaword2feature.pyx":901
 *         for i in range( n ):
 *             next_example = self.example[ candidate[i] ]
 *             begin_idx = next_example.begin_idx             # <<<<<<<<<<<<<<
 *             end_idx = next_example.end_idx
 * 
 */
    __pyx_t_14 = __pyx_cur_scope->__pyx_v_next_example->begin_idx;
    __pyx_cur_scope->__pyx_v_begin_idx = __pyx_t_14;

    /* "gigaword2feature.pyx":902
 *             next_example = self.example[ candidate[i] ]
 *             begin_idx = next_example.begin_idx
 *             end_idx = next_example.end_idx             # <<<<<<<<<<<<<<
 * 
 *             sentence = self.sentence1[next_example.sentence_id]
 */
    __pyx_t_14 = __pyx_cur_scope->__pyx_v_next_example->end_idx;
    __pyx_cur_scope->__pyx_v_end_idx = __pyx_t_14;

    /* "gigaword2feature.pyx":904
 *             end_idx = next_example.end_idx
 * 
 *             sentence = self.sentence1[next_example.sentence_id]             # <<<<<<<<<<<<<<
 * 
 *             if self.language != 'cmn':
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_sentence1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_7, __pyx_cur_scope->__pyx_v_next_example->sentence_id, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_16gigaword2feature_processed_sentence))))) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_XGOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_sentence));
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_sentence, ((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_t_6));
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "gigaword2feature.pyx":906
 *             sentence = self.sentence1[next_example.sentence_id]
 * 
 *             if self.language != 'cmn':             # <<<<<<<<<<<<<<
 *                 phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )
 *                 reversed_phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )[::-1]
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_language); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 906, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_6, __pyx_n_s_cmn, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 906, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":907
 * 
 *             if self.language != 'cmn':
 *                 phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )             # <<<<<<<<<<<<<<
 *                 reversed_phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )[::-1]
 *                 bigram_alpha = self.numericizer1.alpha
 */
      __pyx_t_6 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_cur_scope->__pyx_v_sentence->sentence); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_t_6, __pyx_cur_scope->__pyx_v_begin_idx, __pyx_cur_scope->__pyx_v_end_idx, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Join(__pyx_kp_s__44, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_cur_scope->__pyx_v_phrase = __pyx_t_15;

      /* "gigaword2feature.pyx":908
 *             if self.language != 'cmn':
 *                 phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )
 *                 reversed_phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )[::-1]             # <<<<<<<<<<<<<<
 *                 bigram_alpha = self.numericizer1.alpha
 * 
 */
      __pyx_t_6 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_cur_scope->__pyx_v_sentence->sentence); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_t_6, __pyx_cur_scope->__pyx_v_begin_idx, __pyx_cur_scope->__pyx_v_end_idx, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Join(__pyx_kp_s__44, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_GetItem(__pyx_t_6, __pyx_slice__46); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_cur_scope->__pyx_v_reversed_phrase = __pyx_t_15;

      /* "gigaword2feature.pyx":909
 *                 phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )
 *                 reversed_phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )[::-1]
 *                 bigram_alpha = self.numericizer1.alpha             # <<<<<<<<<<<<<<
 * 
 *             with nogil:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_numericizer1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 909, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_alpha); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 909, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_16 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_cur_scope->__pyx_v_bigram_alpha = __pyx_t_16;

      /* "gigaword2feature.pyx":906
 *             sentence = self.sentence1[next_example.sentence_id]
 * 
 *             if self.language != 'cmn':             # <<<<<<<<<<<<<<
 *                 phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )
 *                 reversed_phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )[::-1]
 */
    }

    /* "gigaword2feature.pyx":911
 *                 bigram_alpha = self.numericizer1.alpha
 * 
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 # char-level convolution indices
 *                 # 1 padding at the begining and the end respectively
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "gigaword2feature.pyx":914
 *                 # char-level convolution indices
 *                 # 1 padding at the begining and the end respectively
 *                 if feature_choice & 512 > 0:             # <<<<<<<<<<<<<<
 *                     if phrase.size() + 2 > phrase_max_length:
 *                         phrase_max_length = phrase.size() + 2
 */
          __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 0x200) > 0) != 0);
          if (__pyx_t_1) {

            /* "gigaword2feature.pyx":915
 *                 # 1 padding at the begining and the end respectively
 *                 if feature_choice & 512 > 0:
 *                     if phrase.size() + 2 > phrase_max_length:             # <<<<<<<<<<<<<<
 *                         phrase_max_length = phrase.size() + 2
 *                     conv_buff.clear()
 */
            __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_phrase.size() + 2) > __pyx_cur_scope->__pyx_v_phrase_max_length) != 0);
            if (__pyx_t_1) {

              /* "gigaword2feature.pyx":916
 *                 if feature_choice & 512 > 0:
 *                     if phrase.size() + 2 > phrase_max_length:
 *                         phrase_max_length = phrase.size() + 2             # <<<<<<<<<<<<<<
 *                     conv_buff.clear()
 *                     conv_buff.push_back( 0 )
 */
              __pyx_cur_scope->__pyx_v_phrase_max_length = (__pyx_cur_scope->__pyx_v_phrase.size() + 2);

              /* "gigaword2feature.pyx":915
 *                 # 1 padding at the begining and the end respectively
 *                 if feature_choice & 512 > 0:
 *                     if phrase.size() + 2 > phrase_max_length:             # <<<<<<<<<<<<<<
 *                         phrase_max_length = phrase.size() + 2
 *                     conv_buff.clear()
 */
            }

            /* "gigaword2feature.pyx":917
 *                     if phrase.size() + 2 > phrase_max_length:
 *                         phrase_max_length = phrase.size() + 2
 *                     conv_buff.clear()             # <<<<<<<<<<<<<<
 *                     conv_buff.push_back( 0 )
 *                     for k in range( phrase.size() ):
 */
            __pyx_cur_scope->__pyx_v_conv_buff.clear();

            /* "gigaword2feature.pyx":918
 *                         phrase_max_length = phrase.size() + 2
 *                     conv_buff.clear()
 *                     conv_buff.push_back( 0 )             # <<<<<<<<<<<<<<
 *                     for k in range( phrase.size() ):
 *                         conv_buff.push_back( <int>phrase[k] )
 */
            try {
              __pyx_cur_scope->__pyx_v_conv_buff.push_back(0);
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 918, __pyx_L16_error)
            }

            /* "gigaword2feature.pyx":919
 *                     conv_buff.clear()
 *                     conv_buff.push_back( 0 )
 *                     for k in range( phrase.size() ):             # <<<<<<<<<<<<<<
 *                         conv_buff.push_back( <int>phrase[k] )
 *                     conv_idx.push_back( conv_buff )
 */
            __pyx_t_17 = __pyx_cur_scope->__pyx_v_phrase.size();
            for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_17; __pyx_t_14+=1) {
              __pyx_cur_scope->__pyx_v_k = __pyx_t_14;

              /* "gigaword2feature.pyx":920
 *                     conv_buff.push_back( 0 )
 *                     for k in range( phrase.size() ):
 *                         conv_buff.push_back( <int>phrase[k] )             # <<<<<<<<<<<<<<
 *                     conv_idx.push_back( conv_buff )
 * 
 */
              try {
                __pyx_cur_scope->__pyx_v_conv_buff.push_back(((int)(__pyx_cur_scope->__pyx_v_phrase[__pyx_cur_scope->__pyx_v_k])));
              } catch(...) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                #endif
                __Pyx_CppExn2PyErr();
                #ifdef WITH_THREAD
                PyGILState_Release(__pyx_gilstate_save);
                #endif
                __PYX_ERR(0, 920, __pyx_L16_error)
              }
            }

            /* "gigaword2feature.pyx":921
 *                     for k in range( phrase.size() ):
 *                         conv_buff.push_back( <int>phrase[k] )
 *                     conv_idx.push_back( conv_buff )             # <<<<<<<<<<<<<<
 * 
 *                 # bigram char-fofe
 */
            try {
              __pyx_cur_scope->__pyx_v_conv_idx.push_back(__pyx_cur_scope->__pyx_v_conv_buff);
            } catch(...) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
              #endif
              __Pyx_CppExn2PyErr();
              #ifdef WITH_THREAD
              PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 921, __pyx_L16_error)
            }

            /* "gigaword2feature.pyx":914
 *                 # char-level convolution indices
 *                 # 1 padding at the begining and the end respectively
 *                 if feature_choice & 512 > 0:             # <<<<<<<<<<<<<<
 *                     if phrase.size() + 2 > phrase_max_length:
 *                         phrase_max_length = phrase.size() + 2
 */
          }

          /* "gigaword2feature.pyx":924
 * 
 *                 # bigram char-fofe
 *                 if feature_choice & 1024 > 0:             # <<<<<<<<<<<<<<
 *                     bigram_char_fofe( phrase, lbc_values, lbc_indices, bigram_alpha, cnt )
 *                     bigram_char_fofe( reversed_phrase, rbc_values, rbc_indices,
 */
          __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 0x400) > 0) != 0);
          if (__pyx_t_1) {

            /* "gigaword2feature.pyx":925
 *                 # bigram char-fofe
 *                 if feature_choice & 1024 > 0:
 *                     bigram_char_fofe( phrase, lbc_values, lbc_indices, bigram_alpha, cnt )             # <<<<<<<<<<<<<<
 *                     bigram_char_fofe( reversed_phrase, rbc_values, rbc_indices,
 *                                       bigram_alpha, cnt )
 */
            __pyx_t_18.__pyx_n = 1;
            __pyx_t_18.row_id = __pyx_cur_scope->__pyx_v_cnt;
            __pyx_f_16gigaword2feature_bigram_char_fofe(__pyx_cur_scope->__pyx_v_phrase, __pyx_cur_scope->__pyx_v_lbc_values, __pyx_cur_scope->__pyx_v_lbc_indices, __pyx_cur_scope->__pyx_v_bigram_alpha, &__pyx_t_18); 

            /* "gigaword2feature.pyx":926
 *                 if feature_choice & 1024 > 0:
 *                     bigram_char_fofe( phrase, lbc_values, lbc_indices, bigram_alpha, cnt )
 *                     bigram_char_fofe( reversed_phrase, rbc_values, rbc_indices,             # <<<<<<<<<<<<<<
 *                                       bigram_alpha, cnt )
 * 
 */
            __pyx_t_18.__pyx_n = 1;
            __pyx_t_18.row_id = __pyx_cur_scope->__pyx_v_cnt;
            __pyx_f_16gigaword2feature_bigram_char_fofe(__pyx_cur_scope->__pyx_v_reversed_phrase, __pyx_cur_scope->__pyx_v_rbc_values, __pyx_cur_scope->__pyx_v_rbc_indices, __pyx_cur_scope->__pyx_v_bigram_alpha, &__pyx_t_18); 

            /* "gigaword2feature.pyx":924
 * 
 *                 # bigram char-fofe
 *                 if feature_choice & 1024 > 0:             # <<<<<<<<<<<<<<
 *                     bigram_char_fofe( phrase, lbc_values, lbc_indices, bigram_alpha, cnt )
 *                     bigram_char_fofe( reversed_phrase, rbc_values, rbc_indices,
 */
          }
        }

        /* "gigaword2feature.pyx":911
 *                 bigram_alpha = self.numericizer1.alpha
 * 
 *             with nogil:             # <<<<<<<<<<<<<<
 *                 # char-level convolution indices
 *                 # 1 padding at the begining and the end respectively
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L17;
          }
          __pyx_L16_error: {
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L17:;
        }
    }

    /* "gigaword2feature.pyx":931
 *             # character-level fofe of focus word(s)
 * 
 *             if feature_choice & 64 > 0:             # <<<<<<<<<<<<<<
 * 
 *                 left_c, right_c = self.numericizer1 \
 */
    __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 64) > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":933
 *             if feature_choice & 64 > 0:
 * 
 *                 left_c, right_c = self.numericizer1 \             # <<<<<<<<<<<<<<
 *                                       .char_fofe_of_phrase( sentence.sentence[begin_idx:end_idx] )
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_numericizer1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);

      /* "gigaword2feature.pyx":934
 * 
 *                 left_c, right_c = self.numericizer1 \
 *                                       .char_fofe_of_phrase( sentence.sentence[begin_idx:end_idx] )             # <<<<<<<<<<<<<<
 * 
 *                 # left_c, _ = self.numericizer1.char_fofe_of_word(
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_char_fofe_of_phrase); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 934, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_cur_scope->__pyx_v_sentence->sentence); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 934, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_t_7, __pyx_cur_scope->__pyx_v_begin_idx, __pyx_cur_scope->__pyx_v_end_idx, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 934, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
        PyObject* sequence = __pyx_t_6;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 933, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_4);
        #else
        __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_19 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_11 = __pyx_t_19(__pyx_t_10); if (unlikely(!__pyx_t_11)) goto __pyx_L24_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        index = 1; __pyx_t_4 = __pyx_t_19(__pyx_t_10); if (unlikely(!__pyx_t_4)) goto __pyx_L24_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_19(__pyx_t_10), 2) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
        __pyx_t_19 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L25_unpacking_done;
        __pyx_L24_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_19 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 933, __pyx_L1_error)
        __pyx_L25_unpacking_done:;
      }

      /* "gigaword2feature.pyx":933
 *             if feature_choice & 64 > 0:
 * 
 *                 left_c, right_c = self.numericizer1 \             # <<<<<<<<<<<<<<
 *                                       .char_fofe_of_phrase( sentence.sentence[begin_idx:end_idx] )
 * 
 */
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_left_c);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_left_c, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_right_c);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_right_c, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;

      /* "gigaword2feature.pyx":941
 *                 #             ''.join( [ w[0] for w in sentence.sentence[begin_idx:] ] ) )
 * 
 *                 dense_buffer[cnt,:128] = left_c             # <<<<<<<<<<<<<<
 *                 dense_buffer[cnt,128:256] = right_c
 * 
 */
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_cnt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 941, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 941, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
      __Pyx_INCREF(__pyx_slice__47);
      __Pyx_GIVEREF(__pyx_slice__47);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_slice__47);
      __pyx_t_6 = 0;
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_dense_buffer, __pyx_t_4, __pyx_cur_scope->__pyx_v_left_c) < 0)) __PYX_ERR(0, 941, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "gigaword2feature.pyx":942
 * 
 *                 dense_buffer[cnt,:128] = left_c
 *                 dense_buffer[cnt,128:256] = right_c             # <<<<<<<<<<<<<<
 * 
 *             # character-level fofe of initial of focus word(s)
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_cnt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 942, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 942, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
      __Pyx_INCREF(__pyx_slice__48);
      __Pyx_GIVEREF(__pyx_slice__48);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_slice__48);
      __pyx_t_4 = 0;
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_dense_buffer, __pyx_t_6, __pyx_cur_scope->__pyx_v_right_c) < 0)) __PYX_ERR(0, 942, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "gigaword2feature.pyx":931
 *             # character-level fofe of focus word(s)
 * 
 *             if feature_choice & 64 > 0:             # <<<<<<<<<<<<<<
 * 
 *                 left_c, right_c = self.numericizer1 \
 */
    }

    /* "gigaword2feature.pyx":946
 *             # character-level fofe of initial of focus word(s)
 * 
 *             if feature_choice & 128 > 0:             # <<<<<<<<<<<<<<
 *                 left_init, right_init = self.numericizer1.char_fofe_of_word(
 *                             ''.join( [ w[0] for w in sentence.sentence[begin_idx:end_idx] ] ) )
 */
    __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 0x80) > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":947
 * 
 *             if feature_choice & 128 > 0:
 *                 left_init, right_init = self.numericizer1.char_fofe_of_word(             # <<<<<<<<<<<<<<
 *                             ''.join( [ w[0] for w in sentence.sentence[begin_idx:end_idx] ] ) )
 *                 dense_buffer[cnt,256:384] = left_init
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_numericizer1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_char_fofe_of_word); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "gigaword2feature.pyx":948
 *             if feature_choice & 128 > 0:
 *                 left_init, right_init = self.numericizer1.char_fofe_of_word(
 *                             ''.join( [ w[0] for w in sentence.sentence[begin_idx:end_idx] ] ) )             # <<<<<<<<<<<<<<
 *                 dense_buffer[cnt,256:384] = left_init
 *                 dense_buffer[cnt,384:512] = right_init
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_cur_scope->__pyx_v_sentence->sentence); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_t_10, __pyx_cur_scope->__pyx_v_begin_idx, __pyx_cur_scope->__pyx_v_end_idx, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_10 = __pyx_t_7; __Pyx_INCREF(__pyx_t_10); __pyx_t_8 = 0;
        __pyx_t_20 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_20 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 948, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_20)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 948, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_10, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 948, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 948, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_10, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 948, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_20(__pyx_t_10);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 948, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_w);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_w, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_w, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 948, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyString_Join(__pyx_kp_s__42, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
        PyObject* sequence = __pyx_t_6;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 947, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_19 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_11 = __pyx_t_19(__pyx_t_10); if (unlikely(!__pyx_t_11)) goto __pyx_L29_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        index = 1; __pyx_t_7 = __pyx_t_19(__pyx_t_10); if (unlikely(!__pyx_t_7)) goto __pyx_L29_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_19(__pyx_t_10), 2) < 0) __PYX_ERR(0, 947, __pyx_L1_error)
        __pyx_t_19 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L30_unpacking_done;
        __pyx_L29_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_19 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 947, __pyx_L1_error)
        __pyx_L30_unpacking_done:;
      }

      /* "gigaword2feature.pyx":947
 * 
 *             if feature_choice & 128 > 0:
 *                 left_init, right_init = self.numericizer1.char_fofe_of_word(             # <<<<<<<<<<<<<<
 *                             ''.join( [ w[0] for w in sentence.sentence[begin_idx:end_idx] ] ) )
 *                 dense_buffer[cnt,256:384] = left_init
 */
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_left_init);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_left_init, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_right_init);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_right_init, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;

      /* "gigaword2feature.pyx":949
 *                 left_init, right_init = self.numericizer1.char_fofe_of_word(
 *                             ''.join( [ w[0] for w in sentence.sentence[begin_idx:end_idx] ] ) )
 *                 dense_buffer[cnt,256:384] = left_init             # <<<<<<<<<<<<<<
 *                 dense_buffer[cnt,384:512] = right_init
 * 
 */
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_cnt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
      __Pyx_INCREF(__pyx_slice__49);
      __Pyx_GIVEREF(__pyx_slice__49);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_slice__49);
      __pyx_t_6 = 0;
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_dense_buffer, __pyx_t_7, __pyx_cur_scope->__pyx_v_left_init) < 0)) __PYX_ERR(0, 949, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "gigaword2feature.pyx":950
 *                             ''.join( [ w[0] for w in sentence.sentence[begin_idx:end_idx] ] ) )
 *                 dense_buffer[cnt,256:384] = left_init
 *                 dense_buffer[cnt,384:512] = right_init             # <<<<<<<<<<<<<<
 * 
 *             # gazetteer match
 */
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_cnt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 950, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 950, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_slice__50);
      __Pyx_GIVEREF(__pyx_slice__50);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_slice__50);
      __pyx_t_7 = 0;
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_dense_buffer, __pyx_t_6, __pyx_cur_scope->__pyx_v_right_init) < 0)) __PYX_ERR(0, 950, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "gigaword2feature.pyx":946
 *             # character-level fofe of initial of focus word(s)
 * 
 *             if feature_choice & 128 > 0:             # <<<<<<<<<<<<<<
 *                 left_init, right_init = self.numericizer1.char_fofe_of_word(
 *                             ''.join( [ w[0] for w in sentence.sentence[begin_idx:end_idx] ] ) )
 */
    }

    /* "gigaword2feature.pyx":954
 *             # gazetteer match
 * 
 *             if feature_choice & 256 > 0:             # <<<<<<<<<<<<<<
 *                 dense_buffer[cnt,512:] = next_example.gazetteer
 * 
 */
    __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 0x100) > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":955
 * 
 *             if feature_choice & 256 > 0:
 *                 dense_buffer[cnt,512:] = next_example.gazetteer             # <<<<<<<<<<<<<<
 * 
 *             label.push_back( next_example.label )
 */
      __pyx_t_6 = ((PyObject *)__pyx_cur_scope->__pyx_v_next_example->gazetteer);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_cnt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 955, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 955, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
      __Pyx_INCREF(__pyx_slice__51);
      __Pyx_GIVEREF(__pyx_slice__51);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_slice__51);
      __pyx_t_7 = 0;
      if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_dense_buffer, __pyx_t_11, __pyx_t_6) < 0)) __PYX_ERR(0, 955, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "gigaword2feature.pyx":954
 *             # gazetteer match
 * 
 *             if feature_choice & 256 > 0:             # <<<<<<<<<<<<<<
 *                 dense_buffer[cnt,512:] = next_example.gazetteer
 * 
 */
    }

    /* "gigaword2feature.pyx":957
 *                 dense_buffer[cnt,512:] = next_example.gazetteer
 * 
 *             label.push_back( next_example.label )             # <<<<<<<<<<<<<<
 * 
 *             ########## case-insensitive context with focus ##########
 */
    try {
      __pyx_cur_scope->__pyx_v_label.push_back(__pyx_cur_scope->__pyx_v_next_example->label);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 957, __pyx_L1_error)
    }

    /* "gigaword2feature.pyx":961
 *             ########## case-insensitive context with focus ##########
 * 
 *             if feature_choice & 1 > 0:             # <<<<<<<<<<<<<<
 *                 sentence.insert_left_fofe( end_idx - 1, cnt, l1_indices, l1_values )
 *                 sentence.insert_right_fofe( begin_idx, cnt, r1_indices, r1_values )
 */
    __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 1) > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":962
 * 
 *             if feature_choice & 1 > 0:
 *                 sentence.insert_left_fofe( end_idx - 1, cnt, l1_indices, l1_values )             # <<<<<<<<<<<<<<
 *                 sentence.insert_right_fofe( begin_idx, cnt, r1_indices, r1_values )
 * 
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_left_fofe(__pyx_cur_scope->__pyx_v_sentence, (__pyx_cur_scope->__pyx_v_end_idx - 1), __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_l1_indices, __pyx_cur_scope->__pyx_v_l1_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 962, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "gigaword2feature.pyx":963
 *             if feature_choice & 1 > 0:
 *                 sentence.insert_left_fofe( end_idx - 1, cnt, l1_indices, l1_values )
 *                 sentence.insert_right_fofe( begin_idx, cnt, r1_indices, r1_values )             # <<<<<<<<<<<<<<
 * 
 *             ########## case-insensitive context without focus ##########
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_right_fofe(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_begin_idx, __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_r1_indices, __pyx_cur_scope->__pyx_v_r1_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 963, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "gigaword2feature.pyx":961
 *             ########## case-insensitive context with focus ##########
 * 
 *             if feature_choice & 1 > 0:             # <<<<<<<<<<<<<<
 *                 sentence.insert_left_fofe( end_idx - 1, cnt, l1_indices, l1_values )
 *                 sentence.insert_right_fofe( begin_idx, cnt, r1_indices, r1_values )
 */
    }

    /* "gigaword2feature.pyx":967
 *             ########## case-insensitive context without focus ##########
 * 
 *             if feature_choice & 2 > 0:             # <<<<<<<<<<<<<<
 *                 if begin_idx != 0:
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l2_indices, l2_values )
 */
    __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 2) > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":968
 * 
 *             if feature_choice & 2 > 0:
 *                 if begin_idx != 0:             # <<<<<<<<<<<<<<
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l2_indices, l2_values )
 * 
 */
      __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_begin_idx != 0) != 0);
      if (__pyx_t_1) {

        /* "gigaword2feature.pyx":969
 *             if feature_choice & 2 > 0:
 *                 if begin_idx != 0:
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l2_indices, l2_values )             # <<<<<<<<<<<<<<
 * 
 *                 if end_idx != sentence.numeric.size():
 */
        __pyx_t_6 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_left_fofe(__pyx_cur_scope->__pyx_v_sentence, (__pyx_cur_scope->__pyx_v_begin_idx - 1), __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_l2_indices, __pyx_cur_scope->__pyx_v_l2_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 969, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "gigaword2feature.pyx":968
 * 
 *             if feature_choice & 2 > 0:
 *                 if begin_idx != 0:             # <<<<<<<<<<<<<<
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l2_indices, l2_values )
 * 
 */
      }

      /* "gigaword2feature.pyx":971
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l2_indices, l2_values )
 * 
 *                 if end_idx != sentence.numeric.size():             # <<<<<<<<<<<<<<
 *                     sentence.insert_right_fofe( end_idx, cnt, r2_indices, r2_values )
 * 
 */
      __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_end_idx != __pyx_cur_scope->__pyx_v_sentence->numeric.size()) != 0);
      if (__pyx_t_1) {

        /* "gigaword2feature.pyx":972
 * 
 *                 if end_idx != sentence.numeric.size():
 *                     sentence.insert_right_fofe( end_idx, cnt, r2_indices, r2_values )             # <<<<<<<<<<<<<<
 * 
 *             ########## case-insensitive bow ##########
 */
        __pyx_t_6 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_right_fofe(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_end_idx, __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_r2_indices, __pyx_cur_scope->__pyx_v_r2_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 972, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "gigaword2feature.pyx":971
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l2_indices, l2_values )
 * 
 *                 if end_idx != sentence.numeric.size():             # <<<<<<<<<<<<<<
 *                     sentence.insert_right_fofe( end_idx, cnt, r2_indices, r2_values )
 * 
 */
      }

      /* "gigaword2feature.pyx":967
 *             ########## case-insensitive context without focus ##########
 * 
 *             if feature_choice & 2 > 0:             # <<<<<<<<<<<<<<
 *                 if begin_idx != 0:
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l2_indices, l2_values )
 */
    }

    /* "gigaword2feature.pyx":976
 *             ########## case-insensitive bow ##########
 * 
 *             if feature_choice & 4 > 0:             # <<<<<<<<<<<<<<
 *                 sentence.insert_bow( begin_idx, end_idx, cnt, bow1 )
 * 
 */
    __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 4) > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":977
 * 
 *             if feature_choice & 4 > 0:
 *                 sentence.insert_bow( begin_idx, end_idx, cnt, bow1 )             # <<<<<<<<<<<<<<
 * 
 *             # switch to case-sensitive
 */
      __pyx_t_6 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_bow(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_begin_idx, __pyx_cur_scope->__pyx_v_end_idx, __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_bow1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "gigaword2feature.pyx":976
 *             ########## case-insensitive bow ##########
 * 
 *             if feature_choice & 4 > 0:             # <<<<<<<<<<<<<<
 *                 sentence.insert_bow( begin_idx, end_idx, cnt, bow1 )
 * 
 */
    }

    /* "gigaword2feature.pyx":980
 * 
 *             # switch to case-sensitive
 *             sentence = self.sentence2[next_example.sentence_id]             # <<<<<<<<<<<<<<
 * 
 *             ########## case-sensitive context with focus ##########
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_sentence2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_6, __pyx_cur_scope->__pyx_v_next_example->sentence_id, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_16gigaword2feature_processed_sentence))))) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_cur_scope->__pyx_v_sentence));
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_sentence, ((struct __pyx_obj_16gigaword2feature_processed_sentence *)__pyx_t_11));
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_t_11 = 0;

    /* "gigaword2feature.pyx":984
 *             ########## case-sensitive context with focus ##########
 * 
 *             if feature_choice & 8 > 0:             # <<<<<<<<<<<<<<
 *                 sentence.insert_left_fofe( end_idx - 1, cnt, l3_indices, l3_values )
 *                 sentence.insert_right_fofe( begin_idx, cnt, r3_indices, r3_values )
 */
    __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 8) > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":985
 * 
 *             if feature_choice & 8 > 0:
 *                 sentence.insert_left_fofe( end_idx - 1, cnt, l3_indices, l3_values )             # <<<<<<<<<<<<<<
 *                 sentence.insert_right_fofe( begin_idx, cnt, r3_indices, r3_values )
 * 
 */
      __pyx_t_11 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_left_fofe(__pyx_cur_scope->__pyx_v_sentence, (__pyx_cur_scope->__pyx_v_end_idx - 1), __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_l3_indices, __pyx_cur_scope->__pyx_v_l3_values); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 985, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "gigaword2feature.pyx":986
 *             if feature_choice & 8 > 0:
 *                 sentence.insert_left_fofe( end_idx - 1, cnt, l3_indices, l3_values )
 *                 sentence.insert_right_fofe( begin_idx, cnt, r3_indices, r3_values )             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_11 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_right_fofe(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_begin_idx, __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_r3_indices, __pyx_cur_scope->__pyx_v_r3_values); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 986, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "gigaword2feature.pyx":984
 *             ########## case-sensitive context with focus ##########
 * 
 *             if feature_choice & 8 > 0:             # <<<<<<<<<<<<<<
 *                 sentence.insert_left_fofe( end_idx - 1, cnt, l3_indices, l3_values )
 *                 sentence.insert_right_fofe( begin_idx, cnt, r3_indices, r3_values )
 */
    }

    /* "gigaword2feature.pyx":991
 *             ########## case-sensitive context without focus ##########
 * 
 *             if feature_choice & 16 > 0:             # <<<<<<<<<<<<<<
 *                 if begin_idx != 0:
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l4_indices, l4_values )
 */
    __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 16) > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":992
 * 
 *             if feature_choice & 16 > 0:
 *                 if begin_idx != 0:             # <<<<<<<<<<<<<<
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l4_indices, l4_values )
 * 
 */
      __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_begin_idx != 0) != 0);
      if (__pyx_t_1) {

        /* "gigaword2feature.pyx":993
 *             if feature_choice & 16 > 0:
 *                 if begin_idx != 0:
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l4_indices, l4_values )             # <<<<<<<<<<<<<<
 * 
 *                 if end_idx != sentence.numeric.size():
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_left_fofe(__pyx_cur_scope->__pyx_v_sentence, (__pyx_cur_scope->__pyx_v_begin_idx - 1), __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_l4_indices, __pyx_cur_scope->__pyx_v_l4_values); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 993, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "gigaword2feature.pyx":992
 * 
 *             if feature_choice & 16 > 0:
 *                 if begin_idx != 0:             # <<<<<<<<<<<<<<
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l4_indices, l4_values )
 * 
 */
      }

      /* "gigaword2feature.pyx":995
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l4_indices, l4_values )
 * 
 *                 if end_idx != sentence.numeric.size():             # <<<<<<<<<<<<<<
 *                     sentence.insert_right_fofe( end_idx, cnt, r4_indices, r4_values )
 * 
 */
      __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_end_idx != __pyx_cur_scope->__pyx_v_sentence->numeric.size()) != 0);
      if (__pyx_t_1) {

        /* "gigaword2feature.pyx":996
 * 
 *                 if end_idx != sentence.numeric.size():
 *                     sentence.insert_right_fofe( end_idx, cnt, r4_indices, r4_values )             # <<<<<<<<<<<<<<
 * 
 *             if feature_choice & 32 > 0:
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_right_fofe(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_end_idx, __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_r4_indices, __pyx_cur_scope->__pyx_v_r4_values); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "gigaword2feature.pyx":995
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l4_indices, l4_values )
 * 
 *                 if end_idx != sentence.numeric.size():             # <<<<<<<<<<<<<<
 *                     sentence.insert_right_fofe( end_idx, cnt, r4_indices, r4_values )
 * 
 */
      }

      /* "gigaword2feature.pyx":991
 *             ########## case-sensitive context without focus ##########
 * 
 *             if feature_choice & 16 > 0:             # <<<<<<<<<<<<<<
 *                 if begin_idx != 0:
 *                     sentence.insert_left_fofe( begin_idx - 1, cnt, l4_indices, l4_values )
 */
    }

    /* "gigaword2feature.pyx":998
 *                     sentence.insert_right_fofe( end_idx, cnt, r4_indices, r4_values )
 * 
 *             if feature_choice & 32 > 0:             # <<<<<<<<<<<<<<
 *                 sentence.insert_bow( begin_idx, end_idx, cnt, bow2 )
 * 
 */
    __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 32) > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":999
 * 
 *             if feature_choice & 32 > 0:
 *                 sentence.insert_bow( begin_idx, end_idx, cnt, bow2 )             # <<<<<<<<<<<<<<
 * 
 *             cnt += 1
 */
      __pyx_t_11 = ((struct __pyx_vtabstruct_16gigaword2feature_processed_sentence *)__pyx_cur_scope->__pyx_v_sentence->__pyx_vtab)->insert_bow(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_begin_idx, __pyx_cur_scope->__pyx_v_end_idx, __pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_bow2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 999, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "gigaword2feature.pyx":998
 *                     sentence.insert_right_fofe( end_idx, cnt, r4_indices, r4_values )
 * 
 *             if feature_choice & 32 > 0:             # <<<<<<<<<<<<<<
 *                 sentence.insert_bow( begin_idx, end_idx, cnt, bow2 )
 * 
 */
    }

    /* "gigaword2feature.pyx":1001
 *                 sentence.insert_bow( begin_idx, end_idx, cnt, bow2 )
 * 
 *             cnt += 1             # <<<<<<<<<<<<<<
 *             if cnt % n_batch_size == 0 or (i + 1) == len(candidate):
 *                 with nogil:
 */
    __pyx_cur_scope->__pyx_v_cnt = (__pyx_cur_scope->__pyx_v_cnt + 1);

    /* "gigaword2feature.pyx":1002
 * 
 *             cnt += 1
 *             if cnt % n_batch_size == 0 or (i + 1) == len(candidate):             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     if feature_choice & 512 > 0:
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_n_batch_size == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 1002, __pyx_L1_error)
    }
    __pyx_t_2 = ((__Pyx_mod_int(__pyx_cur_scope->__pyx_v_cnt, __pyx_cur_scope->__pyx_v_n_batch_size) == 0) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L43_bool_binop_done;
    }
    __pyx_t_8 = PyObject_Length(__pyx_cur_scope->__pyx_v_candidate); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1002, __pyx_L1_error)
    __pyx_t_2 = (((__pyx_cur_scope->__pyx_v_i + 1) == __pyx_t_8) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L43_bool_binop_done:;
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":1003
 *             cnt += 1
 *             if cnt % n_batch_size == 0 or (i + 1) == len(candidate):
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     if feature_choice & 512 > 0:
 *                         for k in range( conv_idx.size() ):
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "gigaword2feature.pyx":1004
 *             if cnt % n_batch_size == 0 or (i + 1) == len(candidate):
 *                 with nogil:
 *                     if feature_choice & 512 > 0:             # <<<<<<<<<<<<<<
 *                         for k in range( conv_idx.size() ):
 *                             while conv_idx[k].size() < phrase_max_length:
 */
            __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_feature_choice & 0x200) > 0) != 0);
            if (__pyx_t_1) {

              /* "gigaword2feature.pyx":1005
 *                 with nogil:
 *                     if feature_choice & 512 > 0:
 *                         for k in range( conv_idx.size() ):             # <<<<<<<<<<<<<<
 *                             while conv_idx[k].size() < phrase_max_length:
 *                                 conv_idx[k].push_back( 0 )
 */
              __pyx_t_17 = __pyx_cur_scope->__pyx_v_conv_idx.size();
              for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_17; __pyx_t_14+=1) {
                __pyx_cur_scope->__pyx_v_k = __pyx_t_14;

                /* "gigaword2feature.pyx":1006
 *                     if feature_choice & 512 > 0:
 *                         for k in range( conv_idx.size() ):
 *                             while conv_idx[k].size() < phrase_max_length:             # <<<<<<<<<<<<<<
 *                                 conv_idx[k].push_back( 0 )
 *                             if conv_idx[k].size() > 128:
 */
                while (1) {
                  __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_conv_idx[__pyx_cur_scope->__pyx_v_k]).size() < __pyx_cur_scope->__pyx_v_phrase_max_length) != 0);
                  if (!__pyx_t_1) break;

                  /* "gigaword2feature.pyx":1007
 *                         for k in range( conv_idx.size() ):
 *                             while conv_idx[k].size() < phrase_max_length:
 *                                 conv_idx[k].push_back( 0 )             # <<<<<<<<<<<<<<
 *                             if conv_idx[k].size() > 128:
 *                                 conv_idx[k].resize( 128 )
 */
                  try {
                    (__pyx_cur_scope->__pyx_v_conv_idx[__pyx_cur_scope->__pyx_v_k]).push_back(0);
                  } catch(...) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    __Pyx_CppExn2PyErr();
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    __PYX_ERR(0, 1007, __pyx_L48_error)
                  }
                }

                /* "gigaword2feature.pyx":1008
 *                             while conv_idx[k].size() < phrase_max_length:
 *                                 conv_idx[k].push_back( 0 )
 *                             if conv_idx[k].size() > 128:             # <<<<<<<<<<<<<<
 *                                 conv_idx[k].resize( 128 )
 * 
 */
                __pyx_t_1 = (((__pyx_cur_scope->__pyx_v_conv_idx[__pyx_cur_scope->__pyx_v_k]).size() > 0x80) != 0);
                if (__pyx_t_1) {

                  /* "gigaword2feature.pyx":1009
 *                                 conv_idx[k].push_back( 0 )
 *                             if conv_idx[k].size() > 128:
 *                                 conv_idx[k].resize( 128 )             # <<<<<<<<<<<<<<
 * 
 *                 # print 'i am right before yield statement, cnt = %d' % cnt
 */
                  try {
                    (__pyx_cur_scope->__pyx_v_conv_idx[__pyx_cur_scope->__pyx_v_k]).resize(0x80);
                  } catch(...) {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
                    #endif
                    __Pyx_CppExn2PyErr();
                    #ifdef WITH_THREAD
                    PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    __PYX_ERR(0, 1009, __pyx_L48_error)
                  }

                  /* "gigaword2feature.pyx":1008
 *                             while conv_idx[k].size() < phrase_max_length:
 *                                 conv_idx[k].push_back( 0 )
 *                             if conv_idx[k].size() > 128:             # <<<<<<<<<<<<<<
 *                                 conv_idx[k].resize( 128 )
 * 
 */
                }
              }

              /* "gigaword2feature.pyx":1004
 *             if cnt % n_batch_size == 0 or (i + 1) == len(candidate):
 *                 with nogil:
 *                     if feature_choice & 512 > 0:             # <<<<<<<<<<<<<<
 *                         for k in range( conv_idx.size() ):
 *                             while conv_idx[k].size() < phrase_max_length:
 */
            }
          }

          /* "gigaword2feature.pyx":1003
 *             cnt += 1
 *             if cnt % n_batch_size == 0 or (i + 1) == len(candidate):
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     if feature_choice & 512 > 0:
 *                         for k in range( conv_idx.size() ):
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L49;
            }
            __pyx_L48_error: {
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L1_error;
            }
            __pyx_L49:;
          }
      }

      /* "gigaword2feature.pyx":1013
 *                 # print 'i am right before yield statement, cnt = %d' % cnt
 * 
 *                 yield   numpy.asarray( l1_values, dtype = numpy.float32 ),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( r1_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l1_indices, [-1, 2] ),\
 */
      __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_l1_values); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "gigaword2feature.pyx":1014
 * 
 *                 yield   numpy.asarray( l1_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r1_values, dtype = numpy.float32 ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( l1_indices, [-1, 2] ),\
 *                         numpy.reshape( r1_indices, [-1, 2] ),\
 */
      __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_asarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_r1_values); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_float32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "gigaword2feature.pyx":1015
 *                 yield   numpy.asarray( l1_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r1_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l1_indices, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( r1_indices, [-1, 2] ),\
 *                         numpy.asarray( l2_values, dtype = numpy.float32 ),\
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_reshape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_l1_indices); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_10, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_10, 1, __pyx_int_2);
      __pyx_t_5 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_3 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_8, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_8, __pyx_t_10);
      __pyx_t_6 = 0;
      __pyx_t_10 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "gigaword2feature.pyx":1016
 *                         numpy.asarray( r1_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l1_indices, [-1, 2] ),\
 *                         numpy.reshape( r1_indices, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( l2_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r2_values, dtype = numpy.float32 ),\
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_reshape); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_r1_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_6, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_6, 1, __pyx_int_2);
      __pyx_t_5 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_21 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_8, __pyx_t_6);
      __pyx_t_3 = 0;
      __pyx_t_6 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_21, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "gigaword2feature.pyx":1017
 *                         numpy.reshape( l1_indices, [-1, 2] ),\
 *                         numpy.reshape( r1_indices, [-1, 2] ),\
 *                         numpy.asarray( l2_values, dtype = numpy.float32 ),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( r2_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l2_indices, [-1, 2] ),\
 */
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_asarray); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_l2_values); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_t_6, __pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "gigaword2feature.pyx":1018
 *                         numpy.reshape( r1_indices, [-1, 2] ),\
 *                         numpy.asarray( l2_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r2_values, dtype = numpy.float32 ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( l2_indices, [-1, 2] ),\
 *                         numpy.reshape( r2_indices, [-1, 2] ),\
 */
      __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_r2_values); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_21 = PyTuple_New(1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_22) < 0) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_21, __pyx_t_10); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "gigaword2feature.pyx":1019
 *                         numpy.asarray( l2_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r2_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l2_indices, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( r2_indices, [-1, 2] ),\
 *                         numpy.reshape( bow1, [-1, 2] ),\
 */
      __pyx_t_21 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_reshape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_21 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_l2_indices); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_3, 1, __pyx_int_2);
      __pyx_t_23 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_23)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_23);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_24 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      if (__pyx_t_23) {
        __Pyx_GIVEREF(__pyx_t_23); PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_t_23); __pyx_t_23 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_24, 0+__pyx_t_8, __pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_24, 1+__pyx_t_8, __pyx_t_3);
      __pyx_t_21 = 0;
      __pyx_t_3 = 0;
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_24, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "gigaword2feature.pyx":1020
 *                         numpy.asarray( r2_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l2_indices, [-1, 2] ),\
 *                         numpy.reshape( r2_indices, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( bow1, [-1, 2] ),\
 *                         numpy.asarray( l3_values, dtype = numpy.float32 ),\
 */
      __pyx_t_24 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1020, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1020, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __pyx_t_24 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_r2_indices); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1020, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_21 = PyList_New(2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1020, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_21, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_21, 1, __pyx_int_2);
      __pyx_t_23 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_23)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_23);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_25 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1020, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      if (__pyx_t_23) {
        __Pyx_GIVEREF(__pyx_t_23); PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_t_23); __pyx_t_23 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_24);
      PyTuple_SET_ITEM(__pyx_t_25, 0+__pyx_t_8, __pyx_t_24);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_25, 1+__pyx_t_8, __pyx_t_21);
      __pyx_t_24 = 0;
      __pyx_t_21 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_25, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1020, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "gigaword2feature.pyx":1021
 *                         numpy.reshape( l2_indices, [-1, 2] ),\
 *                         numpy.reshape( r2_indices, [-1, 2] ),\
 *                         numpy.reshape( bow1, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( l3_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r3_values, dtype = numpy.float32 ),\
 */
      __pyx_t_25 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1021, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_reshape); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1021, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      __pyx_t_25 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_bow1); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1021, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_24 = PyList_New(2); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1021, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_24, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_24, 1, __pyx_int_2);
      __pyx_t_23 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_21))) {
        __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_21);
        if (likely(__pyx_t_23)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
          __Pyx_INCREF(__pyx_t_23);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_21, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_26 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1021, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      if (__pyx_t_23) {
        __Pyx_GIVEREF(__pyx_t_23); PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_23); __pyx_t_23 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_25);
      PyTuple_SET_ITEM(__pyx_t_26, 0+__pyx_t_8, __pyx_t_25);
      __Pyx_GIVEREF(__pyx_t_24);
      PyTuple_SET_ITEM(__pyx_t_26, 1+__pyx_t_8, __pyx_t_24);
      __pyx_t_25 = 0;
      __pyx_t_24 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_t_26, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

      /* "gigaword2feature.pyx":1022
 *                         numpy.reshape( r2_indices, [-1, 2] ),\
 *                         numpy.reshape( bow1, [-1, 2] ),\
 *                         numpy.asarray( l3_values, dtype = numpy.float32 ),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( r3_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l3_indices, [-1, 2] ),\
 */
      __pyx_t_21 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_26 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_asarray); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_21 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_l3_values); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_24 = PyTuple_New(1); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_t_21);
      __pyx_t_21 = 0;
      __pyx_t_21 = PyDict_New(); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_25 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_float32); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      if (PyDict_SetItem(__pyx_t_21, __pyx_n_s_dtype, __pyx_t_23) < 0) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_26, __pyx_t_24, __pyx_t_21); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

      /* "gigaword2feature.pyx":1023
 *                         numpy.reshape( bow1, [-1, 2] ),\
 *                         numpy.asarray( l3_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r3_values, dtype = numpy.float32 ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( l3_indices, [-1, 2] ),\
 *                         numpy.reshape( r3_indices, [-1, 2] ),\
 */
      __pyx_t_21 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_asarray); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_t_21 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_r3_values); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_26 = PyTuple_New(1); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_21);
      __pyx_t_21 = 0;
      __pyx_t_21 = PyDict_New(); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_25 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_27 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_float32); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      if (PyDict_SetItem(__pyx_t_21, __pyx_n_s_dtype, __pyx_t_27) < 0) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_24, __pyx_t_26, __pyx_t_21); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

      /* "gigaword2feature.pyx":1024
 *                         numpy.asarray( l3_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r3_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l3_indices, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( r3_indices, [-1, 2] ),\
 *                         numpy.asarray( l4_values, dtype = numpy.float32 ),\
 */
      __pyx_t_26 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_26, __pyx_n_s_reshape); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      __pyx_t_26 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_l3_indices); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __pyx_t_25 = PyList_New(2); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_25, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_25, 1, __pyx_int_2);
      __pyx_t_28 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_24))) {
        __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_24);
        if (likely(__pyx_t_28)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
          __Pyx_INCREF(__pyx_t_28);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_24, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_29 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      if (__pyx_t_28) {
        __Pyx_GIVEREF(__pyx_t_28); PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_28); __pyx_t_28 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_26);
      PyTuple_SET_ITEM(__pyx_t_29, 0+__pyx_t_8, __pyx_t_26);
      __Pyx_GIVEREF(__pyx_t_25);
      PyTuple_SET_ITEM(__pyx_t_29, 1+__pyx_t_8, __pyx_t_25);
      __pyx_t_26 = 0;
      __pyx_t_25 = 0;
      __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_24, __pyx_t_29, NULL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

      /* "gigaword2feature.pyx":1025
 *                         numpy.asarray( r3_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l3_indices, [-1, 2] ),\
 *                         numpy.reshape( r3_indices, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( l4_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r4_values, dtype = numpy.float32 ),\
 */
      __pyx_t_29 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_25 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_reshape); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      __pyx_t_29 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_r3_indices); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_26 = PyList_New(2); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_26, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_26, 1, __pyx_int_2);
      __pyx_t_28 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_25))) {
        __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_25);
        if (likely(__pyx_t_28)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_25);
          __Pyx_INCREF(__pyx_t_28);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_25, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_30 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 1025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      if (__pyx_t_28) {
        __Pyx_GIVEREF(__pyx_t_28); PyTuple_SET_ITEM(__pyx_t_30, 0, __pyx_t_28); __pyx_t_28 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_29);
      PyTuple_SET_ITEM(__pyx_t_30, 0+__pyx_t_8, __pyx_t_29);
      __Pyx_GIVEREF(__pyx_t_26);
      PyTuple_SET_ITEM(__pyx_t_30, 1+__pyx_t_8, __pyx_t_26);
      __pyx_t_29 = 0;
      __pyx_t_26 = 0;
      __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_25, __pyx_t_30, NULL); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

      /* "gigaword2feature.pyx":1026
 *                         numpy.reshape( l3_indices, [-1, 2] ),\
 *                         numpy.reshape( r3_indices, [-1, 2] ),\
 *                         numpy.asarray( l4_values, dtype = numpy.float32 ),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( r4_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l4_indices, [-1, 2] ),\
 */
      __pyx_t_25 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_30 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_asarray); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      __pyx_t_25 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_l4_values); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_26 = PyTuple_New(1); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_GIVEREF(__pyx_t_25);
      PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_25);
      __pyx_t_25 = 0;
      __pyx_t_25 = PyDict_New(); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_29 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_28 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_float32); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      if (PyDict_SetItem(__pyx_t_25, __pyx_n_s_dtype, __pyx_t_28) < 0) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
      __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_30, __pyx_t_26, __pyx_t_25); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1026, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

      /* "gigaword2feature.pyx":1027
 *                         numpy.reshape( r3_indices, [-1, 2] ),\
 *                         numpy.asarray( l4_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r4_values, dtype = numpy.float32 ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( l4_indices, [-1, 2] ),\
 *                         numpy.reshape( r4_indices, [-1, 2] ),\
 */
      __pyx_t_25 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_26 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_asarray); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      __pyx_t_25 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_r4_values); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_30 = PyTuple_New(1); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __Pyx_GIVEREF(__pyx_t_25);
      PyTuple_SET_ITEM(__pyx_t_30, 0, __pyx_t_25);
      __pyx_t_25 = 0;
      __pyx_t_25 = PyDict_New(); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_29 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_float32); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
      if (PyDict_SetItem(__pyx_t_25, __pyx_n_s_dtype, __pyx_t_31) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_26, __pyx_t_30, __pyx_t_25); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 1027, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

      /* "gigaword2feature.pyx":1028
 *                         numpy.asarray( l4_values, dtype = numpy.float32 ),\
 *                         numpy.asarray( r4_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l4_indices, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( r4_indices, [-1, 2] ),\
 *                         numpy.reshape( bow2, [-1, 2] ),\
 */
      __pyx_t_30 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __pyx_t_26 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_reshape); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
      __pyx_t_30 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_l4_indices); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __pyx_t_29 = PyList_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_29, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_29, 1, __pyx_int_2);
      __pyx_t_32 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_26))) {
        __pyx_t_32 = PyMethod_GET_SELF(__pyx_t_26);
        if (likely(__pyx_t_32)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_26);
          __Pyx_INCREF(__pyx_t_32);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_26, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_33 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_33);
      if (__pyx_t_32) {
        __Pyx_GIVEREF(__pyx_t_32); PyTuple_SET_ITEM(__pyx_t_33, 0, __pyx_t_32); __pyx_t_32 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_30);
      PyTuple_SET_ITEM(__pyx_t_33, 0+__pyx_t_8, __pyx_t_30);
      __Pyx_GIVEREF(__pyx_t_29);
      PyTuple_SET_ITEM(__pyx_t_33, 1+__pyx_t_8, __pyx_t_29);
      __pyx_t_30 = 0;
      __pyx_t_29 = 0;
      __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_26, __pyx_t_33, NULL); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

      /* "gigaword2feature.pyx":1029
 *                         numpy.asarray( r4_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l4_indices, [-1, 2] ),\
 *                         numpy.reshape( r4_indices, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         numpy.reshape( bow2, [-1, 2] ),\
 *                         dense_buffer[:cnt].copy(),\
 */
      __pyx_t_33 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_33);
      __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_33, __pyx_n_s_reshape); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
      __pyx_t_33 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_r4_indices); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_33);
      __pyx_t_30 = PyList_New(2); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_30, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_30, 1, __pyx_int_2);
      __pyx_t_32 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_29))) {
        __pyx_t_32 = PyMethod_GET_SELF(__pyx_t_29);
        if (likely(__pyx_t_32)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_29);
          __Pyx_INCREF(__pyx_t_32);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_29, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_34 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_34);
      if (__pyx_t_32) {
        __Pyx_GIVEREF(__pyx_t_32); PyTuple_SET_ITEM(__pyx_t_34, 0, __pyx_t_32); __pyx_t_32 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_33);
      PyTuple_SET_ITEM(__pyx_t_34, 0+__pyx_t_8, __pyx_t_33);
      __Pyx_GIVEREF(__pyx_t_30);
      PyTuple_SET_ITEM(__pyx_t_34, 1+__pyx_t_8, __pyx_t_30);
      __pyx_t_33 = 0;
      __pyx_t_30 = 0;
      __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_34, NULL); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

      /* "gigaword2feature.pyx":1030
 *                         numpy.reshape( l4_indices, [-1, 2] ),\
 *                         numpy.reshape( r4_indices, [-1, 2] ),\
 *                         numpy.reshape( bow2, [-1, 2] ),\             # <<<<<<<<<<<<<<
 *                         dense_buffer[:cnt].copy(),\
 *                         numpy.asarray( conv_idx ) if conv_idx.size() > 0 else numpy.empty((0,0), numpy.int64),\
 */
      __pyx_t_34 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_34);
      __pyx_t_30 = __Pyx_PyObject_GetAttrStr(__pyx_t_34, __pyx_n_s_reshape); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_30);
      __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
      __pyx_t_34 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_bow2); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_34);
      __pyx_t_33 = PyList_New(2); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_33);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_33, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_33, 1, __pyx_int_2);
      __pyx_t_32 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_30))) {
        __pyx_t_32 = PyMethod_GET_SELF(__pyx_t_30);
        if (likely(__pyx_t_32)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_30);
          __Pyx_INCREF(__pyx_t_32);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_30, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_35 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_35);
      if (__pyx_t_32) {
        __Pyx_GIVEREF(__pyx_t_32); PyTuple_SET_ITEM(__pyx_t_35, 0, __pyx_t_32); __pyx_t_32 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_34);
      PyTuple_SET_ITEM(__pyx_t_35, 0+__pyx_t_8, __pyx_t_34);
      __Pyx_GIVEREF(__pyx_t_33);
      PyTuple_SET_ITEM(__pyx_t_35, 1+__pyx_t_8, __pyx_t_33);
      __pyx_t_34 = 0;
      __pyx_t_33 = 0;
      __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_30, __pyx_t_35, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
      __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;

      /* "gigaword2feature.pyx":1031
 *                         numpy.reshape( r4_indices, [-1, 2] ),\
 *                         numpy.reshape( bow2, [-1, 2] ),\
 *                         dense_buffer[:cnt].copy(),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( conv_idx ) if conv_idx.size() > 0 else numpy.empty((0,0), numpy.int64),\
 *                         numpy.asarray( lbc_values, dtype = numpy.float32 ), \
 */
      __pyx_t_35 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_dense_buffer, 0, __pyx_cur_scope->__pyx_v_cnt, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_35);
      __pyx_t_33 = __Pyx_PyObject_GetAttrStr(__pyx_t_35, __pyx_n_s_copy); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 1031, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_33);
      __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
      __pyx_t_35 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_33))) {
        __pyx_t_35 = PyMethod_GET_SELF(__pyx_t_33);
        if (likely(__pyx_t_35)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_33);
          __Pyx_INCREF(__pyx_t_35);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_33, function);
        }
      }
      if (__pyx_t_35) {
        __pyx_t_30 = __Pyx_PyObject_CallOneArg(__pyx_t_33, __pyx_t_35); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 1031, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
      } else {
        __pyx_t_30 = __Pyx_PyObject_CallNoArg(__pyx_t_33); if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 1031, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_30);
      __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;

      /* "gigaword2feature.pyx":1032
 *                         numpy.reshape( bow2, [-1, 2] ),\
 *                         dense_buffer[:cnt].copy(),\
 *                         numpy.asarray( conv_idx ) if conv_idx.size() > 0 else numpy.empty((0,0), numpy.int64),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( lbc_values, dtype = numpy.float32 ), \
 *                         numpy.reshape( lbc_indices, [-1, 2]  ), \
 */
      if (((__pyx_cur_scope->__pyx_v_conv_idx.size() > 0) != 0)) {
        __pyx_t_34 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1032, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_34);
        __pyx_t_32 = __Pyx_PyObject_GetAttrStr(__pyx_t_34, __pyx_n_s_asarray); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 1032, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_32);
        __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
        __pyx_t_34 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_cur_scope->__pyx_v_conv_idx); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1032, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_34);
        __pyx_t_36 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_32))) {
          __pyx_t_36 = PyMethod_GET_SELF(__pyx_t_32);
          if (likely(__pyx_t_36)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_32);
            __Pyx_INCREF(__pyx_t_36);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_32, function);
          }
        }
        if (!__pyx_t_36) {
          __pyx_t_35 = __Pyx_PyObject_CallOneArg(__pyx_t_32, __pyx_t_34); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1032, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
          __Pyx_GOTREF(__pyx_t_35);
        } else {
          __pyx_t_37 = PyTuple_New(1+1); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1032, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_37);
          __Pyx_GIVEREF(__pyx_t_36); PyTuple_SET_ITEM(__pyx_t_37, 0, __pyx_t_36); __pyx_t_36 = NULL;
          __Pyx_GIVEREF(__pyx_t_34);
          PyTuple_SET_ITEM(__pyx_t_37, 0+1, __pyx_t_34);
          __pyx_t_34 = 0;
          __pyx_t_35 = __Pyx_PyObject_Call(__pyx_t_32, __pyx_t_37, NULL); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1032, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_35);
          __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
        }
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        __pyx_t_33 = __pyx_t_35;
        __pyx_t_35 = 0;
      } else {
        __pyx_t_32 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 1032, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_32);
        __pyx_t_37 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_empty); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1032, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_37);
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        __pyx_t_32 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 1032, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_32);
        __pyx_t_34 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_int64); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1032, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_34);
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        __pyx_t_32 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_37))) {
          __pyx_t_32 = PyMethod_GET_SELF(__pyx_t_37);
          if (likely(__pyx_t_32)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_37);
            __Pyx_INCREF(__pyx_t_32);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_37, function);
            __pyx_t_8 = 1;
          }
        }
        __pyx_t_36 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1032, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_36);
        if (__pyx_t_32) {
          __Pyx_GIVEREF(__pyx_t_32); PyTuple_SET_ITEM(__pyx_t_36, 0, __pyx_t_32); __pyx_t_32 = NULL;
        }
        __Pyx_INCREF(__pyx_tuple__52);
        __Pyx_GIVEREF(__pyx_tuple__52);
        PyTuple_SET_ITEM(__pyx_t_36, 0+__pyx_t_8, __pyx_tuple__52);
        __Pyx_GIVEREF(__pyx_t_34);
        PyTuple_SET_ITEM(__pyx_t_36, 1+__pyx_t_8, __pyx_t_34);
        __pyx_t_34 = 0;
        __pyx_t_35 = __Pyx_PyObject_Call(__pyx_t_37, __pyx_t_36, NULL); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1032, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_35);
        __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
        __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
        __pyx_t_33 = __pyx_t_35;
        __pyx_t_35 = 0;
      }

      /* "gigaword2feature.pyx":1033
 *                         dense_buffer[:cnt].copy(),\
 *                         numpy.asarray( conv_idx ) if conv_idx.size() > 0 else numpy.empty((0,0), numpy.int64),\
 *                         numpy.asarray( lbc_values, dtype = numpy.float32 ), \             # <<<<<<<<<<<<<<
 *                         numpy.reshape( lbc_indices, [-1, 2]  ), \
 *                         numpy.asarray( rbc_values, dtype = numpy.float32 ), \
 */
      __pyx_t_35 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_35);
      __pyx_t_37 = __Pyx_PyObject_GetAttrStr(__pyx_t_35, __pyx_n_s_asarray); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_37);
      __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;
      __pyx_t_35 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_lbc_values); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_35);
      __pyx_t_36 = PyTuple_New(1); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __Pyx_GIVEREF(__pyx_t_35);
      PyTuple_SET_ITEM(__pyx_t_36, 0, __pyx_t_35);
      __pyx_t_35 = 0;
      __pyx_t_35 = PyDict_New(); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_35);
      __pyx_t_34 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_34);
      __pyx_t_32 = __Pyx_PyObject_GetAttrStr(__pyx_t_34, __pyx_n_s_float32); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_32);
      __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
      if (PyDict_SetItem(__pyx_t_35, __pyx_n_s_dtype, __pyx_t_32) < 0) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
      __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_37, __pyx_t_36, __pyx_t_35); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_32);
      __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
      __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
      __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;

      /* "gigaword2feature.pyx":1034
 *                         numpy.asarray( conv_idx ) if conv_idx.size() > 0 else numpy.empty((0,0), numpy.int64),\
 *                         numpy.asarray( lbc_values, dtype = numpy.float32 ), \
 *                         numpy.reshape( lbc_indices, [-1, 2]  ), \             # <<<<<<<<<<<<<<
 *                         numpy.asarray( rbc_values, dtype = numpy.float32 ), \
 *                         numpy.reshape( rbc_indices, [-1, 2]  ), \
 */
      __pyx_t_36 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __pyx_t_37 = __Pyx_PyObject_GetAttrStr(__pyx_t_36, __pyx_n_s_reshape); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_37);
      __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
      __pyx_t_36 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_lbc_indices); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __pyx_t_34 = PyList_New(2); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_34);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_34, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_34, 1, __pyx_int_2);
      __pyx_t_38 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_37))) {
        __pyx_t_38 = PyMethod_GET_SELF(__pyx_t_37);
        if (likely(__pyx_t_38)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_37);
          __Pyx_INCREF(__pyx_t_38);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_37, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_39 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_39);
      if (__pyx_t_38) {
        __Pyx_GIVEREF(__pyx_t_38); PyTuple_SET_ITEM(__pyx_t_39, 0, __pyx_t_38); __pyx_t_38 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_36);
      PyTuple_SET_ITEM(__pyx_t_39, 0+__pyx_t_8, __pyx_t_36);
      __Pyx_GIVEREF(__pyx_t_34);
      PyTuple_SET_ITEM(__pyx_t_39, 1+__pyx_t_8, __pyx_t_34);
      __pyx_t_36 = 0;
      __pyx_t_34 = 0;
      __pyx_t_35 = __Pyx_PyObject_Call(__pyx_t_37, __pyx_t_39, NULL); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_35);
      __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
      __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;

      /* "gigaword2feature.pyx":1035
 *                         numpy.asarray( lbc_values, dtype = numpy.float32 ), \
 *                         numpy.reshape( lbc_indices, [-1, 2]  ), \
 *                         numpy.asarray( rbc_values, dtype = numpy.float32 ), \             # <<<<<<<<<<<<<<
 *                         numpy.reshape( rbc_indices, [-1, 2]  ), \
 *                         numpy.asarray( label )
 */
      __pyx_t_37 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_37);
      __pyx_t_39 = __Pyx_PyObject_GetAttrStr(__pyx_t_37, __pyx_n_s_asarray); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_39);
      __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
      __pyx_t_37 = __pyx_convert_vector_to_py_float(__pyx_cur_scope->__pyx_v_rbc_values); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_37);
      __pyx_t_34 = PyTuple_New(1); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_34);
      __Pyx_GIVEREF(__pyx_t_37);
      PyTuple_SET_ITEM(__pyx_t_34, 0, __pyx_t_37);
      __pyx_t_37 = 0;
      __pyx_t_37 = PyDict_New(); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_37);
      __pyx_t_36 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __pyx_t_38 = __Pyx_PyObject_GetAttrStr(__pyx_t_36, __pyx_n_s_float32); if (unlikely(!__pyx_t_38)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_38);
      __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
      if (PyDict_SetItem(__pyx_t_37, __pyx_n_s_dtype, __pyx_t_38) < 0) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
      __pyx_t_38 = __Pyx_PyObject_Call(__pyx_t_39, __pyx_t_34, __pyx_t_37); if (unlikely(!__pyx_t_38)) __PYX_ERR(0, 1035, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_38);
      __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
      __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
      __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;

      /* "gigaword2feature.pyx":1036
 *                         numpy.reshape( lbc_indices, [-1, 2]  ), \
 *                         numpy.asarray( rbc_values, dtype = numpy.float32 ), \
 *                         numpy.reshape( rbc_indices, [-1, 2]  ), \             # <<<<<<<<<<<<<<
 *                         numpy.asarray( label )
 * 
 */
      __pyx_t_34 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_34);
      __pyx_t_39 = __Pyx_PyObject_GetAttrStr(__pyx_t_34, __pyx_n_s_reshape); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_39);
      __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
      __pyx_t_34 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_rbc_indices); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_34);
      __pyx_t_36 = PyList_New(2); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_GIVEREF(__pyx_int_neg_1);
      PyList_SET_ITEM(__pyx_t_36, 0, __pyx_int_neg_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyList_SET_ITEM(__pyx_t_36, 1, __pyx_int_2);
      __pyx_t_40 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_39))) {
        __pyx_t_40 = PyMethod_GET_SELF(__pyx_t_39);
        if (likely(__pyx_t_40)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_39);
          __Pyx_INCREF(__pyx_t_40);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_39, function);
          __pyx_t_8 = 1;
        }
      }
      __pyx_t_41 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_41)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_41);
      if (__pyx_t_40) {
        __Pyx_GIVEREF(__pyx_t_40); PyTuple_SET_ITEM(__pyx_t_41, 0, __pyx_t_40); __pyx_t_40 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_34);
      PyTuple_SET_ITEM(__pyx_t_41, 0+__pyx_t_8, __pyx_t_34);
      __Pyx_GIVEREF(__pyx_t_36);
      PyTuple_SET_ITEM(__pyx_t_41, 1+__pyx_t_8, __pyx_t_36);
      __pyx_t_34 = 0;
      __pyx_t_36 = 0;
      __pyx_t_37 = __Pyx_PyObject_Call(__pyx_t_39, __pyx_t_41, NULL); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1036, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_37);
      __Pyx_DECREF(__pyx_t_41); __pyx_t_41 = 0;
      __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;

      /* "gigaword2feature.pyx":1037
 *                         numpy.asarray( rbc_values, dtype = numpy.float32 ), \
 *                         numpy.reshape( rbc_indices, [-1, 2]  ), \
 *                         numpy.asarray( label )             # <<<<<<<<<<<<<<
 * 
 *                 with nogil:
 */
      __pyx_t_41 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_41)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_41);
      __pyx_t_36 = __Pyx_PyObject_GetAttrStr(__pyx_t_41, __pyx_n_s_asarray); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __Pyx_DECREF(__pyx_t_41); __pyx_t_41 = 0;
      __pyx_t_41 = __pyx_convert_vector_to_py_int(__pyx_cur_scope->__pyx_v_label); if (unlikely(!__pyx_t_41)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_41);
      __pyx_t_34 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_36))) {
        __pyx_t_34 = PyMethod_GET_SELF(__pyx_t_36);
        if (likely(__pyx_t_34)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_36);
          __Pyx_INCREF(__pyx_t_34);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_36, function);
        }
      }
      if (!__pyx_t_34) {
        __pyx_t_39 = __Pyx_PyObject_CallOneArg(__pyx_t_36, __pyx_t_41); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 1037, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_41); __pyx_t_41 = 0;
        __Pyx_GOTREF(__pyx_t_39);
      } else {
        __pyx_t_40 = PyTuple_New(1+1); if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 1037, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_40);
        __Pyx_GIVEREF(__pyx_t_34); PyTuple_SET_ITEM(__pyx_t_40, 0, __pyx_t_34); __pyx_t_34 = NULL;
        __Pyx_GIVEREF(__pyx_t_41);
        PyTuple_SET_ITEM(__pyx_t_40, 0+1, __pyx_t_41);
        __pyx_t_41 = 0;
        __pyx_t_39 = __Pyx_PyObject_Call(__pyx_t_36, __pyx_t_40, NULL); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 1037, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_39);
        __Pyx_DECREF(__pyx_t_40); __pyx_t_40 = 0;
      }
      __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;

      /* "gigaword2feature.pyx":1013
 *                 # print 'i am right before yield statement, cnt = %d' % cnt
 * 
 *                 yield   numpy.asarray( l1_values, dtype = numpy.float32 ),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( r1_values, dtype = numpy.float32 ),\
 *                         numpy.reshape( l1_indices, [-1, 2] ),\
 */
      __pyx_t_36 = PyTuple_New(25); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1013, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_36, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_36, 1, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_36, 2, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_36, 3, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_36, 4, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_22);
      PyTuple_SET_ITEM(__pyx_t_36, 5, __pyx_t_22);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_36, 6, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_36, 7, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_36, 8, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_23);
      PyTuple_SET_ITEM(__pyx_t_36, 9, __pyx_t_23);
      __Pyx_GIVEREF(__pyx_t_27);
      PyTuple_SET_ITEM(__pyx_t_36, 10, __pyx_t_27);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_36, 11, __pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_24);
      PyTuple_SET_ITEM(__pyx_t_36, 12, __pyx_t_24);
      __Pyx_GIVEREF(__pyx_t_28);
      PyTuple_SET_ITEM(__pyx_t_36, 13, __pyx_t_28);
      __Pyx_GIVEREF(__pyx_t_31);
      PyTuple_SET_ITEM(__pyx_t_36, 14, __pyx_t_31);
      __Pyx_GIVEREF(__pyx_t_25);
      PyTuple_SET_ITEM(__pyx_t_36, 15, __pyx_t_25);
      __Pyx_GIVEREF(__pyx_t_26);
      PyTuple_SET_ITEM(__pyx_t_36, 16, __pyx_t_26);
      __Pyx_GIVEREF(__pyx_t_29);
      PyTuple_SET_ITEM(__pyx_t_36, 17, __pyx_t_29);
      __Pyx_GIVEREF(__pyx_t_30);
      PyTuple_SET_ITEM(__pyx_t_36, 18, __pyx_t_30);
      __Pyx_GIVEREF(__pyx_t_33);
      PyTuple_SET_ITEM(__pyx_t_36, 19, __pyx_t_33);
      __Pyx_GIVEREF(__pyx_t_32);
      PyTuple_SET_ITEM(__pyx_t_36, 20, __pyx_t_32);
      __Pyx_GIVEREF(__pyx_t_35);
      PyTuple_SET_ITEM(__pyx_t_36, 21, __pyx_t_35);
      __Pyx_GIVEREF(__pyx_t_38);
      PyTuple_SET_ITEM(__pyx_t_36, 22, __pyx_t_38);
      __Pyx_GIVEREF(__pyx_t_37);
      PyTuple_SET_ITEM(__pyx_t_36, 23, __pyx_t_37);
      __Pyx_GIVEREF(__pyx_t_39);
      PyTuple_SET_ITEM(__pyx_t_36, 24, __pyx_t_39);
      __pyx_t_4 = 0;
      __pyx_t_9 = 0;
      __pyx_t_11 = 0;
      __pyx_t_7 = 0;
      __pyx_t_5 = 0;
      __pyx_t_22 = 0;
      __pyx_t_10 = 0;
      __pyx_t_6 = 0;
      __pyx_t_3 = 0;
      __pyx_t_23 = 0;
      __pyx_t_27 = 0;
      __pyx_t_21 = 0;
      __pyx_t_24 = 0;
      __pyx_t_28 = 0;
      __pyx_t_31 = 0;
      __pyx_t_25 = 0;
      __pyx_t_26 = 0;
      __pyx_t_29 = 0;
      __pyx_t_30 = 0;
      __pyx_t_33 = 0;
      __pyx_t_32 = 0;
      __pyx_t_35 = 0;
      __pyx_t_38 = 0;
      __pyx_t_37 = 0;
      __pyx_t_39 = 0;
      __pyx_r = __pyx_t_36;
      __pyx_t_36 = 0;
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_12;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_13;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L56_resume_from_yield:;
      __pyx_t_12 = __pyx_cur_scope->__pyx_t_0;
      __pyx_t_13 = __pyx_cur_scope->__pyx_t_1;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1013, __pyx_L1_error)

      /* "gigaword2feature.pyx":1039
 *                         numpy.asarray( label )
 * 
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     cnt = 0
 *                     phrase_max_length = 10
 */
      {
          #ifdef WITH_THREAD
          PyThreadState *_save;
          Py_UNBLOCK_THREADS
          #endif
          /*try:*/ {

            /* "gigaword2feature.pyx":1040
 * 
 *                 with nogil:
 *                     cnt = 0             # <<<<<<<<<<<<<<
 *                     phrase_max_length = 10
 * 
 */
            __pyx_cur_scope->__pyx_v_cnt = 0;

            /* "gigaword2feature.pyx":1041
 *                 with nogil:
 *                     cnt = 0
 *                     phrase_max_length = 10             # <<<<<<<<<<<<<<
 * 
 *                     l1_values.clear()
 */
            __pyx_cur_scope->__pyx_v_phrase_max_length = 10;

            /* "gigaword2feature.pyx":1043
 *                     phrase_max_length = 10
 * 
 *                     l1_values.clear()             # <<<<<<<<<<<<<<
 *                     r1_values.clear()
 *                     l1_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_l1_values.clear();

            /* "gigaword2feature.pyx":1044
 * 
 *                     l1_values.clear()
 *                     r1_values.clear()             # <<<<<<<<<<<<<<
 *                     l1_indices.clear()
 *                     r1_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_r1_values.clear();

            /* "gigaword2feature.pyx":1045
 *                     l1_values.clear()
 *                     r1_values.clear()
 *                     l1_indices.clear()             # <<<<<<<<<<<<<<
 *                     r1_indices.clear()
 *                     l2_values.clear()
 */
            __pyx_cur_scope->__pyx_v_l1_indices.clear();

            /* "gigaword2feature.pyx":1046
 *                     r1_values.clear()
 *                     l1_indices.clear()
 *                     r1_indices.clear()             # <<<<<<<<<<<<<<
 *                     l2_values.clear()
 *                     r2_values.clear()
 */
            __pyx_cur_scope->__pyx_v_r1_indices.clear();

            /* "gigaword2feature.pyx":1047
 *                     l1_indices.clear()
 *                     r1_indices.clear()
 *                     l2_values.clear()             # <<<<<<<<<<<<<<
 *                     r2_values.clear()
 *                     l2_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_l2_values.clear();

            /* "gigaword2feature.pyx":1048
 *                     r1_indices.clear()
 *                     l2_values.clear()
 *                     r2_values.clear()             # <<<<<<<<<<<<<<
 *                     l2_indices.clear()
 *                     r2_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_r2_values.clear();

            /* "gigaword2feature.pyx":1049
 *                     l2_values.clear()
 *                     r2_values.clear()
 *                     l2_indices.clear()             # <<<<<<<<<<<<<<
 *                     r2_indices.clear()
 *                     bow1.clear()
 */
            __pyx_cur_scope->__pyx_v_l2_indices.clear();

            /* "gigaword2feature.pyx":1050
 *                     r2_values.clear()
 *                     l2_indices.clear()
 *                     r2_indices.clear()             # <<<<<<<<<<<<<<
 *                     bow1.clear()
 * 
 */
            __pyx_cur_scope->__pyx_v_r2_indices.clear();

            /* "gigaword2feature.pyx":1051
 *                     l2_indices.clear()
 *                     r2_indices.clear()
 *                     bow1.clear()             # <<<<<<<<<<<<<<
 * 
 *                     l3_values.clear()
 */
            __pyx_cur_scope->__pyx_v_bow1.clear();

            /* "gigaword2feature.pyx":1053
 *                     bow1.clear()
 * 
 *                     l3_values.clear()             # <<<<<<<<<<<<<<
 *                     r3_values.clear()
 *                     l3_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_l3_values.clear();

            /* "gigaword2feature.pyx":1054
 * 
 *                     l3_values.clear()
 *                     r3_values.clear()             # <<<<<<<<<<<<<<
 *                     l3_indices.clear()
 *                     r3_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_r3_values.clear();

            /* "gigaword2feature.pyx":1055
 *                     l3_values.clear()
 *                     r3_values.clear()
 *                     l3_indices.clear()             # <<<<<<<<<<<<<<
 *                     r3_indices.clear()
 *                     l4_values.clear()
 */
            __pyx_cur_scope->__pyx_v_l3_indices.clear();

            /* "gigaword2feature.pyx":1056
 *                     r3_values.clear()
 *                     l3_indices.clear()
 *                     r3_indices.clear()             # <<<<<<<<<<<<<<
 *                     l4_values.clear()
 *                     r4_values.clear()
 */
            __pyx_cur_scope->__pyx_v_r3_indices.clear();

            /* "gigaword2feature.pyx":1057
 *                     l3_indices.clear()
 *                     r3_indices.clear()
 *                     l4_values.clear()             # <<<<<<<<<<<<<<
 *                     r4_values.clear()
 *                     l4_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_l4_values.clear();

            /* "gigaword2feature.pyx":1058
 *                     r3_indices.clear()
 *                     l4_values.clear()
 *                     r4_values.clear()             # <<<<<<<<<<<<<<
 *                     l4_indices.clear()
 *                     r4_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_r4_values.clear();

            /* "gigaword2feature.pyx":1059
 *                     l4_values.clear()
 *                     r4_values.clear()
 *                     l4_indices.clear()             # <<<<<<<<<<<<<<
 *                     r4_indices.clear()
 *                     bow2.clear()
 */
            __pyx_cur_scope->__pyx_v_l4_indices.clear();

            /* "gigaword2feature.pyx":1060
 *                     r4_values.clear()
 *                     l4_indices.clear()
 *                     r4_indices.clear()             # <<<<<<<<<<<<<<
 *                     bow2.clear()
 * 
 */
            __pyx_cur_scope->__pyx_v_r4_indices.clear();

            /* "gigaword2feature.pyx":1061
 *                     l4_indices.clear()
 *                     r4_indices.clear()
 *                     bow2.clear()             # <<<<<<<<<<<<<<
 * 
 *                     conv_idx.clear()
 */
            __pyx_cur_scope->__pyx_v_bow2.clear();

            /* "gigaword2feature.pyx":1063
 *                     bow2.clear()
 * 
 *                     conv_idx.clear()             # <<<<<<<<<<<<<<
 *                     label.clear()
 * 
 */
            __pyx_cur_scope->__pyx_v_conv_idx.clear();

            /* "gigaword2feature.pyx":1064
 * 
 *                     conv_idx.clear()
 *                     label.clear()             # <<<<<<<<<<<<<<
 * 
 *                     lbc_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_label.clear();

            /* "gigaword2feature.pyx":1066
 *                     label.clear()
 * 
 *                     lbc_indices.clear()             # <<<<<<<<<<<<<<
 *                     lbc_values.clear()
 *                     rbc_indices.clear()
 */
            __pyx_cur_scope->__pyx_v_lbc_indices.clear();

            /* "gigaword2feature.pyx":1067
 * 
 *                     lbc_indices.clear()
 *                     lbc_values.clear()             # <<<<<<<<<<<<<<
 *                     rbc_indices.clear()
 *                     rbc_values.clear()
 */
            __pyx_cur_scope->__pyx_v_lbc_values.clear();

            /* "gigaword2feature.pyx":1068
 *                     lbc_indices.clear()
 *                     lbc_values.clear()
 *                     rbc_indices.clear()             # <<<<<<<<<<<<<<
 *                     rbc_values.clear()
 * 
 */
            __pyx_cur_scope->__pyx_v_rbc_indices.clear();

            /* "gigaword2feature.pyx":1069
 *                     lbc_values.clear()
 *                     rbc_indices.clear()
 *                     rbc_values.clear()             # <<<<<<<<<<<<<<
 * 
 *                 dense_buffer = numpy.zeros( (n_batch_size, 513 + self.n_label_type),
 */
            __pyx_cur_scope->__pyx_v_rbc_values.clear();
          }

          /* "gigaword2feature.pyx":1039
 *                         numpy.asarray( label )
 * 
 *                 with nogil:             # <<<<<<<<<<<<<<
 *                     cnt = 0
 *                     phrase_max_length = 10
 */
          /*finally:*/ {
            /*normal exit:*/{
              #ifdef WITH_THREAD
              Py_BLOCK_THREADS
              #endif
              goto __pyx_L61;
            }
            __pyx_L61:;
          }
      }

      /* "gigaword2feature.pyx":1071
 *                     rbc_values.clear()
 * 
 *                 dense_buffer = numpy.zeros( (n_batch_size, 513 + self.n_label_type),             # <<<<<<<<<<<<<<
 *                                             dtype = numpy.float32 )
 * 
 */
      __pyx_t_36 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __pyx_t_39 = __Pyx_PyObject_GetAttrStr(__pyx_t_36, __pyx_n_s_zeros); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_39);
      __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
      __pyx_t_36 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_n_batch_size); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __pyx_t_37 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_n_label_type); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_37);
      __pyx_t_38 = __Pyx_PyInt_AddCObj(__pyx_int_513, __pyx_t_37, 0x201, 0); if (unlikely(!__pyx_t_38)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_38);
      __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
      __pyx_t_37 = PyTuple_New(2); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_37);
      __Pyx_GIVEREF(__pyx_t_36);
      PyTuple_SET_ITEM(__pyx_t_37, 0, __pyx_t_36);
      __Pyx_GIVEREF(__pyx_t_38);
      PyTuple_SET_ITEM(__pyx_t_37, 1, __pyx_t_38);
      __pyx_t_36 = 0;
      __pyx_t_38 = 0;
      __pyx_t_38 = PyTuple_New(1); if (unlikely(!__pyx_t_38)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_38);
      __Pyx_GIVEREF(__pyx_t_37);
      PyTuple_SET_ITEM(__pyx_t_38, 0, __pyx_t_37);
      __pyx_t_37 = 0;

      /* "gigaword2feature.pyx":1072
 * 
 *                 dense_buffer = numpy.zeros( (n_batch_size, 513 + self.n_label_type),
 *                                             dtype = numpy.float32 )             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_37 = PyDict_New(); if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 1072, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_37);
      __pyx_t_36 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 1072, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      __pyx_t_35 = __Pyx_PyObject_GetAttrStr(__pyx_t_36, __pyx_n_s_float32); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1072, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_35);
      __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
      if (PyDict_SetItem(__pyx_t_37, __pyx_n_s_dtype, __pyx_t_35) < 0) __PYX_ERR(0, 1072, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_35); __pyx_t_35 = 0;

      /* "gigaword2feature.pyx":1071
 *                     rbc_values.clear()
 * 
 *                 dense_buffer = numpy.zeros( (n_batch_size, 513 + self.n_label_type),             # <<<<<<<<<<<<<<
 *                                             dtype = numpy.float32 )
 * 
 */
      __pyx_t_35 = __Pyx_PyObject_Call(__pyx_t_39, __pyx_t_38, __pyx_t_37); if (unlikely(!__pyx_t_35)) __PYX_ERR(0, 1071, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_35);
      __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
      __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
      __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_dense_buffer);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_dense_buffer, __pyx_t_35);
      __Pyx_GIVEREF(__pyx_t_35);
      __pyx_t_35 = 0;

      /* "gigaword2feature.pyx":1002
 * 
 *             cnt += 1
 *             if cnt % n_batch_size == 0 or (i + 1) == len(candidate):             # <<<<<<<<<<<<<<
 *                 with nogil:
 *                     if feature_choice & 512 > 0:
 */
    }
  }

  /* "gigaword2feature.pyx":785
 * 
 *     @cython.boundscheck(False)
 *     def mini_batch( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_XDECREF(__pyx_t_33);
  __Pyx_XDECREF(__pyx_t_34);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_XDECREF(__pyx_t_37);
  __Pyx_XDECREF(__pyx_t_38);
  __Pyx_XDECREF(__pyx_t_39);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_XDECREF(__pyx_t_41);
  __Pyx_AddTraceback("mini_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_17batch_constructor_9generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":1075
 * 
 * 
 *     def mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_8mini_batch_multi_thread(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_17batch_constructor_7mini_batch_multi_thread[] = "\n        Same as self.mini_batch except that data preparation is done on the background\n        ";
static PyMethodDef __pyx_mdef_16gigaword2feature_17batch_constructor_8mini_batch_multi_thread = {"mini_batch_multi_thread", (PyCFunction)__pyx_pw_16gigaword2feature_17batch_constructor_8mini_batch_multi_thread, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_17batch_constructor_7mini_batch_multi_thread};
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_8mini_batch_multi_thread(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  int __pyx_v_n_batch_size;
  int __pyx_v_shuffle_needed;
  float __pyx_v_overlap_rate;
  float __pyx_v_disjoint_rate;
  int __pyx_v_feature_choice;
  int __pyx_v_replace;
  float __pyx_v_timeout;
  CYTHON_UNUSED int __pyx_v_n_copy;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mini_batch_multi_thread (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_n_batch_size,&__pyx_n_s_shuffle_needed,&__pyx_n_s_overlap_rate,&__pyx_n_s_disjoint_rate,&__pyx_n_s_feature_choice,&__pyx_n_s_replace,&__pyx_n_s_timeout,&__pyx_n_s_n_copy,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_batch_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mini_batch_multi_thread", 0, 2, 9, 1); __PYX_ERR(0, 1075, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shuffle_needed);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_overlap_rate);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_disjoint_rate);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_feature_choice);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_replace);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeout);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_copy);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mini_batch_multi_thread") < 0)) __PYX_ERR(0, 1075, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_n_batch_size = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n_batch_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1075, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_shuffle_needed = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_shuffle_needed == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L3_error)
    } else {

      /* "gigaword2feature.pyx":1076
 * 
 *     def mini_batch_multi_thread( self, int n_batch_size,
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,             # <<<<<<<<<<<<<<
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 *                                  bint replace = False, float timeout = -1, int n_copy = 1  ):
 */
      __pyx_v_shuffle_needed = ((int)((int)1));
    }
    if (values[3]) {
      __pyx_v_overlap_rate = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_overlap_rate == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L3_error)
    } else {
      __pyx_v_overlap_rate = ((float)((double)0.36));
    }
    if (values[4]) {
      __pyx_v_disjoint_rate = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_disjoint_rate == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1077, __pyx_L3_error)
    } else {
      __pyx_v_disjoint_rate = ((float)((double)0.08));
    }
    if (values[5]) {
      __pyx_v_feature_choice = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_feature_choice == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1077, __pyx_L3_error)
    } else {
      __pyx_v_feature_choice = ((int)((int)0xFF));
    }
    if (values[6]) {
      __pyx_v_replace = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_replace == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L3_error)
    } else {

      /* "gigaword2feature.pyx":1078
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 *                                  bint replace = False, float timeout = -1, int n_copy = 1  ):             # <<<<<<<<<<<<<<
 *         """
 *         Same as self.mini_batch except that data preparation is done on the background
 */
      __pyx_v_replace = ((int)((int)0));
    }
    if (values[7]) {
      __pyx_v_timeout = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_timeout == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L3_error)
    } else {
      __pyx_v_timeout = ((float)((float)-1.0));
    }
    if (values[8]) {
      __pyx_v_n_copy = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_n_copy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L3_error)
    } else {
      __pyx_v_n_copy = ((int)((int)1));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mini_batch_multi_thread", 0, 2, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1075, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.mini_batch_multi_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_17batch_constructor_7mini_batch_multi_thread(__pyx_self, __pyx_v_self, __pyx_v_n_batch_size, __pyx_v_shuffle_needed, __pyx_v_overlap_rate, __pyx_v_disjoint_rate, __pyx_v_feature_choice, __pyx_v_replace, __pyx_v_timeout, __pyx_v_n_copy);

  /* "gigaword2feature.pyx":1075
 * 
 * 
 *     def mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_7mini_batch_multi_thread(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, int __pyx_v_n_batch_size, int __pyx_v_shuffle_needed, float __pyx_v_overlap_rate, float __pyx_v_disjoint_rate, int __pyx_v_feature_choice, int __pyx_v_replace, float __pyx_v_timeout, CYTHON_UNUSED int __pyx_v_n_copy) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mini_batch_multi_thread", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread(__pyx_ptype_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_n_batch_size = __pyx_v_n_batch_size;
  __pyx_cur_scope->__pyx_v_shuffle_needed = __pyx_v_shuffle_needed;
  __pyx_cur_scope->__pyx_v_overlap_rate = __pyx_v_overlap_rate;
  __pyx_cur_scope->__pyx_v_disjoint_rate = __pyx_v_disjoint_rate;
  __pyx_cur_scope->__pyx_v_feature_choice = __pyx_v_feature_choice;
  __pyx_cur_scope->__pyx_v_replace = __pyx_v_replace;
  __pyx_cur_scope->__pyx_v_timeout = __pyx_v_timeout;
  __pyx_cur_scope->__pyx_v_n_copy = __pyx_v_n_copy;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_17batch_constructor_9generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_mini_batch_multi_thread, __pyx_n_s_batch_constructor_mini_batch_mul); if (unlikely(!gen)) __PYX_ERR(0, 1075, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.mini_batch_multi_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_17batch_constructor_9generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1075, __pyx_L1_error)

  /* "gigaword2feature.pyx":1082
 *         Same as self.mini_batch except that data preparation is done on the background
 *         """
 *         batch_generator = self.mini_batch( n_batch_size, shuffle_needed,             # <<<<<<<<<<<<<<
 *                                            overlap_rate, disjoint_rate,
 *                                            feature_choice, replace )
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_mini_batch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_n_batch_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_cur_scope->__pyx_v_shuffle_needed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "gigaword2feature.pyx":1083
 *         """
 *         batch_generator = self.mini_batch( n_batch_size, shuffle_needed,
 *                                            overlap_rate, disjoint_rate,             # <<<<<<<<<<<<<<
 *                                            feature_choice, replace )
 *         batch_buffer = Queue( maxsize = 256 )
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_overlap_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_disjoint_rate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "gigaword2feature.pyx":1084
 *         batch_generator = self.mini_batch( n_batch_size, shuffle_needed,
 *                                            overlap_rate, disjoint_rate,
 *                                            feature_choice, replace )             # <<<<<<<<<<<<<<
 *         batch_buffer = Queue( maxsize = 256 )
 *         t = Thread( target = prepare_mini_batch,
 */
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_feature_choice); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_cur_scope->__pyx_v_replace); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_10 = 1;
    }
  }
  __pyx_t_11 = PyTuple_New(6+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  if (__pyx_t_9) {
    __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_11, 3+__pyx_t_10, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_11, 4+__pyx_t_10, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_11, 5+__pyx_t_10, __pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_batch_generator = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":1085
 *                                            overlap_rate, disjoint_rate,
 *                                            feature_choice, replace )
 *         batch_buffer = Queue( maxsize = 256 )             # <<<<<<<<<<<<<<
 *         t = Thread( target = prepare_mini_batch,
 *                     args = ( batch_generator, batch_buffer, timeout if timeout > 0 else None ) )
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Queue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_maxsize, __pyx_int_256) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_cur_scope->__pyx_v_batch_buffer = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "gigaword2feature.pyx":1086
 *                                            feature_choice, replace )
 *         batch_buffer = Queue( maxsize = 256 )
 *         t = Thread( target = prepare_mini_batch,             # <<<<<<<<<<<<<<
 *                     args = ( batch_generator, batch_buffer, timeout if timeout > 0 else None ) )
 *         t.daemon = True
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_Thread); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_prepare_mini_batch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_target, __pyx_t_1) < 0) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":1087
 *         batch_buffer = Queue( maxsize = 256 )
 *         t = Thread( target = prepare_mini_batch,
 *                     args = ( batch_generator, batch_buffer, timeout if timeout > 0 else None ) )             # <<<<<<<<<<<<<<
 *         t.daemon = True
 *         t.start()
 */
  if (((__pyx_cur_scope->__pyx_v_timeout > 0.0) != 0)) {
    __pyx_t_8 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_timeout); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __pyx_t_8;
    __pyx_t_8 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_batch_generator);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_batch_generator);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_cur_scope->__pyx_v_batch_generator);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_batch_buffer);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_batch_buffer);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_cur_scope->__pyx_v_batch_buffer);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_args, __pyx_t_8) < 0) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "gigaword2feature.pyx":1086
 *                                            feature_choice, replace )
 *         batch_buffer = Queue( maxsize = 256 )
 *         t = Thread( target = prepare_mini_batch,             # <<<<<<<<<<<<<<
 *                     args = ( batch_generator, batch_buffer, timeout if timeout > 0 else None ) )
 *         t.daemon = True
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_cur_scope->__pyx_v_t = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "gigaword2feature.pyx":1088
 *         t = Thread( target = prepare_mini_batch,
 *                     args = ( batch_generator, batch_buffer, timeout if timeout > 0 else None ) )
 *         t.daemon = True             # <<<<<<<<<<<<<<
 *         t.start()
 *         while True:
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_t, __pyx_n_s_daemon, Py_True) < 0) __PYX_ERR(0, 1088, __pyx_L1_error)

  /* "gigaword2feature.pyx":1089
 *                     args = ( batch_generator, batch_buffer, timeout if timeout > 0 else None ) )
 *         t.daemon = True
 *         t.start()             # <<<<<<<<<<<<<<
 *         while True:
 *             next_batch = batch_buffer.get( True, timeout if timeout > 0 else None )
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_t, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_11) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1089, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else {
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1089, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "gigaword2feature.pyx":1090
 *         t.daemon = True
 *         t.start()
 *         while True:             # <<<<<<<<<<<<<<
 *             next_batch = batch_buffer.get( True, timeout if timeout > 0 else None )
 *             if next_batch is not None:
 */
  while (1) {

    /* "gigaword2feature.pyx":1091
 *         t.start()
 *         while True:
 *             next_batch = batch_buffer.get( True, timeout if timeout > 0 else None )             # <<<<<<<<<<<<<<
 *             if next_batch is not None:
 *                 yield next_batch
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_batch_buffer, __pyx_n_s_get); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1091, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (((__pyx_cur_scope->__pyx_v_timeout > 0.0) != 0)) {
      __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_timeout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1091, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __pyx_t_1;
      __pyx_t_1 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_11 = Py_None;
    }
    __pyx_t_1 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_10 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1091, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, Py_True);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1091, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_next_batch);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_next_batch, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;

    /* "gigaword2feature.pyx":1092
 *         while True:
 *             next_batch = batch_buffer.get( True, timeout if timeout > 0 else None )
 *             if next_batch is not None:             # <<<<<<<<<<<<<<
 *                 yield next_batch
 *             else:
 */
    __pyx_t_12 = (__pyx_cur_scope->__pyx_v_next_batch != Py_None);
    __pyx_t_13 = (__pyx_t_12 != 0);
    if (__pyx_t_13) {

      /* "gigaword2feature.pyx":1093
 *             next_batch = batch_buffer.get( True, timeout if timeout > 0 else None )
 *             if next_batch is not None:
 *                 yield next_batch             # <<<<<<<<<<<<<<
 *             else:
 *                 break
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_next_batch);
      __pyx_r = __pyx_cur_scope->__pyx_v_next_batch;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1093, __pyx_L1_error)

      /* "gigaword2feature.pyx":1092
 *         while True:
 *             next_batch = batch_buffer.get( True, timeout if timeout > 0 else None )
 *             if next_batch is not None:             # <<<<<<<<<<<<<<
 *                 yield next_batch
 *             else:
 */
      goto __pyx_L6;
    }

    /* "gigaword2feature.pyx":1095
 *                 yield next_batch
 *             else:
 *                 break             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      goto __pyx_L5_break;
    }
    __pyx_L6:;
  }
  __pyx_L5_break:;

  /* "gigaword2feature.pyx":1075
 * 
 * 
 *     def mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("mini_batch_multi_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_17batch_constructor_12generator5(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":1098
 * 
 * 
 *     def infinite_mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_11infinite_mini_batch_multi_thread(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_17batch_constructor_10infinite_mini_batch_multi_thread[] = "\n        Same as self.mini_batch_multi_thread except that sampling is done infinitely.\n        ";
static PyMethodDef __pyx_mdef_16gigaword2feature_17batch_constructor_11infinite_mini_batch_multi_thread = {"infinite_mini_batch_multi_thread", (PyCFunction)__pyx_pw_16gigaword2feature_17batch_constructor_11infinite_mini_batch_multi_thread, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_17batch_constructor_10infinite_mini_batch_multi_thread};
static PyObject *__pyx_pw_16gigaword2feature_17batch_constructor_11infinite_mini_batch_multi_thread(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  int __pyx_v_n_batch_size;
  int __pyx_v_shuffle_needed;
  float __pyx_v_overlap_rate;
  float __pyx_v_disjoint_rate;
  int __pyx_v_feature_choice;
  int __pyx_v_replace;
  float __pyx_v_timeout;
  int __pyx_v_n_copy;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("infinite_mini_batch_multi_thread (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_n_batch_size,&__pyx_n_s_shuffle_needed,&__pyx_n_s_overlap_rate,&__pyx_n_s_disjoint_rate,&__pyx_n_s_feature_choice,&__pyx_n_s_replace,&__pyx_n_s_timeout,&__pyx_n_s_n_copy,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_batch_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("infinite_mini_batch_multi_thread", 0, 2, 9, 1); __PYX_ERR(0, 1098, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shuffle_needed);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_overlap_rate);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_disjoint_rate);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_feature_choice);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_replace);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_timeout);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_copy);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "infinite_mini_batch_multi_thread") < 0)) __PYX_ERR(0, 1098, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_n_batch_size = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n_batch_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1098, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_shuffle_needed = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_shuffle_needed == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1099, __pyx_L3_error)
    } else {

      /* "gigaword2feature.pyx":1099
 * 
 *     def infinite_mini_batch_multi_thread( self, int n_batch_size,
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,             # <<<<<<<<<<<<<<
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 *                                           bint replace = True, float timeout = -1, int n_copy = 10  ):
 */
      __pyx_v_shuffle_needed = ((int)((int)1));
    }
    if (values[3]) {
      __pyx_v_overlap_rate = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_overlap_rate == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1099, __pyx_L3_error)
    } else {
      __pyx_v_overlap_rate = ((float)((double)0.36));
    }
    if (values[4]) {
      __pyx_v_disjoint_rate = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_disjoint_rate == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L3_error)
    } else {
      __pyx_v_disjoint_rate = ((float)((double)0.08));
    }
    if (values[5]) {
      __pyx_v_feature_choice = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_feature_choice == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L3_error)
    } else {
      __pyx_v_feature_choice = ((int)((int)0xFF));
    }
    if (values[6]) {
      __pyx_v_replace = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_replace == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1101, __pyx_L3_error)
    } else {

      /* "gigaword2feature.pyx":1101
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 *                                           bint replace = True, float timeout = -1, int n_copy = 10  ):             # <<<<<<<<<<<<<<
 *         """
 *         Same as self.mini_batch_multi_thread except that sampling is done infinitely.
 */
      __pyx_v_replace = ((int)((int)1));
    }
    if (values[7]) {
      __pyx_v_timeout = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_timeout == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1101, __pyx_L3_error)
    } else {
      __pyx_v_timeout = ((float)((float)-1.0));
    }
    if (values[8]) {
      __pyx_v_n_copy = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_n_copy == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1101, __pyx_L3_error)
    } else {
      __pyx_v_n_copy = ((int)((int)10));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("infinite_mini_batch_multi_thread", 0, 2, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1098, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.infinite_mini_batch_multi_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_17batch_constructor_10infinite_mini_batch_multi_thread(__pyx_self, __pyx_v_self, __pyx_v_n_batch_size, __pyx_v_shuffle_needed, __pyx_v_overlap_rate, __pyx_v_disjoint_rate, __pyx_v_feature_choice, __pyx_v_replace, __pyx_v_timeout, __pyx_v_n_copy);

  /* "gigaword2feature.pyx":1098
 * 
 * 
 *     def infinite_mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_17batch_constructor_10infinite_mini_batch_multi_thread(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, int __pyx_v_n_batch_size, int __pyx_v_shuffle_needed, float __pyx_v_overlap_rate, float __pyx_v_disjoint_rate, int __pyx_v_feature_choice, int __pyx_v_replace, float __pyx_v_timeout, int __pyx_v_n_copy) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("infinite_mini_batch_multi_thread", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread(__pyx_ptype_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_n_batch_size = __pyx_v_n_batch_size;
  __pyx_cur_scope->__pyx_v_shuffle_needed = __pyx_v_shuffle_needed;
  __pyx_cur_scope->__pyx_v_overlap_rate = __pyx_v_overlap_rate;
  __pyx_cur_scope->__pyx_v_disjoint_rate = __pyx_v_disjoint_rate;
  __pyx_cur_scope->__pyx_v_feature_choice = __pyx_v_feature_choice;
  __pyx_cur_scope->__pyx_v_replace = __pyx_v_replace;
  __pyx_cur_scope->__pyx_v_timeout = __pyx_v_timeout;
  __pyx_cur_scope->__pyx_v_n_copy = __pyx_v_n_copy;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_17batch_constructor_12generator5, (PyObject *) __pyx_cur_scope, __pyx_n_s_infinite_mini_batch_multi_thread, __pyx_n_s_batch_constructor_infinite_mini); if (unlikely(!gen)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.batch_constructor.infinite_mini_batch_multi_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_17batch_constructor_12generator5(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L9_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1098, __pyx_L1_error)

  /* "gigaword2feature.pyx":1105
 *         Same as self.mini_batch_multi_thread except that sampling is done infinitely.
 *         """
 *         while True:             # <<<<<<<<<<<<<<
 *             for next_batch in self.mini_batch_multi_thread( n_batch_size, shuffle_needed,
 *                                                             overlap_rate, disjoint_rate,
 */
  while (1) {

    /* "gigaword2feature.pyx":1106
 *         """
 *         while True:
 *             for next_batch in self.mini_batch_multi_thread( n_batch_size, shuffle_needed,             # <<<<<<<<<<<<<<
 *                                                             overlap_rate, disjoint_rate,
 *                                                             feature_choice, replace, timeout, n_copy ):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_mini_batch_multi_thread); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_n_batch_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_cur_scope->__pyx_v_shuffle_needed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "gigaword2feature.pyx":1107
 *         while True:
 *             for next_batch in self.mini_batch_multi_thread( n_batch_size, shuffle_needed,
 *                                                             overlap_rate, disjoint_rate,             # <<<<<<<<<<<<<<
 *                                                             feature_choice, replace, timeout, n_copy ):
 *                 if next_batch[-1].shape[0] == n_batch_size:
 */
    __pyx_t_5 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_overlap_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_disjoint_rate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "gigaword2feature.pyx":1108
 *             for next_batch in self.mini_batch_multi_thread( n_batch_size, shuffle_needed,
 *                                                             overlap_rate, disjoint_rate,
 *                                                             feature_choice, replace, timeout, n_copy ):             # <<<<<<<<<<<<<<
 *                 if next_batch[-1].shape[0] == n_batch_size:
 *                     yield next_batch
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_feature_choice); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_cur_scope->__pyx_v_replace); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_timeout); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_n_copy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_12 = 1;
      }
    }
    __pyx_t_13 = PyTuple_New(8+__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_12, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_12, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_12, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_12, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_13, 4+__pyx_t_12, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_13, 5+__pyx_t_12, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_13, 6+__pyx_t_12, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_13, 7+__pyx_t_12, __pyx_t_10);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "gigaword2feature.pyx":1106
 *         """
 *         while True:
 *             for next_batch in self.mini_batch_multi_thread( n_batch_size, shuffle_needed,             # <<<<<<<<<<<<<<
 *                                                             overlap_rate, disjoint_rate,
 *                                                             feature_choice, replace, timeout, n_copy ):
 */
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_12 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1106, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1106, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1106, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_14(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1106, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_next_batch);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_next_batch, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "gigaword2feature.pyx":1109
 *                                                             overlap_rate, disjoint_rate,
 *                                                             feature_choice, replace, timeout, n_copy ):
 *                 if next_batch[-1].shape[0] == n_batch_size:             # <<<<<<<<<<<<<<
 *                     yield next_batch
 * 
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_next_batch, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_shape); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_13, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_n_batch_size); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_10 = PyObject_RichCompare(__pyx_t_1, __pyx_t_13, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_15) {

        /* "gigaword2feature.pyx":1110
 *                                                             feature_choice, replace, timeout, n_copy ):
 *                 if next_batch[-1].shape[0] == n_batch_size:
 *                     yield next_batch             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_next_batch);
        __pyx_r = __pyx_cur_scope->__pyx_v_next_batch;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_12;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_14;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L9_resume_from_yield:;
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_12 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_14 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1110, __pyx_L1_error)

        /* "gigaword2feature.pyx":1109
 *                                                             overlap_rate, disjoint_rate,
 *                                                             feature_choice, replace, timeout, n_copy ):
 *                 if next_batch[-1].shape[0] == n_batch_size:             # <<<<<<<<<<<<<<
 *                     yield next_batch
 * 
 */
      }

      /* "gigaword2feature.pyx":1106
 *         """
 *         while True:
 *             for next_batch in self.mini_batch_multi_thread( n_batch_size, shuffle_needed,             # <<<<<<<<<<<<<<
 *                                                             overlap_rate, disjoint_rate,
 *                                                             feature_choice, replace, timeout, n_copy ):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "gigaword2feature.pyx":1098
 * 
 * 
 *     def infinite_mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("infinite_mini_batch_multi_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_15generator6(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":1120
 * 
 * 
 * def SampleGenerator( filename ):             # <<<<<<<<<<<<<<
 *     ner2idx = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3, 'O' : 4 }
 *     sentence, beginOfNer, endOfNer, nerCls = [], [], [], []
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_14SampleGenerator(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_14SampleGenerator = {"SampleGenerator", (PyCFunction)__pyx_pw_16gigaword2feature_14SampleGenerator, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_14SampleGenerator(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SampleGenerator (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_13SampleGenerator(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_13SampleGenerator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SampleGenerator", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_15_SampleGenerator(__pyx_ptype_16gigaword2feature___pyx_scope_struct_15_SampleGenerator, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_filename = __pyx_v_filename;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_15generator6, (PyObject *) __pyx_cur_scope, __pyx_n_s_SampleGenerator, __pyx_n_s_SampleGenerator); if (unlikely(!gen)) __PYX_ERR(0, 1120, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.SampleGenerator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_15generator6(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L12_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1120, __pyx_L1_error)

  /* "gigaword2feature.pyx":1121
 * 
 * def SampleGenerator( filename ):
 *     ner2idx = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3, 'O' : 4 }             # <<<<<<<<<<<<<<
 *     sentence, beginOfNer, endOfNer, nerCls = [], [], [], []
 *     lastNer = 4
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PER, __pyx_int_0) < 0) __PYX_ERR(0, 1121, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LOC, __pyx_int_1) < 0) __PYX_ERR(0, 1121, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ORG, __pyx_int_2) < 0) __PYX_ERR(0, 1121, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MISC, __pyx_int_3) < 0) __PYX_ERR(0, 1121, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_ner2idx = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":1122
 * def SampleGenerator( filename ):
 *     ner2idx = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3, 'O' : 4 }
 *     sentence, beginOfNer, endOfNer, nerCls = [], [], [], []             # <<<<<<<<<<<<<<
 *     lastNer = 4
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_sentence = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_beginOfNer = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_endOfNer = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_nerCls = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":1123
 *     ner2idx = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3, 'O' : 4 }
 *     sentence, beginOfNer, endOfNer, nerCls = [], [], [], []
 *     lastNer = 4             # <<<<<<<<<<<<<<
 * 
 *     corpus = open( filename, 'rb' )
 */
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  __pyx_cur_scope->__pyx_v_lastNer = __pyx_int_4;

  /* "gigaword2feature.pyx":1125
 *     lastNer = 4
 * 
 *     corpus = open( filename, 'rb' )             # <<<<<<<<<<<<<<
 * 
 *     for line in corpus:
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_filename);
  __Pyx_INCREF(__pyx_n_s_rb);
  __Pyx_GIVEREF(__pyx_n_s_rb);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_rb);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_corpus = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1127
 *     corpus = open( filename, 'rb' )
 * 
 *     for line in corpus:             # <<<<<<<<<<<<<<
 *         line = line.strip()
 * 
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_corpus)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_corpus)) {
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_corpus; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_corpus); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1127, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1127, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1127, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1127, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1127, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1127, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":1128
 * 
 *     for line in corpus:
 *         line = line.strip()             # <<<<<<<<<<<<<<
 * 
 *         tokens = line.split()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_line);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":1130
 *         line = line.strip()
 * 
 *         tokens = line.split()             # <<<<<<<<<<<<<<
 * 
 *         if len(tokens) == 4:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (__pyx_t_1) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1130, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1130, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tokens);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tokens, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":1132
 *         tokens = line.split()
 * 
 *         if len(tokens) == 4:             # <<<<<<<<<<<<<<
 *             word, ner = tokens[0], ner2idx[ tokens[-1].split('-')[-1] ]
 *             if ner != lastNer:
 */
    __pyx_t_7 = PyObject_Length(__pyx_cur_scope->__pyx_v_tokens); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1132, __pyx_L1_error)
    __pyx_t_8 = ((__pyx_t_7 == 4) != 0);
    if (__pyx_t_8) {

      /* "gigaword2feature.pyx":1133
 * 
 *         if len(tokens) == 4:
 *             word, ner = tokens[0], ner2idx[ tokens[-1].split('-')[-1] ]             # <<<<<<<<<<<<<<
 *             if ner != lastNer:
 *                 if lastNer != 4:
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tokens, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tokens, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_ner2idx, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_word);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_word, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ner);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ner, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "gigaword2feature.pyx":1134
 *         if len(tokens) == 4:
 *             word, ner = tokens[0], ner2idx[ tokens[-1].split('-')[-1] ]
 *             if ner != lastNer:             # <<<<<<<<<<<<<<
 *                 if lastNer != 4:
 *                     endOfNer.append( len(sentence) )
 */
      __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ner, __pyx_cur_scope->__pyx_v_lastNer, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1134, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_8) {

        /* "gigaword2feature.pyx":1135
 *             word, ner = tokens[0], ner2idx[ tokens[-1].split('-')[-1] ]
 *             if ner != lastNer:
 *                 if lastNer != 4:             # <<<<<<<<<<<<<<
 *                     endOfNer.append( len(sentence) )
 *                 if ner != 4:
 */
        __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_lastNer, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1135, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {

          /* "gigaword2feature.pyx":1136
 *             if ner != lastNer:
 *                 if lastNer != 4:
 *                     endOfNer.append( len(sentence) )             # <<<<<<<<<<<<<<
 *                 if ner != 4:
 *                     beginOfNer.append( len(sentence) )
 */
          __pyx_t_7 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1136, __pyx_L1_error)
          __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1136, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_endOfNer, __pyx_t_2); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1136, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "gigaword2feature.pyx":1135
 *             word, ner = tokens[0], ner2idx[ tokens[-1].split('-')[-1] ]
 *             if ner != lastNer:
 *                 if lastNer != 4:             # <<<<<<<<<<<<<<
 *                     endOfNer.append( len(sentence) )
 *                 if ner != 4:
 */
        }

        /* "gigaword2feature.pyx":1137
 *                 if lastNer != 4:
 *                     endOfNer.append( len(sentence) )
 *                 if ner != 4:             # <<<<<<<<<<<<<<
 *                     beginOfNer.append( len(sentence) )
 *                     nerCls.append( ner )
 */
        __pyx_t_2 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ner, __pyx_int_4, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1137, __pyx_L1_error)
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1137, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {

          /* "gigaword2feature.pyx":1138
 *                     endOfNer.append( len(sentence) )
 *                 if ner != 4:
 *                     beginOfNer.append( len(sentence) )             # <<<<<<<<<<<<<<
 *                     nerCls.append( ner )
 *             lastNer = ner
 */
          __pyx_t_7 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1138, __pyx_L1_error)
          __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1138, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_beginOfNer, __pyx_t_2); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1138, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "gigaword2feature.pyx":1139
 *                 if ner != 4:
 *                     beginOfNer.append( len(sentence) )
 *                     nerCls.append( ner )             # <<<<<<<<<<<<<<
 *             lastNer = ner
 *             sentence.append( word )
 */
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_nerCls, __pyx_cur_scope->__pyx_v_ner); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1139, __pyx_L1_error)

          /* "gigaword2feature.pyx":1137
 *                 if lastNer != 4:
 *                     endOfNer.append( len(sentence) )
 *                 if ner != 4:             # <<<<<<<<<<<<<<
 *                     beginOfNer.append( len(sentence) )
 *                     nerCls.append( ner )
 */
        }

        /* "gigaword2feature.pyx":1134
 *         if len(tokens) == 4:
 *             word, ner = tokens[0], ner2idx[ tokens[-1].split('-')[-1] ]
 *             if ner != lastNer:             # <<<<<<<<<<<<<<
 *                 if lastNer != 4:
 *                     endOfNer.append( len(sentence) )
 */
      }

      /* "gigaword2feature.pyx":1140
 *                     beginOfNer.append( len(sentence) )
 *                     nerCls.append( ner )
 *             lastNer = ner             # <<<<<<<<<<<<<<
 *             sentence.append( word )
 *         else:
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner);
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_lastNer);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_lastNer, __pyx_cur_scope->__pyx_v_ner);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner);

      /* "gigaword2feature.pyx":1141
 *                     nerCls.append( ner )
 *             lastNer = ner
 *             sentence.append( word )             # <<<<<<<<<<<<<<
 *         else:
 *             if len(sentence) > 0:
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_word); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1141, __pyx_L1_error)

      /* "gigaword2feature.pyx":1132
 *         tokens = line.split()
 * 
 *         if len(tokens) == 4:             # <<<<<<<<<<<<<<
 *             word, ner = tokens[0], ner2idx[ tokens[-1].split('-')[-1] ]
 *             if ner != lastNer:
 */
      goto __pyx_L6;
    }

    /* "gigaword2feature.pyx":1143
 *             sentence.append( word )
 *         else:
 *             if len(sentence) > 0:             # <<<<<<<<<<<<<<
 *                 if len(endOfNer) < len(beginOfNer):
 *                     endOfNer.append( len(sentence) )
 */
    /*else*/ {
      __pyx_t_7 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1143, __pyx_L1_error)
      __pyx_t_8 = ((__pyx_t_7 > 0) != 0);
      if (__pyx_t_8) {

        /* "gigaword2feature.pyx":1144
 *         else:
 *             if len(sentence) > 0:
 *                 if len(endOfNer) < len(beginOfNer):             # <<<<<<<<<<<<<<
 *                     endOfNer.append( len(sentence) )
 *                 assert len(beginOfNer) == len(endOfNer)
 */
        __pyx_t_7 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_endOfNer); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1144, __pyx_L1_error)
        __pyx_t_10 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_beginOfNer); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 1144, __pyx_L1_error)
        __pyx_t_8 = ((__pyx_t_7 < __pyx_t_10) != 0);
        if (__pyx_t_8) {

          /* "gigaword2feature.pyx":1145
 *             if len(sentence) > 0:
 *                 if len(endOfNer) < len(beginOfNer):
 *                     endOfNer.append( len(sentence) )             # <<<<<<<<<<<<<<
 *                 assert len(beginOfNer) == len(endOfNer)
 * 
 */
          __pyx_t_10 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_sentence); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 1145, __pyx_L1_error)
          __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1145, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_endOfNer, __pyx_t_2); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1145, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "gigaword2feature.pyx":1144
 *         else:
 *             if len(sentence) > 0:
 *                 if len(endOfNer) < len(beginOfNer):             # <<<<<<<<<<<<<<
 *                     endOfNer.append( len(sentence) )
 *                 assert len(beginOfNer) == len(endOfNer)
 */
        }

        /* "gigaword2feature.pyx":1146
 *                 if len(endOfNer) < len(beginOfNer):
 *                     endOfNer.append( len(sentence) )
 *                 assert len(beginOfNer) == len(endOfNer)             # <<<<<<<<<<<<<<
 * 
 *                 yield sentence, beginOfNer, endOfNer, nerCls
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          __pyx_t_10 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_beginOfNer); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 1146, __pyx_L1_error)
          __pyx_t_7 = PyList_GET_SIZE(__pyx_cur_scope->__pyx_v_endOfNer); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1146, __pyx_L1_error)
          if (unlikely(!((__pyx_t_10 == __pyx_t_7) != 0))) {
            PyErr_SetNone(PyExc_AssertionError);
            __PYX_ERR(0, 1146, __pyx_L1_error)
          }
        }
        #endif

        /* "gigaword2feature.pyx":1148
 *                 assert len(beginOfNer) == len(endOfNer)
 * 
 *                 yield sentence, beginOfNer, endOfNer, nerCls             # <<<<<<<<<<<<<<
 * 
 *                 sentence, beginOfNer, endOfNer, nerCls = [], [], [], []
 */
        __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1148, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentence);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_sentence);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_beginOfNer);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_beginOfNer);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_beginOfNer);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_endOfNer);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_endOfNer);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_cur_scope->__pyx_v_endOfNer);
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_nerCls);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_nerCls);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_cur_scope->__pyx_v_nerCls);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        /* return from generator, yielding value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L12_resume_from_yield:;
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
        __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1148, __pyx_L1_error)

        /* "gigaword2feature.pyx":1150
 *                 yield sentence, beginOfNer, endOfNer, nerCls
 * 
 *                 sentence, beginOfNer, endOfNer, nerCls = [], [], [], []             # <<<<<<<<<<<<<<
 *                 lastNer = 4
 * 
 */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_sentence);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_sentence, ((PyObject*)__pyx_t_2));
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_beginOfNer);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_beginOfNer, ((PyObject*)__pyx_t_4));
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_endOfNer);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_endOfNer, ((PyObject*)__pyx_t_1));
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_nerCls);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_nerCls, ((PyObject*)__pyx_t_11));
        __Pyx_GIVEREF(__pyx_t_11);
        __pyx_t_11 = 0;

        /* "gigaword2feature.pyx":1151
 * 
 *                 sentence, beginOfNer, endOfNer, nerCls = [], [], [], []
 *                 lastNer = 4             # <<<<<<<<<<<<<<
 * 
 *     corpus.close()
 */
        __Pyx_INCREF(__pyx_int_4);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_lastNer);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_lastNer, __pyx_int_4);
        __Pyx_GIVEREF(__pyx_int_4);

        /* "gigaword2feature.pyx":1143
 *             sentence.append( word )
 *         else:
 *             if len(sentence) > 0:             # <<<<<<<<<<<<<<
 *                 if len(endOfNer) < len(beginOfNer):
 *                     endOfNer.append( len(sentence) )
 */
      }
    }
    __pyx_L6:;

    /* "gigaword2feature.pyx":1127
 *     corpus = open( filename, 'rb' )
 * 
 *     for line in corpus:             # <<<<<<<<<<<<<<
 *         line = line.strip()
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1153
 *                 lastNer = 4
 * 
 *     corpus.close()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_corpus, __pyx_n_s_close); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1120
 * 
 * 
 * def SampleGenerator( filename ):             # <<<<<<<<<<<<<<
 *     ner2idx = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3, 'O' : 4 }
 *     sentence, beginOfNer, endOfNer, nerCls = [], [], [], []
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("SampleGenerator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_18generator7(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":1159
 * # def PredictionParser( dataset, result, ner_max_length,
 * #                       reinterpret_threshold = 0, n_label_type = 4 ):
 * def PredictionParser( sample_generator, result, ner_max_length,             # <<<<<<<<<<<<<<
 *                       reinterpret_threshold = 0, n_label_type = 4 ):
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_17PredictionParser(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_16PredictionParser[] = "\n    This function is modified from some legancy code. 'table' was designed for \n    visualization. \n\n    Parameters\n    ----------\n        sample_generator : iterable\n            Likes of CoNLL2003 and KBP2015\n\n        result : str\n            path to a filename where each line is predicted class (in integer) \n            followed by the probabilities of each class\n\n        ner_max_length: int\n            maximum length of mention\n\n        reinterpret_threshold: float\n            NOT USED ANYMORE\n\n        n_label_type : int\n            numer of memtion types\n\n    Yields\n    ------\n        s : list of str\n            words in a sentence\n\n        table : numpy.ndarray\n            table[i][j - 1] is a pair of string represnetation of predicted class\n            and the corresponding probability of s[i][j]\n\n        estimate : tuple\n            (begin,end,class) triples\n\n        actual : tuple\n            (begin,end,class) triples\n    ";
static PyMethodDef __pyx_mdef_16gigaword2feature_17PredictionParser = {"PredictionParser", (PyCFunction)__pyx_pw_16gigaword2feature_17PredictionParser, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_16PredictionParser};
static PyObject *__pyx_pw_16gigaword2feature_17PredictionParser(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sample_generator = 0;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_ner_max_length = 0;
  PyObject *__pyx_v_reinterpret_threshold = 0;
  PyObject *__pyx_v_n_label_type = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PredictionParser (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sample_generator,&__pyx_n_s_result,&__pyx_n_s_ner_max_length,&__pyx_n_s_reinterpret_threshold,&__pyx_n_s_n_label_type,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_4);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sample_generator)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_result)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PredictionParser", 0, 3, 5, 1); __PYX_ERR(0, 1159, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ner_max_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PredictionParser", 0, 3, 5, 2); __PYX_ERR(0, 1159, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reinterpret_threshold);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_label_type);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "PredictionParser") < 0)) __PYX_ERR(0, 1159, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sample_generator = values[0];
    __pyx_v_result = values[1];
    __pyx_v_ner_max_length = values[2];
    __pyx_v_reinterpret_threshold = values[3];
    __pyx_v_n_label_type = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PredictionParser", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.PredictionParser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_16PredictionParser(__pyx_self, __pyx_v_sample_generator, __pyx_v_result, __pyx_v_ner_max_length, __pyx_v_reinterpret_threshold, __pyx_v_n_label_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_16PredictionParser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sample_generator, PyObject *__pyx_v_result, PyObject *__pyx_v_ner_max_length, PyObject *__pyx_v_reinterpret_threshold, PyObject *__pyx_v_n_label_type) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PredictionParser", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_16_PredictionParser(__pyx_ptype_16gigaword2feature___pyx_scope_struct_16_PredictionParser, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_sample_generator = __pyx_v_sample_generator;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sample_generator);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sample_generator);
  __pyx_cur_scope->__pyx_v_result = __pyx_v_result;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_result);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_result);
  __pyx_cur_scope->__pyx_v_ner_max_length = __pyx_v_ner_max_length;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ner_max_length);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ner_max_length);
  __pyx_cur_scope->__pyx_v_reinterpret_threshold = __pyx_v_reinterpret_threshold;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_reinterpret_threshold);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_reinterpret_threshold);
  __pyx_cur_scope->__pyx_v_n_label_type = __pyx_v_n_label_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n_label_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_n_label_type);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_18generator7, (PyObject *) __pyx_cur_scope, __pyx_n_s_PredictionParser, __pyx_n_s_PredictionParser); if (unlikely(!gen)) __PYX_ERR(0, 1159, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.PredictionParser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_18generator7(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L19_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1159, __pyx_L1_error)

  /* "gigaword2feature.pyx":1198
 *             (begin,end,class) triples
 *     """
 *     if n_label_type == 4:             # <<<<<<<<<<<<<<
 *         idx2ner = [ 'PER', 'LOC', 'ORG', 'MISC', 'O' ]
 *     else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_cur_scope->__pyx_v_n_label_type, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gigaword2feature.pyx":1199
 *     """
 *     if n_label_type == 4:
 *         idx2ner = [ 'PER', 'LOC', 'ORG', 'MISC', 'O' ]             # <<<<<<<<<<<<<<
 *     else:
 *         # idx2ner = [ 'PER_NAM', 'PER_NOM', 'ORG_NAM', 'GPE_NAM', 'LOC_NAM', 'FAC_NAM', 'TTL_NAM', 'O'  ]
 */
    __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PER);
    __Pyx_GIVEREF(__pyx_n_s_PER);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PER);
    __Pyx_INCREF(__pyx_n_s_LOC);
    __Pyx_GIVEREF(__pyx_n_s_LOC);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_LOC);
    __Pyx_INCREF(__pyx_n_s_ORG);
    __Pyx_GIVEREF(__pyx_n_s_ORG);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_ORG);
    __Pyx_INCREF(__pyx_n_s_MISC);
    __Pyx_GIVEREF(__pyx_n_s_MISC);
    PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_MISC);
    __Pyx_INCREF(__pyx_n_s_O);
    __Pyx_GIVEREF(__pyx_n_s_O);
    PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_O);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_idx2ner = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":1198
 *             (begin,end,class) triples
 *     """
 *     if n_label_type == 4:             # <<<<<<<<<<<<<<
 *         idx2ner = [ 'PER', 'LOC', 'ORG', 'MISC', 'O' ]
 *     else:
 */
    goto __pyx_L4;
  }

  /* "gigaword2feature.pyx":1202
 *     else:
 *         # idx2ner = [ 'PER_NAM', 'PER_NOM', 'ORG_NAM', 'GPE_NAM', 'LOC_NAM', 'FAC_NAM', 'TTL_NAM', 'O'  ]
 *         idx2ner = [ 'PER_NAM', 'ORG_NAM', 'GPE_NAM', 'LOC_NAM', 'FAC_NAM',             # <<<<<<<<<<<<<<
 *                     'PER_NOM', 'ORG_NOM', 'GPE_NOM', 'LOC_NOM', 'FAC_NOM',
 *                     'O' ]
 */
  /*else*/ {
    __pyx_t_1 = PyList_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PER_NAM);
    __Pyx_GIVEREF(__pyx_n_s_PER_NAM);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PER_NAM);
    __Pyx_INCREF(__pyx_n_s_ORG_NAM);
    __Pyx_GIVEREF(__pyx_n_s_ORG_NAM);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ORG_NAM);
    __Pyx_INCREF(__pyx_n_s_GPE_NAM);
    __Pyx_GIVEREF(__pyx_n_s_GPE_NAM);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_GPE_NAM);
    __Pyx_INCREF(__pyx_n_s_LOC_NAM);
    __Pyx_GIVEREF(__pyx_n_s_LOC_NAM);
    PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_LOC_NAM);
    __Pyx_INCREF(__pyx_n_s_FAC_NAM);
    __Pyx_GIVEREF(__pyx_n_s_FAC_NAM);
    PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_FAC_NAM);
    __Pyx_INCREF(__pyx_n_s_PER_NOM);
    __Pyx_GIVEREF(__pyx_n_s_PER_NOM);
    PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_PER_NOM);
    __Pyx_INCREF(__pyx_n_s_ORG_NOM);
    __Pyx_GIVEREF(__pyx_n_s_ORG_NOM);
    PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_ORG_NOM);
    __Pyx_INCREF(__pyx_n_s_GPE_NOM);
    __Pyx_GIVEREF(__pyx_n_s_GPE_NOM);
    PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_GPE_NOM);
    __Pyx_INCREF(__pyx_n_s_LOC_NOM);
    __Pyx_GIVEREF(__pyx_n_s_LOC_NOM);
    PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_LOC_NOM);
    __Pyx_INCREF(__pyx_n_s_FAC_NOM);
    __Pyx_GIVEREF(__pyx_n_s_FAC_NOM);
    PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_FAC_NOM);
    __Pyx_INCREF(__pyx_n_s_O);
    __Pyx_GIVEREF(__pyx_n_s_O);
    PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_O);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_idx2ner = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "gigaword2feature.pyx":1207
 * 
 *     # sg = SampleGenerator( dataset )
 *     fp = open( result, 'rb' )             # <<<<<<<<<<<<<<
 *     sg = sample_generator
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_result);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_result);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_result);
  __Pyx_INCREF(__pyx_n_s_rb);
  __Pyx_GIVEREF(__pyx_n_s_rb);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_rb);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_fp = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1208
 *     # sg = SampleGenerator( dataset )
 *     fp = open( result, 'rb' )
 *     sg = sample_generator             # <<<<<<<<<<<<<<
 * 
 *     # @xmb 20160717
 */
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sample_generator);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sample_generator);
  __pyx_cur_scope->__pyx_v_sg = __pyx_cur_scope->__pyx_v_sample_generator;

  /* "gigaword2feature.pyx":1211
 * 
 *     # @xmb 20160717
 *     lines, cnt = fp.readlines(), 0             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_fp, __pyx_n_s_readlines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1211, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_lines = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_cnt = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":1213
 *     lines, cnt = fp.readlines(), 0
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         s, boe, eoe, cls = sg.next()
 *         actual = set( zip(boe, eoe, cls) )
 */
  while (1) {

    /* "gigaword2feature.pyx":1214
 * 
 *     while True:
 *         s, boe, eoe, cls = sg.next()             # <<<<<<<<<<<<<<
 *         actual = set( zip(boe, eoe, cls) )
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_sg, __pyx_n_s_next); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1214, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1214, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 4) < 0) __PYX_ERR(0, 1214, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1214, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_s);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_s, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_boe);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_boe, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_eoe);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_eoe, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_cls);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_cls, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "gigaword2feature.pyx":1215
 *     while True:
 *         s, boe, eoe, cls = sg.next()
 *         actual = set( zip(boe, eoe, cls) )             # <<<<<<<<<<<<<<
 * 
 *         table = numpy.empty((len(s), len(s)), dtype = object)
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_boe);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_boe);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_boe);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_eoe);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_eoe);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_eoe);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_cls);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_cls);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_cur_scope->__pyx_v_cls);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PySet_New(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_actual);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_actual, ((PyObject*)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":1217
 *         actual = set( zip(boe, eoe, cls) )
 * 
 *         table = numpy.empty((len(s), len(s)), dtype = object)             # <<<<<<<<<<<<<<
 *         table[:,:] = None #''
 *         estimate = set()
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = PyObject_Length(__pyx_cur_scope->__pyx_v_s); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyObject_Length(__pyx_cur_scope->__pyx_v_s); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_builtin_object) < 0) __PYX_ERR(0, 1217, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_table);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_table, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":1218
 * 
 *         table = numpy.empty((len(s), len(s)), dtype = object)
 *         table[:,:] = None #''             # <<<<<<<<<<<<<<
 *         estimate = set()
 *         actual = set( zip(boe, eoe, cls) )
 */
    if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_table, __pyx_tuple__57, Py_None) < 0)) __PYX_ERR(0, 1218, __pyx_L1_error)

    /* "gigaword2feature.pyx":1219
 *         table = numpy.empty((len(s), len(s)), dtype = object)
 *         table[:,:] = None #''
 *         estimate = set()             # <<<<<<<<<<<<<<
 *         actual = set( zip(boe, eoe, cls) )
 * 
 */
    __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_estimate);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_estimate, ((PyObject*)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":1220
 *         table[:,:] = None #''
 *         estimate = set()
 *         actual = set( zip(boe, eoe, cls) )             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(len(s)):
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_boe);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_boe);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_boe);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_eoe);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_eoe);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_cur_scope->__pyx_v_eoe);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_cls);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_cls);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_cur_scope->__pyx_v_cls);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_actual);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_actual, ((PyObject*)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":1222
 *         actual = set( zip(boe, eoe, cls) )
 * 
 *         for i in xrange(len(s)):             # <<<<<<<<<<<<<<
 *             for j in xrange(i + 1, len(s) + 1):
 *                 if j - i <= ner_max_length:
 */
    __pyx_t_9 = PyObject_Length(__pyx_cur_scope->__pyx_v_s); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1222, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1222, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1222, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1222, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_10(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1222, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;

      /* "gigaword2feature.pyx":1223
 * 
 *         for i in xrange(len(s)):
 *             for j in xrange(i + 1, len(s) + 1):             # <<<<<<<<<<<<<<
 *                 if j - i <= ner_max_length:
 *                     # @xmb 20160717
 */
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = PyObject_Length(__pyx_cur_scope->__pyx_v_s); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 1223, __pyx_L1_error)
      __pyx_t_5 = PyInt_FromSsize_t((__pyx_t_11 + 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1223, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_12 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1223, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_11); __Pyx_INCREF(__pyx_t_5); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1223, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1223, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_11); __Pyx_INCREF(__pyx_t_5); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 1223, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1223, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_12(__pyx_t_6);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1223, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_j);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_j, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;

        /* "gigaword2feature.pyx":1224
 *         for i in xrange(len(s)):
 *             for j in xrange(i + 1, len(s) + 1):
 *                 if j - i <= ner_max_length:             # <<<<<<<<<<<<<<
 *                     # @xmb 20160717
 *                     # line = fp.readline()
 */
        __pyx_t_5 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_j, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1224, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_cur_scope->__pyx_v_ner_max_length, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1224, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1224, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_2) {

          /* "gigaword2feature.pyx":1227
 *                     # @xmb 20160717
 *                     # line = fp.readline()
 *                     line = lines[cnt]             # <<<<<<<<<<<<<<
 *                     cnt += 1
 * 
 */
          __pyx_t_1 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_lines, __pyx_cur_scope->__pyx_v_cnt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1227, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "gigaword2feature.pyx":1228
 *                     # line = fp.readline()
 *                     line = lines[cnt]
 *                     cnt += 1             # <<<<<<<<<<<<<<
 * 
 *                     tokens = line.strip().split()
 */
          __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_cur_scope->__pyx_v_cnt, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1228, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_cnt);
          __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_cnt, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "gigaword2feature.pyx":1230
 *                     cnt += 1
 * 
 *                     tokens = line.strip().split()             # <<<<<<<<<<<<<<
 *                     predicted_label = int(tokens[1])
 *                     all_prob = numpy.asarray([ numpy.float32(x) for x in tokens[2:] ])
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1230, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_7) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1230, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else {
            __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1230, __pyx_L1_error)
          }
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1230, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_5) {
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
          }
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tokens);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tokens, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "gigaword2feature.pyx":1231
 * 
 *                     tokens = line.strip().split()
 *                     predicted_label = int(tokens[1])             # <<<<<<<<<<<<<<
 *                     all_prob = numpy.asarray([ numpy.float32(x) for x in tokens[2:] ])
 * 
 */
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tokens, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1231, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1231, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_predicted_label);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_predicted_label, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          __pyx_t_3 = 0;

          /* "gigaword2feature.pyx":1232
 *                     tokens = line.strip().split()
 *                     predicted_label = int(tokens[1])
 *                     all_prob = numpy.asarray([ numpy.float32(x) for x in tokens[2:] ])             # <<<<<<<<<<<<<<
 * 
 *                     if predicted_label == n_label_type:
 */
          __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_cur_scope->__pyx_v_tokens, 2, 0, NULL, NULL, &__pyx_slice__58, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
            __pyx_t_13 = __pyx_t_7; __Pyx_INCREF(__pyx_t_13); __pyx_t_14 = 0;
            __pyx_t_15 = NULL;
          } else {
            __pyx_t_14 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1232, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_15 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1232, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          for (;;) {
            if (likely(!__pyx_t_15)) {
              if (likely(PyList_CheckExact(__pyx_t_13))) {
                if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_13)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_7 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_7); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1232, __pyx_L1_error)
                #else
                __pyx_t_7 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1232, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                #endif
              } else {
                if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_14); __Pyx_INCREF(__pyx_t_7); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1232, __pyx_L1_error)
                #else
                __pyx_t_7 = PySequence_ITEM(__pyx_t_13, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1232, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                #endif
              }
            } else {
              __pyx_t_7 = __pyx_t_15(__pyx_t_13);
              if (unlikely(!__pyx_t_7)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1232, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_7);
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_7);
            __pyx_t_7 = 0;
            __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1232, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_float32); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1232, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_16 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_16)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_16);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
              }
            }
            if (!__pyx_t_16) {
              __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_cur_scope->__pyx_v_x); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1232, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
            } else {
              __pyx_t_18 = PyTuple_New(1+1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1232, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_16); __pyx_t_16 = NULL;
              __Pyx_INCREF(__pyx_cur_scope->__pyx_v_x);
              __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_x);
              PyTuple_SET_ITEM(__pyx_t_18, 0+1, __pyx_cur_scope->__pyx_v_x);
              __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_18, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1232, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 1232, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          if (!__pyx_t_13) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1232, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_13); __pyx_t_13 = NULL;
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1232, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_all_prob);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_all_prob, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          __pyx_t_3 = 0;

          /* "gigaword2feature.pyx":1234
 *                     all_prob = numpy.asarray([ numpy.float32(x) for x in tokens[2:] ])
 * 
 *                     if predicted_label == n_label_type:             # <<<<<<<<<<<<<<
 *                         if all_prob[n_label_type] < reinterpret_threshold:
 *                             all_prob[n_label_type] = 0
 */
          __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_predicted_label, __pyx_cur_scope->__pyx_v_n_label_type, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1234, __pyx_L1_error)
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1234, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__pyx_t_2) {

            /* "gigaword2feature.pyx":1235
 * 
 *                     if predicted_label == n_label_type:
 *                         if all_prob[n_label_type] < reinterpret_threshold:             # <<<<<<<<<<<<<<
 *                             all_prob[n_label_type] = 0
 *                             all_prob /= all_prob.sum()
 */
            __pyx_t_3 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_all_prob, __pyx_cur_scope->__pyx_v_n_label_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1235, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_cur_scope->__pyx_v_reinterpret_threshold, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1235, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1235, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (__pyx_t_2) {

              /* "gigaword2feature.pyx":1236
 *                     if predicted_label == n_label_type:
 *                         if all_prob[n_label_type] < reinterpret_threshold:
 *                             all_prob[n_label_type] = 0             # <<<<<<<<<<<<<<
 *                             all_prob /= all_prob.sum()
 *                             predicted_label = all_prob.argmax()
 */
              if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_all_prob, __pyx_cur_scope->__pyx_v_n_label_type, __pyx_int_0) < 0)) __PYX_ERR(0, 1236, __pyx_L1_error)

              /* "gigaword2feature.pyx":1237
 *                         if all_prob[n_label_type] < reinterpret_threshold:
 *                             all_prob[n_label_type] = 0
 *                             all_prob /= all_prob.sum()             # <<<<<<<<<<<<<<
 *                             predicted_label = all_prob.argmax()
 * 
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_all_prob, __pyx_n_s_sum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1237, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_7 = NULL;
              if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                }
              }
              if (__pyx_t_7) {
                __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1237, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              } else {
                __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1237, __pyx_L1_error)
              }
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_3 = __Pyx_PyNumber_InPlaceDivide(__pyx_cur_scope->__pyx_v_all_prob, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1237, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_all_prob);
              __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_all_prob, __pyx_t_3);
              __Pyx_GIVEREF(__pyx_t_3);
              __pyx_t_3 = 0;

              /* "gigaword2feature.pyx":1238
 *                             all_prob[n_label_type] = 0
 *                             all_prob /= all_prob.sum()
 *                             predicted_label = all_prob.argmax()             # <<<<<<<<<<<<<<
 * 
 *                     if predicted_label != n_label_type:
 */
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_all_prob, __pyx_n_s_argmax); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1238, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_7 = NULL;
              if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_5, function);
                }
              }
              if (__pyx_t_7) {
                __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1238, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              } else {
                __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1238, __pyx_L1_error)
              }
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_predicted_label);
              __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_predicted_label, __pyx_t_3);
              __Pyx_GIVEREF(__pyx_t_3);
              __pyx_t_3 = 0;

              /* "gigaword2feature.pyx":1235
 * 
 *                     if predicted_label == n_label_type:
 *                         if all_prob[n_label_type] < reinterpret_threshold:             # <<<<<<<<<<<<<<
 *                             all_prob[n_label_type] = 0
 *                             all_prob /= all_prob.sum()
 */
            }

            /* "gigaword2feature.pyx":1234
 *                     all_prob = numpy.asarray([ numpy.float32(x) for x in tokens[2:] ])
 * 
 *                     if predicted_label == n_label_type:             # <<<<<<<<<<<<<<
 *                         if all_prob[n_label_type] < reinterpret_threshold:
 *                             all_prob[n_label_type] = 0
 */
          }

          /* "gigaword2feature.pyx":1240
 *                             predicted_label = all_prob.argmax()
 * 
 *                     if predicted_label != n_label_type:             # <<<<<<<<<<<<<<
 *                         predicted, probability = idx2ner[predicted_label], all_prob[predicted_label]
 *                         table[i][j - 1] = (predicted, probability)
 */
          __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_predicted_label, __pyx_cur_scope->__pyx_v_n_label_type, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1240, __pyx_L1_error)
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1240, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__pyx_t_2) {

            /* "gigaword2feature.pyx":1241
 * 
 *                     if predicted_label != n_label_type:
 *                         predicted, probability = idx2ner[predicted_label], all_prob[predicted_label]             # <<<<<<<<<<<<<<
 *                         table[i][j - 1] = (predicted, probability)
 *                         estimate.add( (i, j, predicted_label ) )
 */
            __pyx_t_3 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_idx2ner, __pyx_cur_scope->__pyx_v_predicted_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1241, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_5 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_all_prob, __pyx_cur_scope->__pyx_v_predicted_label); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1241, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_predicted);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_predicted, __pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_probability);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_probability, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_5);
            __pyx_t_5 = 0;

            /* "gigaword2feature.pyx":1242
 *                     if predicted_label != n_label_type:
 *                         predicted, probability = idx2ner[predicted_label], all_prob[predicted_label]
 *                         table[i][j - 1] = (predicted, probability)             # <<<<<<<<<<<<<<
 *                         estimate.add( (i, j, predicted_label ) )
 * 
 */
            __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1242, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_predicted);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_predicted);
            PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_cur_scope->__pyx_v_predicted);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_probability);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_probability);
            PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_cur_scope->__pyx_v_probability);
            __pyx_t_3 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_table, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1242, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_cur_scope->__pyx_v_j, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1242, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_t_7, __pyx_t_5) < 0)) __PYX_ERR(0, 1242, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "gigaword2feature.pyx":1243
 *                         predicted, probability = idx2ner[predicted_label], all_prob[predicted_label]
 *                         table[i][j - 1] = (predicted, probability)
 *                         estimate.add( (i, j, predicted_label ) )             # <<<<<<<<<<<<<<
 * 
 *         yield s, table, estimate, actual
 */
            __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1243, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i);
            PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_cur_scope->__pyx_v_i);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_j);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_j);
            PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_cur_scope->__pyx_v_j);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_predicted_label);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_predicted_label);
            PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_cur_scope->__pyx_v_predicted_label);
            __pyx_t_19 = PySet_Add(__pyx_cur_scope->__pyx_v_estimate, __pyx_t_5); if (unlikely(__pyx_t_19 == -1)) __PYX_ERR(0, 1243, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "gigaword2feature.pyx":1240
 *                             predicted_label = all_prob.argmax()
 * 
 *                     if predicted_label != n_label_type:             # <<<<<<<<<<<<<<
 *                         predicted, probability = idx2ner[predicted_label], all_prob[predicted_label]
 *                         table[i][j - 1] = (predicted, probability)
 */
          }

          /* "gigaword2feature.pyx":1224
 *         for i in xrange(len(s)):
 *             for j in xrange(i + 1, len(s) + 1):
 *                 if j - i <= ner_max_length:             # <<<<<<<<<<<<<<
 *                     # @xmb 20160717
 *                     # line = fp.readline()
 */
        }

        /* "gigaword2feature.pyx":1223
 * 
 *         for i in xrange(len(s)):
 *             for j in xrange(i + 1, len(s) + 1):             # <<<<<<<<<<<<<<
 *                 if j - i <= ner_max_length:
 *                     # @xmb 20160717
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "gigaword2feature.pyx":1222
 *         actual = set( zip(boe, eoe, cls) )
 * 
 *         for i in xrange(len(s)):             # <<<<<<<<<<<<<<
 *             for j in xrange(i + 1, len(s) + 1):
 *                 if j - i <= ner_max_length:
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":1245
 *                         estimate.add( (i, j, predicted_label ) )
 * 
 *         yield s, table, estimate, actual             # <<<<<<<<<<<<<<
 *     fp.close()
 * 
 */
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_s);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_s);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_s);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_table);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_table);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_cur_scope->__pyx_v_table);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_estimate);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_estimate);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_cur_scope->__pyx_v_estimate);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_actual);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_actual);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_cur_scope->__pyx_v_actual);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L19_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1245, __pyx_L1_error)
  }

  /* "gigaword2feature.pyx":1246
 * 
 *         yield s, table, estimate, actual
 *     fp.close()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_fp, __pyx_n_s_close); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1246, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1246, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":1159
 * # def PredictionParser( dataset, result, ner_max_length,
 * #                       reinterpret_threshold = 0, n_label_type = 4 ):
 * def PredictionParser( sample_generator, result, ner_max_length,             # <<<<<<<<<<<<<<
 *                       reinterpret_threshold = 0, n_label_type = 4 ):
 *     """
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("PredictionParser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_21generator8(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":1250
 * 
 * 
 * def SentenceIterator( filename ):             # <<<<<<<<<<<<<<
 *     with open( filename, 'rb' ) as corpus:
 *         sentence = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_20SentenceIterator(PyObject *__pyx_self, PyObject *__pyx_v_filename); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_20SentenceIterator = {"SentenceIterator", (PyCFunction)__pyx_pw_16gigaword2feature_20SentenceIterator, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_20SentenceIterator(PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SentenceIterator (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_19SentenceIterator(__pyx_self, ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_19SentenceIterator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SentenceIterator", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_17_SentenceIterator(__pyx_ptype_16gigaword2feature___pyx_scope_struct_17_SentenceIterator, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_filename = __pyx_v_filename;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_21generator8, (PyObject *) __pyx_cur_scope, __pyx_n_s_SentenceIterator, __pyx_n_s_SentenceIterator); if (unlikely(!gen)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.SentenceIterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_21generator8(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L19_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1250, __pyx_L1_error)

  /* "gigaword2feature.pyx":1251
 * 
 * def SentenceIterator( filename ):
 *     with open( filename, 'rb' ) as corpus:             # <<<<<<<<<<<<<<
 *         sentence = []
 *         for line in corpus:
 */
  /*with:*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filename);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filename);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_filename);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_rb);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1251, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L4_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          __Pyx_GIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_v_corpus = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":1252
 * def SentenceIterator( filename ):
 *     with open( filename, 'rb' ) as corpus:
 *         sentence = []             # <<<<<<<<<<<<<<
 *         for line in corpus:
 *             line = line.strip()
 */
          __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1252, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_v_sentence = ((PyObject*)__pyx_t_4);
          __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":1253
 *     with open( filename, 'rb' ) as corpus:
 *         sentence = []
 *         for line in corpus:             # <<<<<<<<<<<<<<
 *             line = line.strip()
 *             if len(line) > 0:
 */
          if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_corpus)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_corpus)) {
            __pyx_t_4 = __pyx_cur_scope->__pyx_v_corpus; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_corpus); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1253, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1253, __pyx_L8_error)
          }
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_4))) {
                if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1253, __pyx_L8_error)
                #else
                __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1253, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_2);
                #endif
              } else {
                if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1253, __pyx_L8_error)
                #else
                __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1253, __pyx_L8_error)
                __Pyx_GOTREF(__pyx_t_2);
                #endif
              }
            } else {
              __pyx_t_2 = __pyx_t_10(__pyx_t_4);
              if (unlikely(!__pyx_t_2)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1253, __pyx_L8_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_2);
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_line);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;

            /* "gigaword2feature.pyx":1254
 *         sentence = []
 *         for line in corpus:
 *             line = line.strip()             # <<<<<<<<<<<<<<
 *             if len(line) > 0:
 *                 sentence.append( line )
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1254, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_5 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            if (__pyx_t_5) {
              __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1254, __pyx_L8_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            } else {
              __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1254, __pyx_L8_error)
            }
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_line);
            __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_line, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;

            /* "gigaword2feature.pyx":1255
 *         for line in corpus:
 *             line = line.strip()
 *             if len(line) > 0:             # <<<<<<<<<<<<<<
 *                 sentence.append( line )
 *             else:
 */
            __pyx_t_11 = PyObject_Length(__pyx_cur_scope->__pyx_v_line); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 1255, __pyx_L8_error)
            __pyx_t_12 = ((__pyx_t_11 > 0) != 0);
            if (__pyx_t_12) {

              /* "gigaword2feature.pyx":1256
 *             line = line.strip()
 *             if len(line) > 0:
 *                 sentence.append( line )             # <<<<<<<<<<<<<<
 *             else:
 *                 yield sentence
 */
              __pyx_t_13 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_sentence, __pyx_cur_scope->__pyx_v_line); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 1256, __pyx_L8_error)

              /* "gigaword2feature.pyx":1255
 *         for line in corpus:
 *             line = line.strip()
 *             if len(line) > 0:             # <<<<<<<<<<<<<<
 *                 sentence.append( line )
 *             else:
 */
              goto __pyx_L18;
            }

            /* "gigaword2feature.pyx":1258
 *                 sentence.append( line )
 *             else:
 *                 yield sentence             # <<<<<<<<<<<<<<
 *                 sentence = []
 *     # with open( filename, 'rb' ) as corpus:
 */
            /*else*/ {
              __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence);
              __pyx_r = __pyx_cur_scope->__pyx_v_sentence;
              __Pyx_XGIVEREF(__pyx_t_3);
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
              __Pyx_XGIVEREF(__pyx_t_4);
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
              __Pyx_XGIVEREF(__pyx_t_6);
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
              __Pyx_XGIVEREF(__pyx_t_7);
              __pyx_cur_scope->__pyx_t_3 = __pyx_t_7;
              __Pyx_XGIVEREF(__pyx_t_8);
              __pyx_cur_scope->__pyx_t_4 = __pyx_t_8;
              __pyx_cur_scope->__pyx_t_5 = __pyx_t_9;
              __pyx_cur_scope->__pyx_t_6 = __pyx_t_10;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              /* return from generator, yielding value */
              __pyx_generator->resume_label = 1;
              return __pyx_r;
              __pyx_L19_resume_from_yield:;
              __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
              __pyx_cur_scope->__pyx_t_0 = 0;
              __Pyx_XGOTREF(__pyx_t_3);
              __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
              __pyx_cur_scope->__pyx_t_1 = 0;
              __Pyx_XGOTREF(__pyx_t_4);
              __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
              __pyx_cur_scope->__pyx_t_2 = 0;
              __Pyx_XGOTREF(__pyx_t_6);
              __pyx_t_7 = __pyx_cur_scope->__pyx_t_3;
              __pyx_cur_scope->__pyx_t_3 = 0;
              __Pyx_XGOTREF(__pyx_t_7);
              __pyx_t_8 = __pyx_cur_scope->__pyx_t_4;
              __pyx_cur_scope->__pyx_t_4 = 0;
              __Pyx_XGOTREF(__pyx_t_8);
              __pyx_t_9 = __pyx_cur_scope->__pyx_t_5;
              __pyx_t_10 = __pyx_cur_scope->__pyx_t_6;
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1258, __pyx_L8_error)

              /* "gigaword2feature.pyx":1259
 *             else:
 *                 yield sentence
 *                 sentence = []             # <<<<<<<<<<<<<<
 *     # with open( filename, 'rb' ) as corpus:
 *     #     sentences = corpus.read().strip().split( '\n\n' )
 */
              __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1259, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_sentence);
              __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_sentence, ((PyObject*)__pyx_t_2));
              __Pyx_GIVEREF(__pyx_t_2);
              __pyx_t_2 = 0;
            }
            __pyx_L18:;

            /* "gigaword2feature.pyx":1253
 *     with open( filename, 'rb' ) as corpus:
 *         sentence = []
 *         for line in corpus:             # <<<<<<<<<<<<<<
 *             line = line.strip()
 *             if len(line) > 0:
 */
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":1251
 * 
 * def SentenceIterator( filename ):
 *     with open( filename, 'rb' ) as corpus:             # <<<<<<<<<<<<<<
 *         sentence = []
 *         for line in corpus:
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L15_try_end;
        __pyx_L8_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("gigaword2feature.SentenceIterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_2, &__pyx_t_1) < 0) __PYX_ERR(0, 1251, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1251, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1251, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__pyx_t_12 < 0) __PYX_ERR(0, 1251, __pyx_L10_except_error)
          __pyx_t_15 = ((!(__pyx_t_12 != 0)) != 0);
          if (__pyx_t_15) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_2, __pyx_t_1);
            __pyx_t_4 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; 
            __PYX_ERR(0, 1251, __pyx_L10_except_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L15_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_3) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__59, NULL);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1251, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L23;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L1_error;
    __pyx_L23:;
  }

  /* "gigaword2feature.pyx":1250
 * 
 * 
 * def SentenceIterator( filename ):             # <<<<<<<<<<<<<<
 *     with open( filename, 'rb' ) as corpus:
 *         sentence = []
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("SentenceIterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1266
 * 
 * 
 * def __merge_adjacient( estimate ):             # <<<<<<<<<<<<<<
 *     best, i = set(), 0
 *     while i < len(estimate):
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_23__merge_adjacient(PyObject *__pyx_self, PyObject *__pyx_v_estimate); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_23__merge_adjacient = {"__merge_adjacient", (PyCFunction)__pyx_pw_16gigaword2feature_23__merge_adjacient, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_23__merge_adjacient(PyObject *__pyx_self, PyObject *__pyx_v_estimate) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__merge_adjacient (wrapper)", 0);
  __pyx_r = __pyx_pf_16gigaword2feature_22__merge_adjacient(__pyx_self, ((PyObject *)__pyx_v_estimate));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_22__merge_adjacient(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_estimate) {
  PyObject *__pyx_v_best = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__merge_adjacient", 0);
  __Pyx_INCREF(__pyx_v_estimate);

  /* "gigaword2feature.pyx":1267
 * 
 * def __merge_adjacient( estimate ):
 *     best, i = set(), 0             # <<<<<<<<<<<<<<
 *     while i < len(estimate):
 *         j = i + 1
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_best = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_i = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1268
 * def __merge_adjacient( estimate ):
 *     best, i = set(), 0
 *     while i < len(estimate):             # <<<<<<<<<<<<<<
 *         j = i + 1
 *         while j < len(estimate):
 */
  while (1) {
    __pyx_t_3 = PyObject_Length(__pyx_v_estimate); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_i, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_4) break;

    /* "gigaword2feature.pyx":1269
 *     best, i = set(), 0
 *     while i < len(estimate):
 *         j = i + 1             # <<<<<<<<<<<<<<
 *         while j < len(estimate):
 *             if estimate[j][0] == estimate[j - 1][1] and \
 */
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":1270
 *     while i < len(estimate):
 *         j = i + 1
 *         while j < len(estimate):             # <<<<<<<<<<<<<<
 *             if estimate[j][0] == estimate[j - 1][1] and \
 *                estimate[j][2] == estimate[j - 1][2]:
 */
    while (1) {
      __pyx_t_3 = PyObject_Length(__pyx_v_estimate); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1270, __pyx_L1_error)
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_j, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1270, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1270, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (!__pyx_t_4) break;

      /* "gigaword2feature.pyx":1271
 *         j = i + 1
 *         while j < len(estimate):
 *             if estimate[j][0] == estimate[j - 1][1] and \             # <<<<<<<<<<<<<<
 *                estimate[j][2] == estimate[j - 1][2]:
 *                 j += 1
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_estimate, __pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_j, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PyObject_GetItem(__pyx_v_estimate, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1271, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1271, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
      } else {
        __pyx_t_4 = __pyx_t_6;
        goto __pyx_L8_bool_binop_done;
      }

      /* "gigaword2feature.pyx":1272
 *         while j < len(estimate):
 *             if estimate[j][0] == estimate[j - 1][1] and \
 *                estimate[j][2] == estimate[j - 1][2]:             # <<<<<<<<<<<<<<
 *                 j += 1
 *             else:
 */
      __pyx_t_5 = PyObject_GetItem(__pyx_v_estimate, __pyx_v_j); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_v_j, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyObject_GetItem(__pyx_v_estimate, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1272, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1272, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __pyx_t_6;
      __pyx_L8_bool_binop_done:;

      /* "gigaword2feature.pyx":1271
 *         j = i + 1
 *         while j < len(estimate):
 *             if estimate[j][0] == estimate[j - 1][1] and \             # <<<<<<<<<<<<<<
 *                estimate[j][2] == estimate[j - 1][2]:
 *                 j += 1
 */
      if (__pyx_t_4) {

        /* "gigaword2feature.pyx":1273
 *             if estimate[j][0] == estimate[j - 1][1] and \
 *                estimate[j][2] == estimate[j - 1][2]:
 *                 j += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 break
 */
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_j, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_j, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "gigaword2feature.pyx":1271
 *         j = i + 1
 *         while j < len(estimate):
 *             if estimate[j][0] == estimate[j - 1][1] and \             # <<<<<<<<<<<<<<
 *                estimate[j][2] == estimate[j - 1][2]:
 *                 j += 1
 */
        goto __pyx_L7;
      }

      /* "gigaword2feature.pyx":1275
 *                 j += 1
 *             else:
 *                 break             # <<<<<<<<<<<<<<
 *         assert estimate[i][2] == estimate[j - 1][2]
 *         best.add( (estimate[i][0], estimate[j - 1][1], estimate[i][2]) )
 */
      /*else*/ {
        goto __pyx_L6_break;
      }
      __pyx_L7:;
    }
    __pyx_L6_break:;

    /* "gigaword2feature.pyx":1276
 *             else:
 *                 break
 *         assert estimate[i][2] == estimate[j - 1][2]             # <<<<<<<<<<<<<<
 *         best.add( (estimate[i][0], estimate[j - 1][1], estimate[i][2]) )
 *         i = j
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = PyObject_GetItem(__pyx_v_estimate, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_j, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_GetItem(__pyx_v_estimate, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_5, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1276, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1276, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1276, __pyx_L1_error)
      }
    }
    #endif

    /* "gigaword2feature.pyx":1277
 *                 break
 *         assert estimate[i][2] == estimate[j - 1][2]
 *         best.add( (estimate[i][0], estimate[j - 1][1], estimate[i][2]) )             # <<<<<<<<<<<<<<
 *         i = j
 *     estimate = best
 */
    __pyx_t_2 = PyObject_GetItem(__pyx_v_estimate, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_j, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyObject_GetItem(__pyx_v_estimate, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_v_estimate, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_5, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_7);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = PySet_Add(__pyx_v_best, __pyx_t_5); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 1277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gigaword2feature.pyx":1278
 *         assert estimate[i][2] == estimate[j - 1][2]
 *         best.add( (estimate[i][0], estimate[j - 1][1], estimate[i][2]) )
 *         i = j             # <<<<<<<<<<<<<<
 *     estimate = best
 *     return estimate
 */
    __Pyx_INCREF(__pyx_v_j);
    __Pyx_DECREF_SET(__pyx_v_i, __pyx_v_j);
  }

  /* "gigaword2feature.pyx":1279
 *         best.add( (estimate[i][0], estimate[j - 1][1], estimate[i][2]) )
 *         i = j
 *     estimate = best             # <<<<<<<<<<<<<<
 *     return estimate
 * 
 */
  __Pyx_INCREF(__pyx_v_best);
  __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_v_best);

  /* "gigaword2feature.pyx":1280
 *         i = j
 *     estimate = best
 *     return estimate             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_estimate);
  __pyx_r = __pyx_v_estimate;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":1266
 * 
 * 
 * def __merge_adjacient( estimate ):             # <<<<<<<<<<<<<<
 *     best, i = set(), 0
 *     while i < len(estimate):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gigaword2feature.__merge_adjacient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_best);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_estimate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1284
 * 
 * 
 * def __decode_algo_1( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Highest scrore first
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_25__decode_algo_1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_24__decode_algo_1[] = "\n    Highest scrore first \n    ";
static PyMethodDef __pyx_mdef_16gigaword2feature_25__decode_algo_1 = {"__decode_algo_1", (PyCFunction)__pyx_pw_16gigaword2feature_25__decode_algo_1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_24__decode_algo_1};
static PyObject *__pyx_pw_16gigaword2feature_25__decode_algo_1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sentence = 0;
  PyObject *__pyx_v_estimate = 0;
  PyObject *__pyx_v_table = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__decode_algo_1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sentence,&__pyx_n_s_estimate,&__pyx_n_s_table,&__pyx_n_s_threshold,&__pyx_n_s_callback,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__decode_algo_1", 0, 4, 5, 1); __PYX_ERR(0, 1284, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__decode_algo_1", 0, 4, 5, 2); __PYX_ERR(0, 1284, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__decode_algo_1", 0, 4, 5, 3); __PYX_ERR(0, 1284, __pyx_L3_error)
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_callback);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__decode_algo_1") < 0)) __PYX_ERR(0, 1284, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sentence = values[0];
    __pyx_v_estimate = values[1];
    __pyx_v_table = values[2];
    __pyx_v_threshold = values[3];
    __pyx_v_callback = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__decode_algo_1", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1284, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.__decode_algo_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_24__decode_algo_1(__pyx_self, __pyx_v_sentence, __pyx_v_estimate, __pyx_v_table, __pyx_v_threshold, __pyx_v_callback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1296
 *     for i in xrange(len(sentence)):
 *         candidate = [ (b, e, c) for (b, e, c) in estimate if b <= i < e ]
 *         candidate.sort( key = lambda x : table[x[0]][x[1] - 1][1] )             # <<<<<<<<<<<<<<
 *         if len(candidate) > 0:
 *             candidate.pop()
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_15__decode_algo_1_lambda6(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_15__decode_algo_1_lambda6 = {"lambda6", (PyCFunction)__pyx_pw_16gigaword2feature_15__decode_algo_1_lambda6, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_15__decode_algo_1_lambda6(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda6 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda6(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda6(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *__pyx_cur_scope;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lambda6", 0);
  __pyx_outer_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_table)) { __Pyx_RaiseClosureNameError("table"); __PYX_ERR(0, 1296, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_table, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gigaword2feature.__decode_algo_1.lambda6", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1302
 * 
 *     estimate = list(estimate - removed)
 *     estimate.sort( key = lambda x : x[0] )             # <<<<<<<<<<<<<<
 *     estimate = __merge_adjacient( estimate )
 *     return estimate
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_15__decode_algo_1_1lambda7(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_15__decode_algo_1_1lambda7 = {"lambda7", (PyCFunction)__pyx_pw_16gigaword2feature_15__decode_algo_1_1lambda7, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_15__decode_algo_1_1lambda7(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda7 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda7(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda7(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda7", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.__decode_algo_1.lambda7", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1284
 * 
 * 
 * def __decode_algo_1( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Highest scrore first
 */

static PyObject *__pyx_pf_16gigaword2feature_24__decode_algo_1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_estimate, PyObject *__pyx_v_table, PyObject *__pyx_v_threshold, PyObject *__pyx_v_callback) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *__pyx_cur_scope;
  PyObject *__pyx_v_removed = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_candidate = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  __Pyx_RefNannySetupContext("__decode_algo_1", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_18___decode_algo_1(__pyx_ptype_16gigaword2feature___pyx_scope_struct_18___decode_algo_1, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_table = __pyx_v_table;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_table);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_table);
  __Pyx_INCREF(__pyx_v_estimate);

  /* "gigaword2feature.pyx":1288
 *     Highest scrore first
 *     """
 *     if callback is None:             # <<<<<<<<<<<<<<
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 *     else:
 */
  __pyx_t_1 = (__pyx_v_callback == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gigaword2feature.pyx":1289
 *     """
 *     if callback is None:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )             # <<<<<<<<<<<<<<
 *     else:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if \
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
      __pyx_t_4 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1289, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1289, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1289, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1289, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1289, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1289, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
        PyObject* sequence = __pyx_t_7;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1289, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_8 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        index = 2; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 3) < 0) __PYX_ERR(0, 1289, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1289, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_7 = PyObject_GetItem(__pyx_cur_scope->__pyx_v_table, __pyx_v_b); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __Pyx_PyInt_SubtractObjC(__pyx_v_e, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyObject_GetItem(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1289, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_10, __pyx_v_threshold, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1289, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1289, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_2) {
        __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_e);
        __Pyx_INCREF(__pyx_v_c);
        __Pyx_GIVEREF(__pyx_v_c);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_c);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1289, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_removed = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":1288
 *     Highest scrore first
 *     """
 *     if callback is None:             # <<<<<<<<<<<<<<
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 *     else:
 */
    goto __pyx_L3;
  }

  /* "gigaword2feature.pyx":1291
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 *     else:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if \             # <<<<<<<<<<<<<<
 *                          not callback.keep( (b,e,c), estimate, table, threshold ) ] )
 * 
 */
  /*else*/ {
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
      __pyx_t_3 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1291, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1291, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_9); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1291, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1291, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_9); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1291, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1291, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1291, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
        PyObject* sequence = __pyx_t_9;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1291, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        index = 1; __pyx_t_7 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 2; __pyx_t_8 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_8)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 3) < 0) __PYX_ERR(0, 1291, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1291, __pyx_L1_error)
        __pyx_L12_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "gigaword2feature.pyx":1292
 *     else:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if \
 *                          not callback.keep( (b,e,c), estimate, table, threshold ) ] )             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(len(sentence)):
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_callback, __pyx_n_s_keep); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_b);
      __Pyx_GIVEREF(__pyx_v_b);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_b);
      __Pyx_INCREF(__pyx_v_e);
      __Pyx_GIVEREF(__pyx_v_e);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_e);
      __Pyx_INCREF(__pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_c);
      __pyx_t_10 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_13 = 1;
        }
      }
      __pyx_t_11 = PyTuple_New(4+__pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_13, __pyx_t_7);
      __Pyx_INCREF(__pyx_v_estimate);
      __Pyx_GIVEREF(__pyx_v_estimate);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_13, __pyx_v_estimate);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_table);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_table);
      PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_13, __pyx_cur_scope->__pyx_v_table);
      __Pyx_INCREF(__pyx_v_threshold);
      __Pyx_GIVEREF(__pyx_v_threshold);
      PyTuple_SET_ITEM(__pyx_t_11, 3+__pyx_t_13, __pyx_v_threshold);
      __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_1 = ((!__pyx_t_2) != 0);

      /* "gigaword2feature.pyx":1291
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 *     else:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if \             # <<<<<<<<<<<<<<
 *                          not callback.keep( (b,e,c), estimate, table, threshold ) ] )
 * 
 */
      if (__pyx_t_1) {
        __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_e);
        __Pyx_INCREF(__pyx_v_c);
        __Pyx_GIVEREF(__pyx_v_c);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_c);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1291, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_removed = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "gigaword2feature.pyx":1294
 *                          not callback.keep( (b,e,c), estimate, table, threshold ) ] )
 * 
 *     for i in xrange(len(sentence)):             # <<<<<<<<<<<<<<
 *         candidate = [ (b, e, c) for (b, e, c) in estimate if b <= i < e ]
 *         candidate.sort( key = lambda x : table[x[0]][x[1] - 1][1] )
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_sentence); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1294, __pyx_L1_error)
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_5; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "gigaword2feature.pyx":1295
 * 
 *     for i in xrange(len(sentence)):
 *         candidate = [ (b, e, c) for (b, e, c) in estimate if b <= i < e ]             # <<<<<<<<<<<<<<
 *         candidate.sort( key = lambda x : table[x[0]][x[1] - 1][1] )
 *         if len(candidate) > 0:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
      __pyx_t_4 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_4); __pyx_t_14 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_14 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1295, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_9); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_14); __Pyx_INCREF(__pyx_t_9); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_4, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1295, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
        PyObject* sequence = __pyx_t_9;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1295, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_8 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        index = 1; __pyx_t_11 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_11)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        index = 2; __pyx_t_7 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_7)) goto __pyx_L18_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_10), 3) < 0) __PYX_ERR(0, 1295, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L19_unpacking_done;
        __pyx_L18_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1295, __pyx_L1_error)
        __pyx_L19_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyObject_RichCompare(__pyx_v_b, __pyx_t_9, Py_LE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1295, __pyx_L1_error)
      if (__Pyx_PyObject_IsTrue(__pyx_t_7)) {
        __Pyx_DECREF(__pyx_t_7);
        __pyx_t_7 = PyObject_RichCompare(__pyx_t_9, __pyx_v_e, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1295, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1295, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_1) {
        __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1295, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_e);
        __Pyx_INCREF(__pyx_v_c);
        __Pyx_GIVEREF(__pyx_v_c);
        PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_c);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 1295, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_candidate, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "gigaword2feature.pyx":1296
 *     for i in xrange(len(sentence)):
 *         candidate = [ (b, e, c) for (b, e, c) in estimate if b <= i < e ]
 *         candidate.sort( key = lambda x : table[x[0]][x[1] - 1][1] )             # <<<<<<<<<<<<<<
 *         if len(candidate) > 0:
 *             candidate.pop()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_candidate, __pyx_n_s_sort); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_15__decode_algo_1_lambda6, 0, __pyx_n_s_decode_algo_1_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gigaword2feature, __pyx_d, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_key, __pyx_t_7) < 0) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gigaword2feature.pyx":1297
 *         candidate = [ (b, e, c) for (b, e, c) in estimate if b <= i < e ]
 *         candidate.sort( key = lambda x : table[x[0]][x[1] - 1][1] )
 *         if len(candidate) > 0:             # <<<<<<<<<<<<<<
 *             candidate.pop()
 *         removed = removed | set( candidate )
 */
    __pyx_t_14 = PyList_GET_SIZE(__pyx_v_candidate); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_14 > 0) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":1298
 *         candidate.sort( key = lambda x : table[x[0]][x[1] - 1][1] )
 *         if len(candidate) > 0:
 *             candidate.pop()             # <<<<<<<<<<<<<<
 *         removed = removed | set( candidate )
 * 
 */
      __pyx_t_7 = __Pyx_PyList_Pop(__pyx_v_candidate); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "gigaword2feature.pyx":1297
 *         candidate = [ (b, e, c) for (b, e, c) in estimate if b <= i < e ]
 *         candidate.sort( key = lambda x : table[x[0]][x[1] - 1][1] )
 *         if len(candidate) > 0:             # <<<<<<<<<<<<<<
 *             candidate.pop()
 *         removed = removed | set( candidate )
 */
    }

    /* "gigaword2feature.pyx":1299
 *         if len(candidate) > 0:
 *             candidate.pop()
 *         removed = removed | set( candidate )             # <<<<<<<<<<<<<<
 * 
 *     estimate = list(estimate - removed)
 */
    __pyx_t_7 = PySet_New(__pyx_v_candidate); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyNumber_Or(__pyx_v_removed, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_removed, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;
  }

  /* "gigaword2feature.pyx":1301
 *         removed = removed | set( candidate )
 * 
 *     estimate = list(estimate - removed)             # <<<<<<<<<<<<<<
 *     estimate.sort( key = lambda x : x[0] )
 *     estimate = __merge_adjacient( estimate )
 */
  __pyx_t_4 = PyNumber_Subtract(__pyx_v_estimate, __pyx_v_removed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "gigaword2feature.pyx":1302
 * 
 *     estimate = list(estimate - removed)
 *     estimate.sort( key = lambda x : x[0] )             # <<<<<<<<<<<<<<
 *     estimate = __merge_adjacient( estimate )
 *     return estimate
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_estimate, __pyx_n_s_sort); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_15__decode_algo_1_1lambda7, 0, __pyx_n_s_decode_algo_1_locals_lambda, NULL, __pyx_n_s_gigaword2feature, __pyx_d, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_key, __pyx_t_3) < 0) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1303
 *     estimate = list(estimate - removed)
 *     estimate.sort( key = lambda x : x[0] )
 *     estimate = __merge_adjacient( estimate )             # <<<<<<<<<<<<<<
 *     return estimate
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_merge_adjacient); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_estimate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_INCREF(__pyx_v_estimate);
    __Pyx_GIVEREF(__pyx_v_estimate);
    PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_estimate);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1304
 *     estimate.sort( key = lambda x : x[0] )
 *     estimate = __merge_adjacient( estimate )
 *     return estimate             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_estimate);
  __pyx_r = __pyx_v_estimate;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":1284
 * 
 * 
 * def __decode_algo_1( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Highest scrore first
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("gigaword2feature.__decode_algo_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_removed);
  __Pyx_XDECREF(__pyx_v_candidate);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_estimate);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1308
 * 
 * 
 * def __decode_algo_2( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     longest coverage first
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_27__decode_algo_2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_26__decode_algo_2[] = "\n    longest coverage first\n    ";
static PyMethodDef __pyx_mdef_16gigaword2feature_27__decode_algo_2 = {"__decode_algo_2", (PyCFunction)__pyx_pw_16gigaword2feature_27__decode_algo_2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_26__decode_algo_2};
static PyObject *__pyx_pw_16gigaword2feature_27__decode_algo_2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sentence = 0;
  PyObject *__pyx_v_estimate = 0;
  PyObject *__pyx_v_table = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__decode_algo_2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sentence,&__pyx_n_s_estimate,&__pyx_n_s_table,&__pyx_n_s_threshold,&__pyx_n_s_callback,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__decode_algo_2", 0, 4, 5, 1); __PYX_ERR(0, 1308, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__decode_algo_2", 0, 4, 5, 2); __PYX_ERR(0, 1308, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__decode_algo_2", 0, 4, 5, 3); __PYX_ERR(0, 1308, __pyx_L3_error)
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_callback);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__decode_algo_2") < 0)) __PYX_ERR(0, 1308, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sentence = values[0];
    __pyx_v_estimate = values[1];
    __pyx_v_table = values[2];
    __pyx_v_threshold = values[3];
    __pyx_v_callback = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__decode_algo_2", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1308, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.__decode_algo_2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_26__decode_algo_2(__pyx_self, __pyx_v_sentence, __pyx_v_estimate, __pyx_v_table, __pyx_v_threshold, __pyx_v_callback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_26__decode_algo_2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_estimate, PyObject *__pyx_v_table, PyObject *__pyx_v_threshold, PyObject *__pyx_v_callback) {
  PyObject *__pyx_v_candidate = NULL;
  PyObject *__pyx_v_best = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("__decode_algo_2", 0);
  __Pyx_INCREF(__pyx_v_estimate);

  /* "gigaword2feature.pyx":1312
 *     longest coverage first
 *     """
 *     candidate, best = {}, []             # <<<<<<<<<<<<<<
 * 
 *     for (b, e, c) in estimate:
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_candidate = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_best = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1314
 *     candidate, best = {}, []
 * 
 *     for (b, e, c) in estimate:             # <<<<<<<<<<<<<<
 *         if callback is None:
 *             if table[b][e - 1][1] >= threshold:
 */
  if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
    __pyx_t_2 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1314, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1314, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1314, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1314, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1314, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1314, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 3) < 0) __PYX_ERR(0, 1314, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1314, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "gigaword2feature.pyx":1315
 * 
 *     for (b, e, c) in estimate:
 *         if callback is None:             # <<<<<<<<<<<<<<
 *             if table[b][e - 1][1] >= threshold:
 *                 candidate[(b, e)] = c
 */
    __pyx_t_10 = (__pyx_v_callback == Py_None);
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {

      /* "gigaword2feature.pyx":1316
 *     for (b, e, c) in estimate:
 *         if callback is None:
 *             if table[b][e - 1][1] >= threshold:             # <<<<<<<<<<<<<<
 *                 candidate[(b, e)] = c
 *         else:
 */
      __pyx_t_1 = PyObject_GetItem(__pyx_v_table, __pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyInt_SubtractObjC(__pyx_v_e, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyObject_GetItem(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_v_threshold, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1316, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_11) {

        /* "gigaword2feature.pyx":1317
 *         if callback is None:
 *             if table[b][e - 1][1] >= threshold:
 *                 candidate[(b, e)] = c             # <<<<<<<<<<<<<<
 *         else:
 *             if callback.keep( (b,e,c), estimate, table, threshold ):
 */
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1317, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_e);
        if (unlikely(PyDict_SetItem(__pyx_v_candidate, __pyx_t_6, __pyx_v_c) < 0)) __PYX_ERR(0, 1317, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "gigaword2feature.pyx":1316
 *     for (b, e, c) in estimate:
 *         if callback is None:
 *             if table[b][e - 1][1] >= threshold:             # <<<<<<<<<<<<<<
 *                 candidate[(b, e)] = c
 *         else:
 */
      }

      /* "gigaword2feature.pyx":1315
 * 
 *     for (b, e, c) in estimate:
 *         if callback is None:             # <<<<<<<<<<<<<<
 *             if table[b][e - 1][1] >= threshold:
 *                 candidate[(b, e)] = c
 */
      goto __pyx_L7;
    }

    /* "gigaword2feature.pyx":1319
 *                 candidate[(b, e)] = c
 *         else:
 *             if callback.keep( (b,e,c), estimate, table, threshold ):             # <<<<<<<<<<<<<<
 *                 candidate[(b, e)] = c
 * 
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_callback, __pyx_n_s_keep); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_b);
      __Pyx_GIVEREF(__pyx_v_b);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_b);
      __Pyx_INCREF(__pyx_v_e);
      __Pyx_GIVEREF(__pyx_v_e);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_e);
      __Pyx_INCREF(__pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_c);
      __pyx_t_5 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_12 = 1;
        }
      }
      __pyx_t_8 = PyTuple_New(4+__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_12, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_estimate);
      __Pyx_GIVEREF(__pyx_v_estimate);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_12, __pyx_v_estimate);
      __Pyx_INCREF(__pyx_v_table);
      __Pyx_GIVEREF(__pyx_v_table);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_12, __pyx_v_table);
      __Pyx_INCREF(__pyx_v_threshold);
      __Pyx_GIVEREF(__pyx_v_threshold);
      PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_12, __pyx_v_threshold);
      __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1319, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1319, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_11) {

        /* "gigaword2feature.pyx":1320
 *         else:
 *             if callback.keep( (b,e,c), estimate, table, threshold ):
 *                 candidate[(b, e)] = c             # <<<<<<<<<<<<<<
 * 
 *     for i in xrange(len(sentence)):
 */
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1320, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_e);
        if (unlikely(PyDict_SetItem(__pyx_v_candidate, __pyx_t_6, __pyx_v_c) < 0)) __PYX_ERR(0, 1320, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "gigaword2feature.pyx":1319
 *                 candidate[(b, e)] = c
 *         else:
 *             if callback.keep( (b,e,c), estimate, table, threshold ):             # <<<<<<<<<<<<<<
 *                 candidate[(b, e)] = c
 * 
 */
      }
    }
    __pyx_L7:;

    /* "gigaword2feature.pyx":1314
 *     candidate, best = {}, []
 * 
 *     for (b, e, c) in estimate:             # <<<<<<<<<<<<<<
 *         if callback is None:
 *             if table[b][e - 1][1] >= threshold:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1322
 *                 candidate[(b, e)] = c
 * 
 *     for i in xrange(len(sentence)):             # <<<<<<<<<<<<<<
 *         if (0, i + 1) in candidate:
 *             best.append( (1, [(0, i + 1)]) )
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_sentence); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_6 = __pyx_t_2; __Pyx_INCREF(__pyx_t_6); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1322, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1322, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1322, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_6);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1322, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gigaword2feature.pyx":1323
 * 
 *     for i in xrange(len(sentence)):
 *         if (0, i + 1) in candidate:             # <<<<<<<<<<<<<<
 *             best.append( (1, [(0, i + 1)]) )
 *         else:
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_11 = (__Pyx_PyDict_ContainsTF(__pyx_t_7, __pyx_v_candidate, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = (__pyx_t_11 != 0);
    if (__pyx_t_10) {

      /* "gigaword2feature.pyx":1324
 *     for i in xrange(len(sentence)):
 *         if (0, i + 1) in candidate:
 *             best.append( (1, [(0, i + 1)]) )             # <<<<<<<<<<<<<<
 *         else:
 *             best.append( (0, []) )
 */
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_2);
      PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_best, __pyx_t_2); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 1324, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "gigaword2feature.pyx":1323
 * 
 *     for i in xrange(len(sentence)):
 *         if (0, i + 1) in candidate:             # <<<<<<<<<<<<<<
 *             best.append( (1, [(0, i + 1)]) )
 *         else:
 */
      goto __pyx_L12;
    }

    /* "gigaword2feature.pyx":1326
 *             best.append( (1, [(0, i + 1)]) )
 *         else:
 *             best.append( (0, []) )             # <<<<<<<<<<<<<<
 *         for j in xrange(i):
 *             if (j + 1, i + 1) in candidate and best[j][0] + i - j > best[-1][0]:
 */
    /*else*/ {
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_best, __pyx_t_7); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 1326, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L12:;

    /* "gigaword2feature.pyx":1327
 *         else:
 *             best.append( (0, []) )
 *         for j in xrange(i):             # <<<<<<<<<<<<<<
 *             if (j + 1, i + 1) in candidate and best[j][0] + i - j > best[-1][0]:
 *                 best[-1] = (best[j][0] + i - j, best[j][1] + [(j + 1, i + 1)])
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_i);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_7 = __pyx_t_2; __Pyx_INCREF(__pyx_t_7); __pyx_t_12 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_14 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1327, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1327, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_2); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1327, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_14(__pyx_t_7);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1327, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "gigaword2feature.pyx":1328
 *             best.append( (0, []) )
 *         for j in xrange(i):
 *             if (j + 1, i + 1) in candidate and best[j][0] + i - j > best[-1][0]:             # <<<<<<<<<<<<<<
 *                 best[-1] = (best[j][0] + i - j, best[j][1] + [(j + 1, i + 1)])
 *         if i > 0 and best[-2][0] > best[-1][0]:
 */
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_j, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
      __pyx_t_2 = 0;
      __pyx_t_8 = 0;
      __pyx_t_11 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_v_candidate, Py_EQ)); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_15 = (__pyx_t_11 != 0);
      if (__pyx_t_15) {
      } else {
        __pyx_t_10 = __pyx_t_15;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_1 = PyObject_GetItem(__pyx_v_best, __pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_8, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Subtract(__pyx_t_1, __pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_best, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1328, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = __pyx_t_15;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_10) {

        /* "gigaword2feature.pyx":1329
 *         for j in xrange(i):
 *             if (j + 1, i + 1) in candidate and best[j][0] + i - j > best[-1][0]:
 *                 best[-1] = (best[j][0] + i - j, best[j][1] + [(j + 1, i + 1)])             # <<<<<<<<<<<<<<
 *         if i > 0 and best[-2][0] > best[-1][0]:
 *             best[-1] = best[-2]
 */
        __pyx_t_1 = PyObject_GetItem(__pyx_v_best, __pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyObject_GetItem(__pyx_v_best, __pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_j, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_5);
        __pyx_t_1 = 0;
        __pyx_t_5 = 0;
        __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_16);
        PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_16);
        __pyx_t_16 = 0;
        __pyx_t_16 = PyNumber_Add(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_16);
        __pyx_t_2 = 0;
        __pyx_t_16 = 0;
        if (unlikely(__Pyx_SetItemInt(__pyx_v_best, -1L, __pyx_t_5, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 1329, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "gigaword2feature.pyx":1328
 *             best.append( (0, []) )
 *         for j in xrange(i):
 *             if (j + 1, i + 1) in candidate and best[j][0] + i - j > best[-1][0]:             # <<<<<<<<<<<<<<
 *                 best[-1] = (best[j][0] + i - j, best[j][1] + [(j + 1, i + 1)])
 *         if i > 0 and best[-2][0] > best[-1][0]:
 */
      }

      /* "gigaword2feature.pyx":1327
 *         else:
 *             best.append( (0, []) )
 *         for j in xrange(i):             # <<<<<<<<<<<<<<
 *             if (j + 1, i + 1) in candidate and best[j][0] + i - j > best[-1][0]:
 *                 best[-1] = (best[j][0] + i - j, best[j][1] + [(j + 1, i + 1)])
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gigaword2feature.pyx":1330
 *             if (j + 1, i + 1) in candidate and best[j][0] + i - j > best[-1][0]:
 *                 best[-1] = (best[j][0] + i - j, best[j][1] + [(j + 1, i + 1)])
 *         if i > 0 and best[-2][0] > best[-1][0]:             # <<<<<<<<<<<<<<
 *             best[-1] = best[-2]
 *     estimate = [ (b, e, candidate[(b, e)]) for (b, e) in best[-1][1] ]
 */
    __pyx_t_7 = PyObject_RichCompare(__pyx_v_i, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_15) {
    } else {
      __pyx_t_10 = __pyx_t_15;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_best, -2L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_best, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_16, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __pyx_t_15;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_10) {

      /* "gigaword2feature.pyx":1331
 *                 best[-1] = (best[j][0] + i - j, best[j][1] + [(j + 1, i + 1)])
 *         if i > 0 and best[-2][0] > best[-1][0]:
 *             best[-1] = best[-2]             # <<<<<<<<<<<<<<
 *     estimate = [ (b, e, candidate[(b, e)]) for (b, e) in best[-1][1] ]
 *     estimate = __merge_adjacient( estimate )
 */
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_best, -2L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_SetItemInt(__pyx_v_best, -1L, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 1, 1, 1) < 0)) __PYX_ERR(0, 1331, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "gigaword2feature.pyx":1330
 *             if (j + 1, i + 1) in candidate and best[j][0] + i - j > best[-1][0]:
 *                 best[-1] = (best[j][0] + i - j, best[j][1] + [(j + 1, i + 1)])
 *         if i > 0 and best[-2][0] > best[-1][0]:             # <<<<<<<<<<<<<<
 *             best[-1] = best[-2]
 *     estimate = [ (b, e, candidate[(b, e)]) for (b, e) in best[-1][1] ]
 */
    }

    /* "gigaword2feature.pyx":1322
 *                 candidate[(b, e)] = c
 * 
 *     for i in xrange(len(sentence)):             # <<<<<<<<<<<<<<
 *         if (0, i + 1) in candidate:
 *             best.append( (1, [(0, i + 1)]) )
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "gigaword2feature.pyx":1332
 *         if i > 0 and best[-2][0] > best[-1][0]:
 *             best[-1] = best[-2]
 *     estimate = [ (b, e, candidate[(b, e)]) for (b, e) in best[-1][1] ]             # <<<<<<<<<<<<<<
 *     estimate = __merge_adjacient( estimate )
 *     return estimate
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_best, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_7, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
    __pyx_t_7 = __pyx_t_16; __Pyx_INCREF(__pyx_t_7); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1332, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_16 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_16); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1332, __pyx_L1_error)
        #else
        __pyx_t_16 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1332, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_16); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1332, __pyx_L1_error)
        #else
        __pyx_t_16 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1332, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        #endif
      }
    } else {
      __pyx_t_16 = __pyx_t_4(__pyx_t_7);
      if (unlikely(!__pyx_t_16)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1332, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_16);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_16))) || (PyList_CheckExact(__pyx_t_16))) {
      PyObject* sequence = __pyx_t_16;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1332, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1332, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L23_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_2 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_2)) goto __pyx_L23_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 1332, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L24_unpacking_done;
      __pyx_L23_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1332, __pyx_L1_error)
      __pyx_L24_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_v_b);
    __Pyx_GIVEREF(__pyx_v_b);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_v_b);
    __Pyx_INCREF(__pyx_v_e);
    __Pyx_GIVEREF(__pyx_v_e);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_v_e);
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_candidate, __pyx_t_16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = PyTuple_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_v_b);
    __Pyx_GIVEREF(__pyx_v_b);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_v_b);
    __Pyx_INCREF(__pyx_v_e);
    __Pyx_GIVEREF(__pyx_v_e);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_v_e);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 1332, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "gigaword2feature.pyx":1333
 *             best[-1] = best[-2]
 *     estimate = [ (b, e, candidate[(b, e)]) for (b, e) in best[-1][1] ]
 *     estimate = __merge_adjacient( estimate )             # <<<<<<<<<<<<<<
 *     return estimate
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_merge_adjacient); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_16 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_16) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_estimate); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_16); __pyx_t_16 = NULL;
    __Pyx_INCREF(__pyx_v_estimate);
    __Pyx_GIVEREF(__pyx_v_estimate);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_estimate);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "gigaword2feature.pyx":1334
 *     estimate = [ (b, e, candidate[(b, e)]) for (b, e) in best[-1][1] ]
 *     estimate = __merge_adjacient( estimate )
 *     return estimate             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_estimate);
  __pyx_r = __pyx_v_estimate;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":1308
 * 
 * 
 * def __decode_algo_2( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     longest coverage first
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("gigaword2feature.__decode_algo_2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_candidate);
  __Pyx_XDECREF(__pyx_v_best);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_estimate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1338
 * 
 * 
 * def __decode_algo_3( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     if callback is None:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_29__decode_algo_3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_29__decode_algo_3 = {"__decode_algo_3", (PyCFunction)__pyx_pw_16gigaword2feature_29__decode_algo_3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_16gigaword2feature_29__decode_algo_3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sentence = 0;
  PyObject *__pyx_v_estimate = 0;
  PyObject *__pyx_v_table = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__decode_algo_3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sentence,&__pyx_n_s_estimate,&__pyx_n_s_table,&__pyx_n_s_threshold,&__pyx_n_s_callback,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__decode_algo_3", 0, 4, 5, 1); __PYX_ERR(0, 1338, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__decode_algo_3", 0, 4, 5, 2); __PYX_ERR(0, 1338, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__decode_algo_3", 0, 4, 5, 3); __PYX_ERR(0, 1338, __pyx_L3_error)
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_callback);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__decode_algo_3") < 0)) __PYX_ERR(0, 1338, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sentence = values[0];
    __pyx_v_estimate = values[1];
    __pyx_v_table = values[2];
    __pyx_v_threshold = values[3];
    __pyx_v_callback = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__decode_algo_3", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1338, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.__decode_algo_3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_28__decode_algo_3(__pyx_self, __pyx_v_sentence, __pyx_v_estimate, __pyx_v_table, __pyx_v_threshold, __pyx_v_callback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_28__decode_algo_3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_estimate, PyObject *__pyx_v_table, PyObject *__pyx_v_threshold, PyObject *__pyx_v_callback) {
  PyObject *__pyx_v_removed = NULL;
  PyObject *__pyx_v_b1 = NULL;
  PyObject *__pyx_v_e1 = NULL;
  PyObject *__pyx_v_c1 = NULL;
  PyObject *__pyx_v_b2 = NULL;
  PyObject *__pyx_v_e2 = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_c2 = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("__decode_algo_3", 0);
  __Pyx_INCREF(__pyx_v_estimate);

  /* "gigaword2feature.pyx":1339
 * 
 * def __decode_algo_3( sentence, estimate, table, threshold, callback = None ):
 *     if callback is None:             # <<<<<<<<<<<<<<
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 *     else:
 */
  __pyx_t_1 = (__pyx_v_callback == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gigaword2feature.pyx":1340
 * def __decode_algo_3( sentence, estimate, table, threshold, callback = None ):
 *     if callback is None:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )             # <<<<<<<<<<<<<<
 *     else:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if \
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
      __pyx_t_4 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1340, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1340, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1340, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1340, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1340, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1340, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
        PyObject* sequence = __pyx_t_7;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1340, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_8 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        index = 2; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 3) < 0) __PYX_ERR(0, 1340, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1340, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_7 = PyObject_GetItem(__pyx_v_table, __pyx_v_b); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __Pyx_PyInt_SubtractObjC(__pyx_v_e, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = PyObject_GetItem(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_10, __pyx_v_threshold, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1340, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1340, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_2) {
        __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_e);
        __Pyx_INCREF(__pyx_v_c);
        __Pyx_GIVEREF(__pyx_v_c);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_c);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1340, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_removed = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":1339
 * 
 * def __decode_algo_3( sentence, estimate, table, threshold, callback = None ):
 *     if callback is None:             # <<<<<<<<<<<<<<
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 *     else:
 */
    goto __pyx_L3;
  }

  /* "gigaword2feature.pyx":1342
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 *     else:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if \             # <<<<<<<<<<<<<<
 *                          not callback.keep( (b,c,e), estimate, table, threshold ) ] )
 * 
 */
  /*else*/ {
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
      __pyx_t_3 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1342, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_9); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1342, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1342, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_9); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1342, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1342, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1342, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
        PyObject* sequence = __pyx_t_9;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1342, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        index = 1; __pyx_t_7 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 2; __pyx_t_8 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_8)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 3) < 0) __PYX_ERR(0, 1342, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1342, __pyx_L1_error)
        __pyx_L12_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "gigaword2feature.pyx":1343
 *     else:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if \
 *                          not callback.keep( (b,c,e), estimate, table, threshold ) ] )             # <<<<<<<<<<<<<<
 * 
 *     estimate = estimate - removed
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_callback, __pyx_n_s_keep); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_b);
      __Pyx_GIVEREF(__pyx_v_b);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_b);
      __Pyx_INCREF(__pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_c);
      __Pyx_INCREF(__pyx_v_e);
      __Pyx_GIVEREF(__pyx_v_e);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_e);
      __pyx_t_10 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_13 = 1;
        }
      }
      __pyx_t_11 = PyTuple_New(4+__pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_13, __pyx_t_7);
      __Pyx_INCREF(__pyx_v_estimate);
      __Pyx_GIVEREF(__pyx_v_estimate);
      PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_13, __pyx_v_estimate);
      __Pyx_INCREF(__pyx_v_table);
      __Pyx_GIVEREF(__pyx_v_table);
      PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_13, __pyx_v_table);
      __Pyx_INCREF(__pyx_v_threshold);
      __Pyx_GIVEREF(__pyx_v_threshold);
      PyTuple_SET_ITEM(__pyx_t_11, 3+__pyx_t_13, __pyx_v_threshold);
      __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1343, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_1 = ((!__pyx_t_2) != 0);

      /* "gigaword2feature.pyx":1342
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 *     else:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if \             # <<<<<<<<<<<<<<
 *                          not callback.keep( (b,c,e), estimate, table, threshold ) ] )
 * 
 */
      if (__pyx_t_1) {
        __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_e);
        __Pyx_INCREF(__pyx_v_c);
        __Pyx_GIVEREF(__pyx_v_c);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_c);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 1342, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PySet_New(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_removed = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "gigaword2feature.pyx":1345
 *                          not callback.keep( (b,c,e), estimate, table, threshold ) ] )
 * 
 *     estimate = estimate - removed             # <<<<<<<<<<<<<<
 * 
 *     for (b1, e1, c1) in estimate:
 */
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_estimate, __pyx_v_removed); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1347
 *     estimate = estimate - removed
 * 
 *     for (b1, e1, c1) in estimate:             # <<<<<<<<<<<<<<
 *         for (b2, e2, c2) in estimate:
 *             if b2 <= b1 < e1 < e2 or b2 < b1 < e1 <= e2:
 */
  if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
    __pyx_t_3 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1347, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1347, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1347, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1347, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1347, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_11);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_12 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_7); if (unlikely(!__pyx_t_9)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_8 = __pyx_t_12(__pyx_t_7); if (unlikely(!__pyx_t_8)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      index = 2; __pyx_t_11 = __pyx_t_12(__pyx_t_7); if (unlikely(!__pyx_t_11)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_7), 3) < 0) __PYX_ERR(0, 1347, __pyx_L1_error)
      __pyx_t_12 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L17_unpacking_done;
      __pyx_L16_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_12 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1347, __pyx_L1_error)
      __pyx_L17_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_b1, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_e1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_c1, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "gigaword2feature.pyx":1348
 * 
 *     for (b1, e1, c1) in estimate:
 *         for (b2, e2, c2) in estimate:             # <<<<<<<<<<<<<<
 *             if b2 <= b1 < e1 < e2 or b2 < b1 < e1 <= e2:
 *                 removed.add( (b1, e1, c1) )
 */
    if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
      __pyx_t_4 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_4); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1348, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_13); __Pyx_INCREF(__pyx_t_11); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1348, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1348, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_13); __Pyx_INCREF(__pyx_t_11); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 1348, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1348, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_14(__pyx_t_4);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1348, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
        PyObject* sequence = __pyx_t_11;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1348, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_8 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L20_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        index = 1; __pyx_t_9 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L20_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        index = 2; __pyx_t_7 = __pyx_t_12(__pyx_t_10); if (unlikely(!__pyx_t_7)) goto __pyx_L20_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_10), 3) < 0) __PYX_ERR(0, 1348, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L21_unpacking_done;
        __pyx_L20_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_12 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1348, __pyx_L1_error)
        __pyx_L21_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_b2, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_e2, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_c2, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "gigaword2feature.pyx":1349
 *     for (b1, e1, c1) in estimate:
 *         for (b2, e2, c2) in estimate:
 *             if b2 <= b1 < e1 < e2 or b2 < b1 < e1 <= e2:             # <<<<<<<<<<<<<<
 *                 removed.add( (b1, e1, c1) )
 *     estimate = estimate - removed
 */
      __pyx_t_11 = PyObject_RichCompare(__pyx_v_b2, __pyx_v_b1, Py_LE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1349, __pyx_L1_error)
      if (__Pyx_PyObject_IsTrue(__pyx_t_11)) {
        __Pyx_DECREF(__pyx_t_11);
        __pyx_t_11 = PyObject_RichCompare(__pyx_v_b1, __pyx_v_e1, Py_LT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1349, __pyx_L1_error)
        if (__Pyx_PyObject_IsTrue(__pyx_t_11)) {
          __Pyx_DECREF(__pyx_t_11);
          __pyx_t_11 = PyObject_RichCompare(__pyx_v_e1, __pyx_v_e2, Py_LT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1349, __pyx_L1_error)
        }
      }
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_11 = PyObject_RichCompare(__pyx_v_b2, __pyx_v_b1, Py_LT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1349, __pyx_L1_error)
      if (__Pyx_PyObject_IsTrue(__pyx_t_11)) {
        __Pyx_DECREF(__pyx_t_11);
        __pyx_t_11 = PyObject_RichCompare(__pyx_v_b1, __pyx_v_e1, Py_LT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1349, __pyx_L1_error)
        if (__Pyx_PyObject_IsTrue(__pyx_t_11)) {
          __Pyx_DECREF(__pyx_t_11);
          __pyx_t_11 = PyObject_RichCompare(__pyx_v_e1, __pyx_v_e2, Py_LE); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1349, __pyx_L1_error)
        }
      }
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1349, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_1 = __pyx_t_2;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_1) {

        /* "gigaword2feature.pyx":1350
 *         for (b2, e2, c2) in estimate:
 *             if b2 <= b1 < e1 < e2 or b2 < b1 < e1 <= e2:
 *                 removed.add( (b1, e1, c1) )             # <<<<<<<<<<<<<<
 *     estimate = estimate - removed
 * 
 */
        __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1350, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_v_b1);
        __Pyx_GIVEREF(__pyx_v_b1);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_b1);
        __Pyx_INCREF(__pyx_v_e1);
        __Pyx_GIVEREF(__pyx_v_e1);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_e1);
        __Pyx_INCREF(__pyx_v_c1);
        __Pyx_GIVEREF(__pyx_v_c1);
        PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_v_c1);
        __pyx_t_15 = PySet_Add(__pyx_v_removed, __pyx_t_11); if (unlikely(__pyx_t_15 == -1)) __PYX_ERR(0, 1350, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "gigaword2feature.pyx":1349
 *     for (b1, e1, c1) in estimate:
 *         for (b2, e2, c2) in estimate:
 *             if b2 <= b1 < e1 < e2 or b2 < b1 < e1 <= e2:             # <<<<<<<<<<<<<<
 *                 removed.add( (b1, e1, c1) )
 *     estimate = estimate - removed
 */
      }

      /* "gigaword2feature.pyx":1348
 * 
 *     for (b1, e1, c1) in estimate:
 *         for (b2, e2, c2) in estimate:             # <<<<<<<<<<<<<<
 *             if b2 <= b1 < e1 < e2 or b2 < b1 < e1 <= e2:
 *                 removed.add( (b1, e1, c1) )
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":1347
 *     estimate = estimate - removed
 * 
 *     for (b1, e1, c1) in estimate:             # <<<<<<<<<<<<<<
 *         for (b2, e2, c2) in estimate:
 *             if b2 <= b1 < e1 < e2 or b2 < b1 < e1 <= e2:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1351
 *             if b2 <= b1 < e1 < e2 or b2 < b1 < e1 <= e2:
 *                 removed.add( (b1, e1, c1) )
 *     estimate = estimate - removed             # <<<<<<<<<<<<<<
 * 
 *     return __decode_algo_1( sentence, estimate, table, threshold, callback )
 */
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_estimate, __pyx_v_removed); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1353
 *     estimate = estimate - removed
 * 
 *     return __decode_algo_1( sentence, estimate, table, threshold, callback )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_decode_algo_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_11) {
    __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_11); __pyx_t_11 = NULL;
  }
  __Pyx_INCREF(__pyx_v_sentence);
  __Pyx_GIVEREF(__pyx_v_sentence);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_5, __pyx_v_sentence);
  __Pyx_INCREF(__pyx_v_estimate);
  __Pyx_GIVEREF(__pyx_v_estimate);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_5, __pyx_v_estimate);
  __Pyx_INCREF(__pyx_v_table);
  __Pyx_GIVEREF(__pyx_v_table);
  PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_5, __pyx_v_table);
  __Pyx_INCREF(__pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_5, __pyx_v_threshold);
  __Pyx_INCREF(__pyx_v_callback);
  __Pyx_GIVEREF(__pyx_v_callback);
  PyTuple_SET_ITEM(__pyx_t_7, 4+__pyx_t_5, __pyx_v_callback);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":1338
 * 
 * 
 * def __decode_algo_3( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     if callback is None:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("gigaword2feature.__decode_algo_3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_removed);
  __Pyx_XDECREF(__pyx_v_b1);
  __Pyx_XDECREF(__pyx_v_e1);
  __Pyx_XDECREF(__pyx_v_c1);
  __Pyx_XDECREF(__pyx_v_b2);
  __Pyx_XDECREF(__pyx_v_e2);
  __Pyx_XDECREF(__pyx_v_c2);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_estimate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1357
 * 
 * 
 * def decode( sentence, estimate, table, threshold, algorithm, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_31decode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_16gigaword2feature_30decode[] = "\n    Parameters\n    ----------\n        sentence : list\n            list of words\n\n        estimate : iterable\n            a groups of (begin,end,class) triples. 'begin' and 'end' is and\n            inclusive-exclusive pair\n\n        table : numpy.ndarray\n\n\n        threshold : float\n            0 <= 'threshold' <= 1, probability under which is cut\n\n        algorithm : int or list\n            1 highest first; 2 longest coverage; 3 subsumssion removal\n\n    Returns\n    -------\n        estimate : list\n            (begin,end,class) trples with less overlapping based on 'algorithm'\n    ";
static PyMethodDef __pyx_mdef_16gigaword2feature_31decode = {"decode", (PyCFunction)__pyx_pw_16gigaword2feature_31decode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_16gigaword2feature_30decode};
static PyObject *__pyx_pw_16gigaword2feature_31decode(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sentence = 0;
  PyObject *__pyx_v_estimate = 0;
  PyObject *__pyx_v_table = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sentence,&__pyx_n_s_estimate,&__pyx_n_s_table,&__pyx_n_s_threshold,&__pyx_n_s_algorithm,&__pyx_n_s_callback,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decode", 0, 5, 6, 1); __PYX_ERR(0, 1357, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_table)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decode", 0, 5, 6, 2); __PYX_ERR(0, 1357, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decode", 0, 5, 6, 3); __PYX_ERR(0, 1357, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_algorithm)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decode", 0, 5, 6, 4); __PYX_ERR(0, 1357, __pyx_L3_error)
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_callback);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decode") < 0)) __PYX_ERR(0, 1357, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sentence = values[0];
    __pyx_v_estimate = values[1];
    __pyx_v_table = values[2];
    __pyx_v_threshold = values[3];
    __pyx_v_algorithm = values[4];
    __pyx_v_callback = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decode", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.decode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_30decode(__pyx_self, __pyx_v_sentence, __pyx_v_estimate, __pyx_v_table, __pyx_v_threshold, __pyx_v_algorithm, __pyx_v_callback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_16gigaword2feature_30decode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence, PyObject *__pyx_v_estimate, PyObject *__pyx_v_table, PyObject *__pyx_v_threshold, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_callback) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_b1 = NULL;
  PyObject *__pyx_v_e1 = NULL;
  PyObject *__pyx_v_c1 = NULL;
  PyObject *__pyx_v_candidate = NULL;
  PyObject *__pyx_v_b2 = NULL;
  PyObject *__pyx_v_e2 = NULL;
  PyObject *__pyx_v_c2 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("decode", 0);
  __Pyx_INCREF(__pyx_v_estimate);

  /* "gigaword2feature.pyx":1382
 *             (begin,end,class) trples with less overlapping based on 'algorithm'
 *     """
 *     if not isinstance( algorithm, list ):             # <<<<<<<<<<<<<<
 *         if not isinstance( estimate, set ):
 *             estimate = set( estimate )
 */
  __pyx_t_1 = PyList_Check(__pyx_v_algorithm); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gigaword2feature.pyx":1383
 *     """
 *     if not isinstance( algorithm, list ):
 *         if not isinstance( estimate, set ):             # <<<<<<<<<<<<<<
 *             estimate = set( estimate )
 *         assert algorithm in [1, 2, 3], 'only 3 algorithms are supported'
 */
    __pyx_t_2 = PySet_Check(__pyx_v_estimate); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":1384
 *     if not isinstance( algorithm, list ):
 *         if not isinstance( estimate, set ):
 *             estimate = set( estimate )             # <<<<<<<<<<<<<<
 *         assert algorithm in [1, 2, 3], 'only 3 algorithms are supported'
 * 
 */
      __pyx_t_3 = PySet_New(__pyx_v_estimate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "gigaword2feature.pyx":1383
 *     """
 *     if not isinstance( algorithm, list ):
 *         if not isinstance( estimate, set ):             # <<<<<<<<<<<<<<
 *             estimate = set( estimate )
 *         assert algorithm in [1, 2, 3], 'only 3 algorithms are supported'
 */
    }

    /* "gigaword2feature.pyx":1385
 *         if not isinstance( estimate, set ):
 *             estimate = set( estimate )
 *         assert algorithm in [1, 2, 3], 'only 3 algorithms are supported'             # <<<<<<<<<<<<<<
 * 
 *         if algorithm == 1:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __Pyx_INCREF(__pyx_v_algorithm);
      __pyx_t_3 = __pyx_v_algorithm;
      __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1385, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L5_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1385, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L5_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1385, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1385, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = __pyx_t_2;
      __pyx_L5_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_1 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_only_3_algorithms_are_supported);
        __PYX_ERR(0, 1385, __pyx_L1_error)
      }
    }
    #endif

    /* "gigaword2feature.pyx":1387
 *         assert algorithm in [1, 2, 3], 'only 3 algorithms are supported'
 * 
 *         if algorithm == 1:             # <<<<<<<<<<<<<<
 *             return __decode_algo_1( sentence, estimate, table, threshold, callback )
 *         if algorithm == 2:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_algorithm, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":1388
 * 
 *         if algorithm == 1:
 *             return __decode_algo_1( sentence, estimate, table, threshold, callback )             # <<<<<<<<<<<<<<
 *         if algorithm == 2:
 *             return __decode_algo_2( sentence, estimate, table, threshold, callback )
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_decode_algo_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(5+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_sentence);
      __Pyx_GIVEREF(__pyx_v_sentence);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_sentence);
      __Pyx_INCREF(__pyx_v_estimate);
      __Pyx_GIVEREF(__pyx_v_estimate);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_estimate);
      __Pyx_INCREF(__pyx_v_table);
      __Pyx_GIVEREF(__pyx_v_table);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_table);
      __Pyx_INCREF(__pyx_v_threshold);
      __Pyx_GIVEREF(__pyx_v_threshold);
      PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_v_threshold);
      __Pyx_INCREF(__pyx_v_callback);
      __Pyx_GIVEREF(__pyx_v_callback);
      PyTuple_SET_ITEM(__pyx_t_7, 4+__pyx_t_6, __pyx_v_callback);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1388, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gigaword2feature.pyx":1387
 *         assert algorithm in [1, 2, 3], 'only 3 algorithms are supported'
 * 
 *         if algorithm == 1:             # <<<<<<<<<<<<<<
 *             return __decode_algo_1( sentence, estimate, table, threshold, callback )
 *         if algorithm == 2:
 */
    }

    /* "gigaword2feature.pyx":1389
 *         if algorithm == 1:
 *             return __decode_algo_1( sentence, estimate, table, threshold, callback )
 *         if algorithm == 2:             # <<<<<<<<<<<<<<
 *             return __decode_algo_2( sentence, estimate, table, threshold, callback )
 *         if algorithm == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_algorithm, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1389, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":1390
 *             return __decode_algo_1( sentence, estimate, table, threshold, callback )
 *         if algorithm == 2:
 *             return __decode_algo_2( sentence, estimate, table, threshold, callback )             # <<<<<<<<<<<<<<
 *         if algorithm == 3:
 *             return __decode_algo_3( sentence, estimate, table, threshold, callback )
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_decode_algo_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_5 = PyTuple_New(5+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_sentence);
      __Pyx_GIVEREF(__pyx_v_sentence);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_v_sentence);
      __Pyx_INCREF(__pyx_v_estimate);
      __Pyx_GIVEREF(__pyx_v_estimate);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_estimate);
      __Pyx_INCREF(__pyx_v_table);
      __Pyx_GIVEREF(__pyx_v_table);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, __pyx_v_table);
      __Pyx_INCREF(__pyx_v_threshold);
      __Pyx_GIVEREF(__pyx_v_threshold);
      PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_6, __pyx_v_threshold);
      __Pyx_INCREF(__pyx_v_callback);
      __Pyx_GIVEREF(__pyx_v_callback);
      PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_6, __pyx_v_callback);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1390, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gigaword2feature.pyx":1389
 *         if algorithm == 1:
 *             return __decode_algo_1( sentence, estimate, table, threshold, callback )
 *         if algorithm == 2:             # <<<<<<<<<<<<<<
 *             return __decode_algo_2( sentence, estimate, table, threshold, callback )
 *         if algorithm == 3:
 */
    }

    /* "gigaword2feature.pyx":1391
 *         if algorithm == 2:
 *             return __decode_algo_2( sentence, estimate, table, threshold, callback )
 *         if algorithm == 3:             # <<<<<<<<<<<<<<
 *             return __decode_algo_3( sentence, estimate, table, threshold, callback )
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_algorithm, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":1392
 *             return __decode_algo_2( sentence, estimate, table, threshold, callback )
 *         if algorithm == 3:
 *             return __decode_algo_3( sentence, estimate, table, threshold, callback )             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_decode_algo_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      __pyx_t_7 = PyTuple_New(5+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_sentence);
      __Pyx_GIVEREF(__pyx_v_sentence);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_sentence);
      __Pyx_INCREF(__pyx_v_estimate);
      __Pyx_GIVEREF(__pyx_v_estimate);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_estimate);
      __Pyx_INCREF(__pyx_v_table);
      __Pyx_GIVEREF(__pyx_v_table);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_table);
      __Pyx_INCREF(__pyx_v_threshold);
      __Pyx_GIVEREF(__pyx_v_threshold);
      PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_v_threshold);
      __Pyx_INCREF(__pyx_v_callback);
      __Pyx_GIVEREF(__pyx_v_callback);
      PyTuple_SET_ITEM(__pyx_t_7, 4+__pyx_t_6, __pyx_v_callback);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1392, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gigaword2feature.pyx":1391
 *         if algorithm == 2:
 *             return __decode_algo_2( sentence, estimate, table, threshold, callback )
 *         if algorithm == 3:             # <<<<<<<<<<<<<<
 *             return __decode_algo_3( sentence, estimate, table, threshold, callback )
 * 
 */
    }

    /* "gigaword2feature.pyx":1382
 *             (begin,end,class) trples with less overlapping based on 'algorithm'
 *     """
 *     if not isinstance( algorithm, list ):             # <<<<<<<<<<<<<<
 *         if not isinstance( estimate, set ):
 *             estimate = set( estimate )
 */
    goto __pyx_L3;
  }

  /* "gigaword2feature.pyx":1395
 * 
 *     else:
 *         assert isinstance( threshold, list ) and len(threshold) == len(algorithm),\             # <<<<<<<<<<<<<<
 *                 '#threshold and #algorithm do not match'
 *         result = decode( sentence, estimate, table, threshold[0], algorithm[0], callback )
 */
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = PyList_Check(__pyx_v_threshold); 
      __pyx_t_8 = (__pyx_t_2 != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_6 = PyObject_Length(__pyx_v_threshold); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __pyx_t_9 = PyObject_Length(__pyx_v_algorithm); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1395, __pyx_L1_error)
      __pyx_t_8 = ((__pyx_t_6 == __pyx_t_9) != 0);
      __pyx_t_1 = __pyx_t_8;
      __pyx_L11_bool_binop_done:;
      if (unlikely(!__pyx_t_1)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_threshold_and_algorithm_do_not);
        __PYX_ERR(0, 1395, __pyx_L1_error)
      }
    }
    #endif

    /* "gigaword2feature.pyx":1397
 *         assert isinstance( threshold, list ) and len(threshold) == len(algorithm),\
 *                 '#threshold and #algorithm do not match'
 *         result = decode( sentence, estimate, table, threshold[0], algorithm[0], callback )             # <<<<<<<<<<<<<<
 * 
 *         if len( algorithm ) > 1:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_threshold, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_algorithm, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_9 = 1;
      }
    }
    __pyx_t_11 = PyTuple_New(6+__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sentence);
    __Pyx_GIVEREF(__pyx_v_sentence);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_9, __pyx_v_sentence);
    __Pyx_INCREF(__pyx_v_estimate);
    __Pyx_GIVEREF(__pyx_v_estimate);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_9, __pyx_v_estimate);
    __Pyx_INCREF(__pyx_v_table);
    __Pyx_GIVEREF(__pyx_v_table);
    PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_9, __pyx_v_table);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 3+__pyx_t_9, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_11, 4+__pyx_t_9, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_callback);
    __Pyx_GIVEREF(__pyx_v_callback);
    PyTuple_SET_ITEM(__pyx_t_11, 5+__pyx_t_9, __pyx_v_callback);
    __pyx_t_7 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_result = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "gigaword2feature.pyx":1399
 *         result = decode( sentence, estimate, table, threshold[0], algorithm[0], callback )
 * 
 *         if len( algorithm ) > 1:             # <<<<<<<<<<<<<<
 *             for b1,e1,c1 in copy.deepcopy( result ):
 *                 candidate = set()
 */
    __pyx_t_9 = PyObject_Length(__pyx_v_algorithm); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 1399, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_9 > 1) != 0);
    if (__pyx_t_1) {

      /* "gigaword2feature.pyx":1400
 * 
 *         if len( algorithm ) > 1:
 *             for b1,e1,c1 in copy.deepcopy( result ):             # <<<<<<<<<<<<<<
 *                 candidate = set()
 *                 for b2,e2,c2 in estimate:
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_deepcopy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_result);
        __Pyx_GIVEREF(__pyx_v_result);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_result);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_11 = __pyx_t_3; __Pyx_INCREF(__pyx_t_11); __pyx_t_9 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1400, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_11))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_11)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1400, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_11, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1400, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_11, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_12(__pyx_t_11);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1400, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1400, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          #else
          __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1400, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1400, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1400, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_10 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1400, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext;
          index = 0; __pyx_t_5 = __pyx_t_13(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L16_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          index = 1; __pyx_t_4 = __pyx_t_13(__pyx_t_10); if (unlikely(!__pyx_t_4)) goto __pyx_L16_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          index = 2; __pyx_t_7 = __pyx_t_13(__pyx_t_10); if (unlikely(!__pyx_t_7)) goto __pyx_L16_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_10), 3) < 0) __PYX_ERR(0, 1400, __pyx_L1_error)
          __pyx_t_13 = NULL;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L17_unpacking_done;
          __pyx_L16_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_13 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1400, __pyx_L1_error)
          __pyx_L17_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_b1, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_e1, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_c1, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "gigaword2feature.pyx":1401
 *         if len( algorithm ) > 1:
 *             for b1,e1,c1 in copy.deepcopy( result ):
 *                 candidate = set()             # <<<<<<<<<<<<<<
 *                 for b2,e2,c2 in estimate:
 *                     if c1 != c2 and (b1 <= b2 < e2 < e1 or b1 < b2 < e2 <= e1):
 */
        __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_XDECREF_SET(__pyx_v_candidate, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "gigaword2feature.pyx":1402
 *             for b1,e1,c1 in copy.deepcopy( result ):
 *                 candidate = set()
 *                 for b2,e2,c2 in estimate:             # <<<<<<<<<<<<<<
 *                     if c1 != c2 and (b1 <= b2 < e2 < e1 or b1 < b2 < e2 <= e1):
 *                         candidate.add( (b2,e2,c2) )
 */
        if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
          __pyx_t_3 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
          __pyx_t_14 = NULL;
        } else {
          __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1402, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1402, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_14)) {
            if (likely(PyList_CheckExact(__pyx_t_3))) {
              if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_7); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1402, __pyx_L1_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1402, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_7); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1402, __pyx_L1_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1402, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_14(__pyx_t_3);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1402, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
            PyObject* sequence = __pyx_t_7;
            #if CYTHON_COMPILING_IN_CPYTHON
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 1402, __pyx_L1_error)
            }
            #if CYTHON_COMPILING_IN_CPYTHON
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
            } else {
              __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
            }
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_10);
            #else
            __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1402, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1402, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_10 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1402, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_15 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1402, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_13 = Py_TYPE(__pyx_t_15)->tp_iternext;
            index = 0; __pyx_t_4 = __pyx_t_13(__pyx_t_15); if (unlikely(!__pyx_t_4)) goto __pyx_L20_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_4);
            index = 1; __pyx_t_5 = __pyx_t_13(__pyx_t_15); if (unlikely(!__pyx_t_5)) goto __pyx_L20_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_5);
            index = 2; __pyx_t_10 = __pyx_t_13(__pyx_t_15); if (unlikely(!__pyx_t_10)) goto __pyx_L20_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_10);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_15), 3) < 0) __PYX_ERR(0, 1402, __pyx_L1_error)
            __pyx_t_13 = NULL;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            goto __pyx_L21_unpacking_done;
            __pyx_L20_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_13 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 1402, __pyx_L1_error)
            __pyx_L21_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_b2, __pyx_t_4);
          __pyx_t_4 = 0;
          __Pyx_XDECREF_SET(__pyx_v_e2, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_XDECREF_SET(__pyx_v_c2, __pyx_t_10);
          __pyx_t_10 = 0;

          /* "gigaword2feature.pyx":1403
 *                 candidate = set()
 *                 for b2,e2,c2 in estimate:
 *                     if c1 != c2 and (b1 <= b2 < e2 < e1 or b1 < b2 < e2 <= e1):             # <<<<<<<<<<<<<<
 *                         candidate.add( (b2,e2,c2) )
 * 
 */
          __pyx_t_7 = PyObject_RichCompare(__pyx_v_c1, __pyx_v_c2, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1403, __pyx_L1_error)
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1403, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (__pyx_t_8) {
          } else {
            __pyx_t_1 = __pyx_t_8;
            goto __pyx_L23_bool_binop_done;
          }
          __pyx_t_7 = PyObject_RichCompare(__pyx_v_b1, __pyx_v_b2, Py_LE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1403, __pyx_L1_error)
          if (__Pyx_PyObject_IsTrue(__pyx_t_7)) {
            __Pyx_DECREF(__pyx_t_7);
            __pyx_t_7 = PyObject_RichCompare(__pyx_v_b2, __pyx_v_e2, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1403, __pyx_L1_error)
            if (__Pyx_PyObject_IsTrue(__pyx_t_7)) {
              __Pyx_DECREF(__pyx_t_7);
              __pyx_t_7 = PyObject_RichCompare(__pyx_v_e2, __pyx_v_e1, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1403, __pyx_L1_error)
            }
          }
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1403, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (!__pyx_t_8) {
          } else {
            __pyx_t_1 = __pyx_t_8;
            goto __pyx_L23_bool_binop_done;
          }
          __pyx_t_7 = PyObject_RichCompare(__pyx_v_b1, __pyx_v_b2, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1403, __pyx_L1_error)
          if (__Pyx_PyObject_IsTrue(__pyx_t_7)) {
            __Pyx_DECREF(__pyx_t_7);
            __pyx_t_7 = PyObject_RichCompare(__pyx_v_b2, __pyx_v_e2, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1403, __pyx_L1_error)
            if (__Pyx_PyObject_IsTrue(__pyx_t_7)) {
              __Pyx_DECREF(__pyx_t_7);
              __pyx_t_7 = PyObject_RichCompare(__pyx_v_e2, __pyx_v_e1, Py_LE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1403, __pyx_L1_error)
            }
          }
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1403, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_1 = __pyx_t_8;
          __pyx_L23_bool_binop_done:;
          if (__pyx_t_1) {

            /* "gigaword2feature.pyx":1404
 *                 for b2,e2,c2 in estimate:
 *                     if c1 != c2 and (b1 <= b2 < e2 < e1 or b1 < b2 < e2 <= e1):
 *                         candidate.add( (b2,e2,c2) )             # <<<<<<<<<<<<<<
 * 
 *                 if callback is not None:
 */
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_candidate, __pyx_n_s_add); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1404, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1404, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_v_b2);
            __Pyx_GIVEREF(__pyx_v_b2);
            PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_b2);
            __Pyx_INCREF(__pyx_v_e2);
            __Pyx_GIVEREF(__pyx_v_e2);
            PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_e2);
            __Pyx_INCREF(__pyx_v_c2);
            __Pyx_GIVEREF(__pyx_v_c2);
            PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_c2);
            __pyx_t_4 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_10, function);
              }
            }
            if (!__pyx_t_4) {
              __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1404, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_GOTREF(__pyx_t_7);
            } else {
              __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1404, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_4); __pyx_t_4 = NULL;
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_5);
              __pyx_t_5 = 0;
              __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_15, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1404, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "gigaword2feature.pyx":1403
 *                 candidate = set()
 *                 for b2,e2,c2 in estimate:
 *                     if c1 != c2 and (b1 <= b2 < e2 < e1 or b1 < b2 < e2 <= e1):             # <<<<<<<<<<<<<<
 *                         candidate.add( (b2,e2,c2) )
 * 
 */
          }

          /* "gigaword2feature.pyx":1402
 *             for b1,e1,c1 in copy.deepcopy( result ):
 *                 candidate = set()
 *                 for b2,e2,c2 in estimate:             # <<<<<<<<<<<<<<
 *                     if c1 != c2 and (b1 <= b2 < e2 < e1 or b1 < b2 < e2 <= e1):
 *                         candidate.add( (b2,e2,c2) )
 */
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "gigaword2feature.pyx":1406
 *                         candidate.add( (b2,e2,c2) )
 * 
 *                 if callback is not None:             # <<<<<<<<<<<<<<
 *                     callback.update_state( result )
 * 
 */
        __pyx_t_1 = (__pyx_v_callback != Py_None);
        __pyx_t_8 = (__pyx_t_1 != 0);
        if (__pyx_t_8) {

          /* "gigaword2feature.pyx":1407
 * 
 *                 if callback is not None:
 *                     callback.update_state( result )             # <<<<<<<<<<<<<<
 * 
 *                 # result |= decode( sentence, candidate, table, threshold[1:], algorithm[1:], callback )
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_callback, __pyx_n_s_update_state); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1407, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (!__pyx_t_10) {
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
          } else {
            __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1407, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_10); __pyx_t_10 = NULL;
            __Pyx_INCREF(__pyx_v_result);
            __Pyx_GIVEREF(__pyx_v_result);
            PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_v_result);
            __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "gigaword2feature.pyx":1406
 *                         candidate.add( (b2,e2,c2) )
 * 
 *                 if callback is not None:             # <<<<<<<<<<<<<<
 *                     callback.update_state( result )
 * 
 */
        }

        /* "gigaword2feature.pyx":1411
 *                 # result |= decode( sentence, candidate, table, threshold[1:], algorithm[1:], callback )
 *                 # some adjacient tokens may merge and the merged one may produce conflit
 *                 candidate = decode( sentence, candidate, table, threshold[1:], algorithm[1:], callback )             # <<<<<<<<<<<<<<
 *                 for b2,e2,c2 in copy.deepcopy( candidate ):
 *                     if b2 == b1 and e2 == e1:
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_decode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1411, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_15 = __Pyx_PyObject_GetSlice(__pyx_v_threshold, 1, 0, NULL, NULL, &__pyx_slice__60, 1, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1411, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_v_algorithm, 1, 0, NULL, NULL, &__pyx_slice__61, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1411, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_6 = 1;
          }
        }
        __pyx_t_4 = PyTuple_New(6+__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1411, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_INCREF(__pyx_v_sentence);
        __Pyx_GIVEREF(__pyx_v_sentence);
        PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_6, __pyx_v_sentence);
        __Pyx_INCREF(__pyx_v_candidate);
        __Pyx_GIVEREF(__pyx_v_candidate);
        PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_6, __pyx_v_candidate);
        __Pyx_INCREF(__pyx_v_table);
        __Pyx_GIVEREF(__pyx_v_table);
        PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_6, __pyx_v_table);
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_6, __pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_4, 4+__pyx_t_6, __pyx_t_10);
        __Pyx_INCREF(__pyx_v_callback);
        __Pyx_GIVEREF(__pyx_v_callback);
        PyTuple_SET_ITEM(__pyx_t_4, 5+__pyx_t_6, __pyx_v_callback);
        __pyx_t_15 = 0;
        __pyx_t_10 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1411, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF_SET(__pyx_v_candidate, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "gigaword2feature.pyx":1412
 *                 # some adjacient tokens may merge and the merged one may produce conflit
 *                 candidate = decode( sentence, candidate, table, threshold[1:], algorithm[1:], callback )
 *                 for b2,e2,c2 in copy.deepcopy( candidate ):             # <<<<<<<<<<<<<<
 *                     if b2 == b1 and e2 == e1:
 *                         candidate.remove( (b2,e2,c2) )
 */
        __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_deepcopy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_7) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_candidate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1412, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1412, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_INCREF(__pyx_v_candidate);
          __Pyx_GIVEREF(__pyx_v_candidate);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_candidate);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1412, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
          __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
          __pyx_t_14 = NULL;
        } else {
          __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1412, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_14 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1412, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        for (;;) {
          if (likely(!__pyx_t_14)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1412, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1412, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 1412, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1412, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_14(__pyx_t_4);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1412, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_3);
          }
          if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
            PyObject* sequence = __pyx_t_3;
            #if CYTHON_COMPILING_IN_CPYTHON
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 1412, __pyx_L1_error)
            }
            #if CYTHON_COMPILING_IN_CPYTHON
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_15 = PyTuple_GET_ITEM(sequence, 2); 
            } else {
              __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_15 = PyList_GET_ITEM(sequence, 2); 
            }
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_15);
            #else
            __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1412, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1412, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_15 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1412, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            #endif
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1412, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext;
            index = 0; __pyx_t_10 = __pyx_t_13(__pyx_t_5); if (unlikely(!__pyx_t_10)) goto __pyx_L29_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_10);
            index = 1; __pyx_t_7 = __pyx_t_13(__pyx_t_5); if (unlikely(!__pyx_t_7)) goto __pyx_L29_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_7);
            index = 2; __pyx_t_15 = __pyx_t_13(__pyx_t_5); if (unlikely(!__pyx_t_15)) goto __pyx_L29_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_15);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_5), 3) < 0) __PYX_ERR(0, 1412, __pyx_L1_error)
            __pyx_t_13 = NULL;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L30_unpacking_done;
            __pyx_L29_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_13 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 1412, __pyx_L1_error)
            __pyx_L30_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_b2, __pyx_t_10);
          __pyx_t_10 = 0;
          __Pyx_XDECREF_SET(__pyx_v_e2, __pyx_t_7);
          __pyx_t_7 = 0;
          __Pyx_XDECREF_SET(__pyx_v_c2, __pyx_t_15);
          __pyx_t_15 = 0;

          /* "gigaword2feature.pyx":1413
 *                 candidate = decode( sentence, candidate, table, threshold[1:], algorithm[1:], callback )
 *                 for b2,e2,c2 in copy.deepcopy( candidate ):
 *                     if b2 == b1 and e2 == e1:             # <<<<<<<<<<<<<<
 *                         candidate.remove( (b2,e2,c2) )
 *                 result |= candidate
 */
          __pyx_t_3 = PyObject_RichCompare(__pyx_v_b2, __pyx_v_b1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1413, __pyx_L1_error)
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1413, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__pyx_t_1) {
          } else {
            __pyx_t_8 = __pyx_t_1;
            goto __pyx_L32_bool_binop_done;
          }
          __pyx_t_3 = PyObject_RichCompare(__pyx_v_e2, __pyx_v_e1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1413, __pyx_L1_error)
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1413, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_8 = __pyx_t_1;
          __pyx_L32_bool_binop_done:;
          if (__pyx_t_8) {

            /* "gigaword2feature.pyx":1414
 *                 for b2,e2,c2 in copy.deepcopy( candidate ):
 *                     if b2 == b1 and e2 == e1:
 *                         candidate.remove( (b2,e2,c2) )             # <<<<<<<<<<<<<<
 *                 result |= candidate
 * 
 */
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_candidate, __pyx_n_s_remove); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1414, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1414, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_INCREF(__pyx_v_b2);
            __Pyx_GIVEREF(__pyx_v_b2);
            PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_b2);
            __Pyx_INCREF(__pyx_v_e2);
            __Pyx_GIVEREF(__pyx_v_e2);
            PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_e2);
            __Pyx_INCREF(__pyx_v_c2);
            __Pyx_GIVEREF(__pyx_v_c2);
            PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_c2);
            __pyx_t_10 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
              }
            }
            if (!__pyx_t_10) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1414, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_GOTREF(__pyx_t_3);
            } else {
              __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1414, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_10); __pyx_t_10 = NULL;
              __Pyx_GIVEREF(__pyx_t_7);
              PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_7);
              __pyx_t_7 = 0;
              __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1414, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "gigaword2feature.pyx":1413
 *                 candidate = decode( sentence, candidate, table, threshold[1:], algorithm[1:], callback )
 *                 for b2,e2,c2 in copy.deepcopy( candidate ):
 *                     if b2 == b1 and e2 == e1:             # <<<<<<<<<<<<<<
 *                         candidate.remove( (b2,e2,c2) )
 *                 result |= candidate
 */
          }

          /* "gigaword2feature.pyx":1412
 *                 # some adjacient tokens may merge and the merged one may produce conflit
 *                 candidate = decode( sentence, candidate, table, threshold[1:], algorithm[1:], callback )
 *                 for b2,e2,c2 in copy.deepcopy( candidate ):             # <<<<<<<<<<<<<<
 *                     if b2 == b1 and e2 == e1:
 *                         candidate.remove( (b2,e2,c2) )
 */
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "gigaword2feature.pyx":1415
 *                     if b2 == b1 and e2 == e1:
 *                         candidate.remove( (b2,e2,c2) )
 *                 result |= candidate             # <<<<<<<<<<<<<<
 * 
 *                 if callback is not None:
 */
        __pyx_t_4 = PyNumber_InPlaceOr(__pyx_v_result, __pyx_v_candidate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1415, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "gigaword2feature.pyx":1417
 *                 result |= candidate
 * 
 *                 if callback is not None:             # <<<<<<<<<<<<<<
 *                     callback.restore_state()
 *         return result
 */
        __pyx_t_8 = (__pyx_v_callback != Py_None);
        __pyx_t_1 = (__pyx_t_8 != 0);
        if (__pyx_t_1) {

          /* "gigaword2feature.pyx":1418
 * 
 *                 if callback is not None:
 *                     callback.restore_state()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_callback, __pyx_n_s_restore_state); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1418, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_15 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (__pyx_t_15) {
            __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1418, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          } else {
            __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1418, __pyx_L1_error)
          }
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "gigaword2feature.pyx":1417
 *                 result |= candidate
 * 
 *                 if callback is not None:             # <<<<<<<<<<<<<<
 *                     callback.restore_state()
 *         return result
 */
        }

        /* "gigaword2feature.pyx":1400
 * 
 *         if len( algorithm ) > 1:
 *             for b1,e1,c1 in copy.deepcopy( result ):             # <<<<<<<<<<<<<<
 *                 candidate = set()
 *                 for b2,e2,c2 in estimate:
 */
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "gigaword2feature.pyx":1399
 *         result = decode( sentence, estimate, table, threshold[0], algorithm[0], callback )
 * 
 *         if len( algorithm ) > 1:             # <<<<<<<<<<<<<<
 *             for b1,e1,c1 in copy.deepcopy( result ):
 *                 candidate = set()
 */
    }

    /* "gigaword2feature.pyx":1419
 *                 if callback is not None:
 *                     callback.restore_state()
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "gigaword2feature.pyx":1357
 * 
 * 
 * def decode( sentence, estimate, table, threshold, algorithm, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("gigaword2feature.decode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_b1);
  __Pyx_XDECREF(__pyx_v_e1);
  __Pyx_XDECREF(__pyx_v_c1);
  __Pyx_XDECREF(__pyx_v_candidate);
  __Pyx_XDECREF(__pyx_v_b2);
  __Pyx_XDECREF(__pyx_v_e2);
  __Pyx_XDECREF(__pyx_v_c2);
  __Pyx_XDECREF(__pyx_v_estimate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1424
 * 
 * 
 * def evaluation( prediction_parser, threshold, algorithm,             # <<<<<<<<<<<<<<
 *                 surpress_output = False, analysis = None, sentence_iterator = None,
 *                 n_label_type = 4, decoder_callback = None ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_33evaluation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_33evaluation = {"evaluation", (PyCFunction)__pyx_pw_16gigaword2feature_33evaluation, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_16gigaword2feature_33evaluation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_prediction_parser = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_v_algorithm = 0;
  PyObject *__pyx_v_surpress_output = 0;
  PyObject *__pyx_v_analysis = 0;
  PyObject *__pyx_v_sentence_iterator = 0;
  PyObject *__pyx_v_n_label_type = 0;
  PyObject *__pyx_v_decoder_callback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prediction_parser,&__pyx_n_s_threshold,&__pyx_n_s_algorithm,&__pyx_n_s_surpress_output,&__pyx_n_s_analysis,&__pyx_n_s_sentence_iterator,&__pyx_n_s_n_label_type,&__pyx_n_s_decoder_callback,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

    /* "gigaword2feature.pyx":1425
 * 
 * def evaluation( prediction_parser, threshold, algorithm,
 *                 surpress_output = False, analysis = None, sentence_iterator = None,             # <<<<<<<<<<<<<<
 *                 n_label_type = 4, decoder_callback = None ):
 *     # analysis = open( trainer_output.split('.')[0] + '.error', 'wb' )
 */
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)__pyx_int_4);

    /* "gigaword2feature.pyx":1426
 * def evaluation( prediction_parser, threshold, algorithm,
 *                 surpress_output = False, analysis = None, sentence_iterator = None,
 *                 n_label_type = 4, decoder_callback = None ):             # <<<<<<<<<<<<<<
 *     # analysis = open( trainer_output.split('.')[0] + '.error', 'wb' )
 * 
 */
    values[7] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_prediction_parser)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("evaluation", 0, 3, 8, 1); __PYX_ERR(0, 1424, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_algorithm)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("evaluation", 0, 3, 8, 2); __PYX_ERR(0, 1424, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_surpress_output);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_analysis);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence_iterator);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_label_type);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_decoder_callback);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluation") < 0)) __PYX_ERR(0, 1424, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_prediction_parser = values[0];
    __pyx_v_threshold = values[1];
    __pyx_v_algorithm = values[2];
    __pyx_v_surpress_output = values[3];
    __pyx_v_analysis = values[4];
    __pyx_v_sentence_iterator = values[5];
    __pyx_v_n_label_type = values[6];
    __pyx_v_decoder_callback = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluation", 0, 3, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1424, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.evaluation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_32evaluation(__pyx_self, __pyx_v_prediction_parser, __pyx_v_threshold, __pyx_v_algorithm, __pyx_v_surpress_output, __pyx_v_analysis, __pyx_v_sentence_iterator, __pyx_v_n_label_type, __pyx_v_decoder_callback);

  /* "gigaword2feature.pyx":1424
 * 
 * 
 * def evaluation( prediction_parser, threshold, algorithm,             # <<<<<<<<<<<<<<
 *                 surpress_output = False, analysis = None, sentence_iterator = None,
 *                 n_label_type = 4, decoder_callback = None ):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1533
 *         if analysis is not None and set(estimate) != set(actual):
 *             # print >> analysis, zip( range(len(sentence)), sentence )
 *             sorted_est.sort( key = lambda x : x[3], reverse = True )             # <<<<<<<<<<<<<<
 *             print >> analysis, '  '.join( [ w for w in sentence ] )
 *             print >> analysis, ''.join( [ ('%%-%dd' % (len(w) + 2)) % l for (l, w) in enumerate(sentence) ] )
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_10evaluation_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_10evaluation_lambda8 = {"lambda8", (PyCFunction)__pyx_pw_16gigaword2feature_10evaluation_lambda8, METH_O, 0};
static PyObject *__pyx_pw_16gigaword2feature_10evaluation_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda8 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda8(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda8", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gigaword2feature.evaluation.lambda8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1424
 * 
 * 
 * def evaluation( prediction_parser, threshold, algorithm,             # <<<<<<<<<<<<<<
 *                 surpress_output = False, analysis = None, sentence_iterator = None,
 *                 n_label_type = 4, decoder_callback = None ):
 */

static PyObject *__pyx_pf_16gigaword2feature_32evaluation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_prediction_parser, PyObject *__pyx_v_threshold, PyObject *__pyx_v_algorithm, PyObject *__pyx_v_surpress_output, PyObject *__pyx_v_analysis, PyObject *__pyx_v_sentence_iterator, PyObject *__pyx_v_n_label_type, PyObject *__pyx_v_decoder_callback) {
  PyObject *__pyx_v_si = NULL;
  PyObject *__pyx_v_pp = NULL;
  PyObject *__pyx_v_info = NULL;
  PyObject *__pyx_v_idx2ner = NULL;
  PyObject *__pyx_v_true_positive = NULL;
  PyObject *__pyx_v_false_positive = NULL;
  PyObject *__pyx_v_false_negative = NULL;
  PyObject *__pyx_v_sentence = NULL;
  PyObject *__pyx_v_table = NULL;
  PyObject *__pyx_v_estimate = NULL;
  PyObject *__pyx_v_actual = NULL;
  PyObject *__pyx_v_sorted_est = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_original = NULL;
  PyObject *__pyx_v_tag = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_o = NULL;
  PyObject *__pyx_v_t = NULL;
  double __pyx_v_precision;
  double __pyx_v_recall;
  double __pyx_v_f_beta;
  PyObject *__pyx_v_w = NULL;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *(*__pyx_t_19)(PyObject *);
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  double __pyx_t_22;
  double __pyx_t_23;
  double __pyx_t_24;
  __Pyx_RefNannySetupContext("evaluation", 0);

  /* "gigaword2feature.pyx":1429
 *     # analysis = open( trainer_output.split('.')[0] + '.error', 'wb' )
 * 
 *     si = sentence_iterator             # <<<<<<<<<<<<<<
 *     pp = prediction_parser
 *     info = ''
 */
  __Pyx_INCREF(__pyx_v_sentence_iterator);
  __pyx_v_si = __pyx_v_sentence_iterator;

  /* "gigaword2feature.pyx":1430
 * 
 *     si = sentence_iterator
 *     pp = prediction_parser             # <<<<<<<<<<<<<<
 *     info = ''
 * 
 */
  __Pyx_INCREF(__pyx_v_prediction_parser);
  __pyx_v_pp = __pyx_v_prediction_parser;

  /* "gigaword2feature.pyx":1431
 *     si = sentence_iterator
 *     pp = prediction_parser
 *     info = ''             # <<<<<<<<<<<<<<
 * 
 *     if n_label_type == 4:
 */
  __Pyx_INCREF(__pyx_kp_s__42);
  __pyx_v_info = __pyx_kp_s__42;

  /* "gigaword2feature.pyx":1433
 *     info = ''
 * 
 *     if n_label_type == 4:             # <<<<<<<<<<<<<<
 *         idx2ner = [ 'PER', 'LOC', 'ORG', 'MISC', 'O' ]
 *     else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_n_label_type, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gigaword2feature.pyx":1434
 * 
 *     if n_label_type == 4:
 *         idx2ner = [ 'PER', 'LOC', 'ORG', 'MISC', 'O' ]             # <<<<<<<<<<<<<<
 *     else:
 *         # idx2ner = [ 'PER_NAM', 'PER_NOM', 'ORG_NAM', 'GPE_NAM', 'LOC_NAM', 'FAC_NAM', 'TTL_NAM', 'O'  ]
 */
    __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PER);
    __Pyx_GIVEREF(__pyx_n_s_PER);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PER);
    __Pyx_INCREF(__pyx_n_s_LOC);
    __Pyx_GIVEREF(__pyx_n_s_LOC);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_LOC);
    __Pyx_INCREF(__pyx_n_s_ORG);
    __Pyx_GIVEREF(__pyx_n_s_ORG);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_ORG);
    __Pyx_INCREF(__pyx_n_s_MISC);
    __Pyx_GIVEREF(__pyx_n_s_MISC);
    PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_MISC);
    __Pyx_INCREF(__pyx_n_s_O);
    __Pyx_GIVEREF(__pyx_n_s_O);
    PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_O);
    __pyx_v_idx2ner = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":1433
 *     info = ''
 * 
 *     if n_label_type == 4:             # <<<<<<<<<<<<<<
 *         idx2ner = [ 'PER', 'LOC', 'ORG', 'MISC', 'O' ]
 *     else:
 */
    goto __pyx_L3;
  }

  /* "gigaword2feature.pyx":1437
 *     else:
 *         # idx2ner = [ 'PER_NAM', 'PER_NOM', 'ORG_NAM', 'GPE_NAM', 'LOC_NAM', 'FAC_NAM', 'TTL_NAM', 'O'  ]
 *         idx2ner = [ 'PER_NAM', 'ORG_NAM', 'GPE_NAM', 'LOC_NAM', 'FAC_NAM',             # <<<<<<<<<<<<<<
 *                     'PER_NOM', 'ORG_NOM', 'GPE_NOM', 'LOC_NOM', 'FAC_NOM',
 *                     'O' ]
 */
  /*else*/ {
    __pyx_t_1 = PyList_New(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PER_NAM);
    __Pyx_GIVEREF(__pyx_n_s_PER_NAM);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PER_NAM);
    __Pyx_INCREF(__pyx_n_s_ORG_NAM);
    __Pyx_GIVEREF(__pyx_n_s_ORG_NAM);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ORG_NAM);
    __Pyx_INCREF(__pyx_n_s_GPE_NAM);
    __Pyx_GIVEREF(__pyx_n_s_GPE_NAM);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_GPE_NAM);
    __Pyx_INCREF(__pyx_n_s_LOC_NAM);
    __Pyx_GIVEREF(__pyx_n_s_LOC_NAM);
    PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_LOC_NAM);
    __Pyx_INCREF(__pyx_n_s_FAC_NAM);
    __Pyx_GIVEREF(__pyx_n_s_FAC_NAM);
    PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_FAC_NAM);
    __Pyx_INCREF(__pyx_n_s_PER_NOM);
    __Pyx_GIVEREF(__pyx_n_s_PER_NOM);
    PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_PER_NOM);
    __Pyx_INCREF(__pyx_n_s_ORG_NOM);
    __Pyx_GIVEREF(__pyx_n_s_ORG_NOM);
    PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_ORG_NOM);
    __Pyx_INCREF(__pyx_n_s_GPE_NOM);
    __Pyx_GIVEREF(__pyx_n_s_GPE_NOM);
    PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_GPE_NOM);
    __Pyx_INCREF(__pyx_n_s_LOC_NOM);
    __Pyx_GIVEREF(__pyx_n_s_LOC_NOM);
    PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_LOC_NOM);
    __Pyx_INCREF(__pyx_n_s_FAC_NOM);
    __Pyx_GIVEREF(__pyx_n_s_FAC_NOM);
    PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_FAC_NOM);
    __Pyx_INCREF(__pyx_n_s_O);
    __Pyx_GIVEREF(__pyx_n_s_O);
    PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_O);
    __pyx_v_idx2ner = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "gigaword2feature.pyx":1443
 *     # each type maintains its own 'true-positive', 'false-positive' and 'false-negative' counts
 *     true_positive, false_positive, false_negative = \
 *         [ 0 ] * n_label_type, [ 0 ] * n_label_type, [ 0 ] * n_label_type             # <<<<<<<<<<<<<<
 * 
 *     for sentence, table, estimate, actual in pp:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
  { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_1, __pyx_v_n_label_type); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_temp);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_temp;
  }
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
  { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_3, __pyx_v_n_label_type); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_temp);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_temp;
  }
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_int_0);
  { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_4, __pyx_v_n_label_type); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_temp);
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_temp;
  }
  __pyx_v_true_positive = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_false_positive = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_false_negative = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":1445
 *         [ 0 ] * n_label_type, [ 0 ] * n_label_type, [ 0 ] * n_label_type
 * 
 *     for sentence, table, estimate, actual in pp:             # <<<<<<<<<<<<<<
 *         # 'sorted_est' also serves as a copy of 'estimate' before anything is applied
 *         sorted_est = [ (b, e, idx2ner[c], table[b][e - 1][1]) for (b, e, c) in estimate ]
 */
  if (likely(PyList_CheckExact(__pyx_v_pp)) || PyTuple_CheckExact(__pyx_v_pp)) {
    __pyx_t_4 = __pyx_v_pp; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_pp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1445, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1445, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1445, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1445, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 4)) {
        if (size > 4) __Pyx_RaiseTooManyValuesError(4);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1445, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 3); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 3); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
        for (i=0; i < 4; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1445, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      __pyx_t_10 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1445, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      for (index=0; index < 4; index++) {
        PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 4) < 0) __PYX_ERR(0, 1445, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1445, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_sentence, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_table, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_estimate, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_actual, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "gigaword2feature.pyx":1447
 *     for sentence, table, estimate, actual in pp:
 *         # 'sorted_est' also serves as a copy of 'estimate' before anything is applied
 *         sorted_est = [ (b, e, idx2ner[c], table[b][e - 1][1]) for (b, e, c) in estimate ]             # <<<<<<<<<<<<<<
 * 
 *         # if algorithm == 1:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
      __pyx_t_9 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_9); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_13 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1447, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1447, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_9, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1447, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1447, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_9, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1447, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        }
      } else {
        __pyx_t_8 = __pyx_t_13(__pyx_t_9);
        if (unlikely(!__pyx_t_8)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1447, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_8);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
        PyObject* sequence = __pyx_t_8;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 1447, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1447, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1447, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1447, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_14 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1447, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_11 = Py_TYPE(__pyx_t_14)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_11(__pyx_t_14); if (unlikely(!__pyx_t_7)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_1 = __pyx_t_11(__pyx_t_14); if (unlikely(!__pyx_t_1)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        index = 2; __pyx_t_10 = __pyx_t_11(__pyx_t_14); if (unlikely(!__pyx_t_10)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_14), 3) < 0) __PYX_ERR(0, 1447, __pyx_L1_error)
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L11_unpacking_done;
        __pyx_L10_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 1447, __pyx_L1_error)
        __pyx_L11_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_8 = PyObject_GetItem(__pyx_v_idx2ner, __pyx_v_c); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = PyObject_GetItem(__pyx_v_table, __pyx_v_b); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_e, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_10, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_7, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_b);
      __Pyx_GIVEREF(__pyx_v_b);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_b);
      __Pyx_INCREF(__pyx_v_e);
      __Pyx_GIVEREF(__pyx_v_e);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_e);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_1);
      __pyx_t_8 = 0;
      __pyx_t_1 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sorted_est, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "gigaword2feature.pyx":1527
 *         # estimate = best
 * 
 *         estimate = decode( sentence, estimate, table,             # <<<<<<<<<<<<<<
 *                            threshold, algorithm, decoder_callback )
 * 
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_decode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "gigaword2feature.pyx":1528
 * 
 *         estimate = decode( sentence, estimate, table,
 *                            threshold, algorithm, decoder_callback )             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_7 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_12 = 1;
      }
    }
    __pyx_t_1 = PyTuple_New(6+__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_sentence);
    __Pyx_GIVEREF(__pyx_v_sentence);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_12, __pyx_v_sentence);
    __Pyx_INCREF(__pyx_v_estimate);
    __Pyx_GIVEREF(__pyx_v_estimate);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_12, __pyx_v_estimate);
    __Pyx_INCREF(__pyx_v_table);
    __Pyx_GIVEREF(__pyx_v_table);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_12, __pyx_v_table);
    __Pyx_INCREF(__pyx_v_threshold);
    __Pyx_GIVEREF(__pyx_v_threshold);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_12, __pyx_v_threshold);
    __Pyx_INCREF(__pyx_v_algorithm);
    __Pyx_GIVEREF(__pyx_v_algorithm);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_12, __pyx_v_algorithm);
    __Pyx_INCREF(__pyx_v_decoder_callback);
    __Pyx_GIVEREF(__pyx_v_decoder_callback);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_12, __pyx_v_decoder_callback);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "gigaword2feature.pyx":1531
 * 
 * 
 *         if analysis is not None and set(estimate) != set(actual):             # <<<<<<<<<<<<<<
 *             # print >> analysis, zip( range(len(sentence)), sentence )
 *             sorted_est.sort( key = lambda x : x[3], reverse = True )
 */
    __pyx_t_15 = (__pyx_v_analysis != Py_None);
    __pyx_t_16 = (__pyx_t_15 != 0);
    if (__pyx_t_16) {
    } else {
      __pyx_t_2 = __pyx_t_16;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_3 = PySet_New(__pyx_v_estimate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PySet_New(__pyx_v_actual); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_9, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_16;
    __pyx_L13_bool_binop_done:;
    if (__pyx_t_2) {

      /* "gigaword2feature.pyx":1533
 *         if analysis is not None and set(estimate) != set(actual):
 *             # print >> analysis, zip( range(len(sentence)), sentence )
 *             sorted_est.sort( key = lambda x : x[3], reverse = True )             # <<<<<<<<<<<<<<
 *             print >> analysis, '  '.join( [ w for w in sentence ] )
 *             print >> analysis, ''.join( [ ('%%-%dd' % (len(w) + 2)) % l for (l, w) in enumerate(sentence) ] )
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sorted_est, __pyx_n_s_sort); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_10evaluation_lambda8, 0, __pyx_n_s_evaluation_locals_lambda, NULL, __pyx_n_s_gigaword2feature, __pyx_d, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_key, __pyx_t_3) < 0) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 1533, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1533, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "gigaword2feature.pyx":1534
 *             # print >> analysis, zip( range(len(sentence)), sentence )
 *             sorted_est.sort( key = lambda x : x[3], reverse = True )
 *             print >> analysis, '  '.join( [ w for w in sentence ] )             # <<<<<<<<<<<<<<
 *             print >> analysis, ''.join( [ ('%%-%dd' % (len(w) + 2)) % l for (l, w) in enumerate(sentence) ] )
 *             print >> analysis, '%10s' % 'raw-out: ', sorted_est
 */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_sentence)) || PyTuple_CheckExact(__pyx_v_sentence)) {
        __pyx_t_9 = __pyx_v_sentence; __Pyx_INCREF(__pyx_t_9); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_sentence); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1534, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_13 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1534, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1534, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1534, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1534, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_9, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1534, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_13(__pyx_t_9);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1534, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_1);
        __pyx_t_1 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_v_w))) __PYX_ERR(0, 1534, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyString_Join(__pyx_kp_s__62, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__Pyx_PrintOne(__pyx_v_analysis, __pyx_t_9) < 0) __PYX_ERR(0, 1534, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "gigaword2feature.pyx":1535
 *             sorted_est.sort( key = lambda x : x[3], reverse = True )
 *             print >> analysis, '  '.join( [ w for w in sentence ] )
 *             print >> analysis, ''.join( [ ('%%-%dd' % (len(w) + 2)) % l for (l, w) in enumerate(sentence) ] )             # <<<<<<<<<<<<<<
 *             print >> analysis, '%10s' % 'raw-out: ', sorted_est
 *             print >> analysis, '%10s' % 'estimate: ', [ (b, e, idx2ner[c]) for (b, e, c) in estimate ]
 */
      __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_3 = __pyx_int_0;
      if (likely(PyList_CheckExact(__pyx_v_sentence)) || PyTuple_CheckExact(__pyx_v_sentence)) {
        __pyx_t_1 = __pyx_v_sentence; __Pyx_INCREF(__pyx_t_1); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_sentence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1535, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1535, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1535, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1535, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1535, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_13(__pyx_t_1);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1535, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_w, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_3);
        __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3);
        __pyx_t_3 = __pyx_t_7;
        __pyx_t_7 = 0;
        __pyx_t_17 = PyObject_Length(__pyx_v_w); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 1535, __pyx_L1_error)
        __pyx_t_7 = PyInt_FromSsize_t((__pyx_t_17 + 2)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_dd, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyNumber_Remainder(__pyx_t_8, __pyx_v_l); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 1535, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__42, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__Pyx_PrintOne(__pyx_v_analysis, __pyx_t_3) < 0) __PYX_ERR(0, 1535, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "gigaword2feature.pyx":1536
 *             print >> analysis, '  '.join( [ w for w in sentence ] )
 *             print >> analysis, ''.join( [ ('%%-%dd' % (len(w) + 2)) % l for (l, w) in enumerate(sentence) ] )
 *             print >> analysis, '%10s' % 'raw-out: ', sorted_est             # <<<<<<<<<<<<<<
 *             print >> analysis, '%10s' % 'estimate: ', [ (b, e, idx2ner[c]) for (b, e, c) in estimate ]
 *             print >> analysis, '%10s' % 'actual: ', [ (b, e, idx2ner[c]) for (b, e, c) in actual ]
 */
      __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_10s, __pyx_kp_s_raw_out); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
      __Pyx_INCREF(__pyx_v_sorted_est);
      __Pyx_GIVEREF(__pyx_v_sorted_est);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_sorted_est);
      __pyx_t_3 = 0;
      if (__Pyx_Print(__pyx_v_analysis, __pyx_t_9, 1) < 0) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "gigaword2feature.pyx":1537
 *             print >> analysis, ''.join( [ ('%%-%dd' % (len(w) + 2)) % l for (l, w) in enumerate(sentence) ] )
 *             print >> analysis, '%10s' % 'raw-out: ', sorted_est
 *             print >> analysis, '%10s' % 'estimate: ', [ (b, e, idx2ner[c]) for (b, e, c) in estimate ]             # <<<<<<<<<<<<<<
 *             print >> analysis, '%10s' % 'actual: ', [ (b, e, idx2ner[c]) for (b, e, c) in actual ]
 * 
 */
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_10s, __pyx_kp_s_estimate_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_estimate)) || PyTuple_CheckExact(__pyx_v_estimate)) {
        __pyx_t_1 = __pyx_v_estimate; __Pyx_INCREF(__pyx_t_1); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1537, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1537, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1537, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1537, __pyx_L1_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1537, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_13(__pyx_t_1);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1537, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
          PyObject* sequence = __pyx_t_7;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1537, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_14 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_14 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_14);
          #else
          __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_14 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          #endif
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_18 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_18)->tp_iternext;
          index = 0; __pyx_t_8 = __pyx_t_11(__pyx_t_18); if (unlikely(!__pyx_t_8)) goto __pyx_L21_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          index = 1; __pyx_t_10 = __pyx_t_11(__pyx_t_18); if (unlikely(!__pyx_t_10)) goto __pyx_L21_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_10);
          index = 2; __pyx_t_14 = __pyx_t_11(__pyx_t_18); if (unlikely(!__pyx_t_14)) goto __pyx_L21_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_14);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_18), 3) < 0) __PYX_ERR(0, 1537, __pyx_L1_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          goto __pyx_L22_unpacking_done;
          __pyx_L21_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1537, __pyx_L1_error)
          __pyx_L22_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_14);
        __pyx_t_14 = 0;
        __pyx_t_7 = PyObject_GetItem(__pyx_v_idx2ner, __pyx_v_c); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_14 = PyTuple_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1537, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_e);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_t_7);
        __pyx_t_7 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 1537, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
      __pyx_t_9 = 0;
      __pyx_t_3 = 0;
      if (__Pyx_Print(__pyx_v_analysis, __pyx_t_1, 1) < 0) __PYX_ERR(0, 1537, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "gigaword2feature.pyx":1538
 *             print >> analysis, '%10s' % 'raw-out: ', sorted_est
 *             print >> analysis, '%10s' % 'estimate: ', [ (b, e, idx2ner[c]) for (b, e, c) in estimate ]
 *             print >> analysis, '%10s' % 'actual: ', [ (b, e, idx2ner[c]) for (b, e, c) in actual ]             # <<<<<<<<<<<<<<
 * 
 *         estimate = set(estimate)
 */
      __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_10s, __pyx_kp_s_actual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_actual)) || PyTuple_CheckExact(__pyx_v_actual)) {
        __pyx_t_9 = __pyx_v_actual; __Pyx_INCREF(__pyx_t_9); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_actual); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1538, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_13 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1538, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_9))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_14 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1538, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_9, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1538, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_12); __Pyx_INCREF(__pyx_t_14); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1538, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_9, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1538, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          }
        } else {
          __pyx_t_14 = __pyx_t_13(__pyx_t_9);
          if (unlikely(!__pyx_t_14)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1538, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_14);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_14))) || (PyList_CheckExact(__pyx_t_14))) {
          PyObject* sequence = __pyx_t_14;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1538, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_8);
          #else
          __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_8 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_18 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1538, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_18)->tp_iternext;
          index = 0; __pyx_t_7 = __pyx_t_11(__pyx_t_18); if (unlikely(!__pyx_t_7)) goto __pyx_L25_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          index = 1; __pyx_t_10 = __pyx_t_11(__pyx_t_18); if (unlikely(!__pyx_t_10)) goto __pyx_L25_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_10);
          index = 2; __pyx_t_8 = __pyx_t_11(__pyx_t_18); if (unlikely(!__pyx_t_8)) goto __pyx_L25_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_18), 3) < 0) __PYX_ERR(0, 1538, __pyx_L1_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          goto __pyx_L26_unpacking_done;
          __pyx_L25_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1538, __pyx_L1_error)
          __pyx_L26_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_14 = PyObject_GetItem(__pyx_v_idx2ner, __pyx_v_c); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1538, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1538, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_e);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_14);
        __pyx_t_14 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1538, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_3 = 0;
      if (__Pyx_Print(__pyx_v_analysis, __pyx_t_9, 1) < 0) __PYX_ERR(0, 1538, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "gigaword2feature.pyx":1531
 * 
 * 
 *         if analysis is not None and set(estimate) != set(actual):             # <<<<<<<<<<<<<<
 *             # print >> analysis, zip( range(len(sentence)), sentence )
 *             sorted_est.sort( key = lambda x : x[3], reverse = True )
 */
    }

    /* "gigaword2feature.pyx":1540
 *             print >> analysis, '%10s' % 'actual: ', [ (b, e, idx2ner[c]) for (b, e, c) in actual ]
 * 
 *         estimate = set(estimate)             # <<<<<<<<<<<<<<
 * 
 *         for x in xrange( len(true_positive) ):
 */
    __pyx_t_9 = PySet_New(__pyx_v_estimate); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF_SET(__pyx_v_estimate, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "gigaword2feature.pyx":1542
 *         estimate = set(estimate)
 * 
 *         for x in xrange( len(true_positive) ):             # <<<<<<<<<<<<<<
 *             # true_positive += len( estimate & actual )
 *             # false_positive += len( estimate - actual )
 */
    __pyx_t_12 = PyObject_Length(__pyx_v_true_positive); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 1542, __pyx_L1_error)
    __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_12); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
      __pyx_t_3 = __pyx_t_9; __Pyx_INCREF(__pyx_t_3); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_13 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1542, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1542, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1542, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_13(__pyx_t_3);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1542, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "gigaword2feature.pyx":1546
 *             # false_positive += len( estimate - actual )
 *             # false_negative += len( actual - estimate )
 *             true_positive[x] += len( [ (b,e,c) for (b,e,c) in estimate & actual if c == x ] )             # <<<<<<<<<<<<<<
 *             false_positive[x] += len( [ (b,e,c) for (b,e,c) in estimate - actual if c == x ] )
 *             false_negative[x] += len( [ (b,e,c) for (b,e,c) in actual - estimate if c == x ] )
 */
      __Pyx_INCREF(__pyx_v_x);
      __pyx_t_9 = __pyx_v_x;
      __pyx_t_1 = PyObject_GetItem(__pyx_v_true_positive, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_14 = PyNumber_And(__pyx_v_estimate, __pyx_v_actual); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
        __pyx_t_10 = __pyx_t_14; __Pyx_INCREF(__pyx_t_10); __pyx_t_17 = 0;
        __pyx_t_19 = NULL;
      } else {
        __pyx_t_17 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_19 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1546, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      for (;;) {
        if (likely(!__pyx_t_19)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_14 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_17); __Pyx_INCREF(__pyx_t_14); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1546, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_10, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1546, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          } else {
            if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_17); __Pyx_INCREF(__pyx_t_14); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1546, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_10, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1546, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          }
        } else {
          __pyx_t_14 = __pyx_t_19(__pyx_t_10);
          if (unlikely(!__pyx_t_14)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1546, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_14);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_14))) || (PyList_CheckExact(__pyx_t_14))) {
          PyObject* sequence = __pyx_t_14;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1546, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_18 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_20 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_18 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_20 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_18);
          __Pyx_INCREF(__pyx_t_20);
          #else
          __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1546, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_18 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1546, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_20 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1546, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          #endif
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_21 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1546, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_21)->tp_iternext;
          index = 0; __pyx_t_7 = __pyx_t_11(__pyx_t_21); if (unlikely(!__pyx_t_7)) goto __pyx_L31_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          index = 1; __pyx_t_18 = __pyx_t_11(__pyx_t_21); if (unlikely(!__pyx_t_18)) goto __pyx_L31_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_18);
          index = 2; __pyx_t_20 = __pyx_t_11(__pyx_t_21); if (unlikely(!__pyx_t_20)) goto __pyx_L31_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_20);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_21), 3) < 0) __PYX_ERR(0, 1546, __pyx_L1_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          goto __pyx_L32_unpacking_done;
          __pyx_L31_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1546, __pyx_L1_error)
          __pyx_L32_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_18);
        __pyx_t_18 = 0;
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_20);
        __pyx_t_20 = 0;
        __pyx_t_14 = PyObject_RichCompare(__pyx_v_c, __pyx_v_x, Py_EQ); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1546, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1546, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (__pyx_t_2) {
          __pyx_t_14 = PyTuple_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1546, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_v_b);
          __Pyx_GIVEREF(__pyx_v_b);
          PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_b);
          __Pyx_INCREF(__pyx_v_e);
          __Pyx_GIVEREF(__pyx_v_e);
          PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_e);
          __Pyx_INCREF(__pyx_v_c);
          __Pyx_GIVEREF(__pyx_v_c);
          PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_v_c);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 1546, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_17 = PyList_GET_SIZE(__pyx_t_8); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_true_positive, __pyx_t_9, __pyx_t_10) < 0)) __PYX_ERR(0, 1546, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "gigaword2feature.pyx":1547
 *             # false_negative += len( actual - estimate )
 *             true_positive[x] += len( [ (b,e,c) for (b,e,c) in estimate & actual if c == x ] )
 *             false_positive[x] += len( [ (b,e,c) for (b,e,c) in estimate - actual if c == x ] )             # <<<<<<<<<<<<<<
 *             false_negative[x] += len( [ (b,e,c) for (b,e,c) in actual - estimate if c == x ] )
 * 
 */
      __Pyx_INCREF(__pyx_v_x);
      __pyx_t_9 = __pyx_v_x;
      __pyx_t_10 = PyObject_GetItem(__pyx_v_false_positive, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_estimate, __pyx_v_actual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_14 = __pyx_t_1; __Pyx_INCREF(__pyx_t_14); __pyx_t_17 = 0;
        __pyx_t_19 = NULL;
      } else {
        __pyx_t_17 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1547, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_19 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1547, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_19)) {
          if (likely(PyList_CheckExact(__pyx_t_14))) {
            if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1547, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1547, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_19(__pyx_t_14);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1547, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
          PyObject* sequence = __pyx_t_1;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1547, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_20 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_18 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_20 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_18 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_20);
          __Pyx_INCREF(__pyx_t_18);
          __Pyx_INCREF(__pyx_t_7);
          #else
          __pyx_t_20 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1547, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_18 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1547, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_7 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1547, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_21 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1547, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_21)->tp_iternext;
          index = 0; __pyx_t_20 = __pyx_t_11(__pyx_t_21); if (unlikely(!__pyx_t_20)) goto __pyx_L36_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_20);
          index = 1; __pyx_t_18 = __pyx_t_11(__pyx_t_21); if (unlikely(!__pyx_t_18)) goto __pyx_L36_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_18);
          index = 2; __pyx_t_7 = __pyx_t_11(__pyx_t_21); if (unlikely(!__pyx_t_7)) goto __pyx_L36_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_21), 3) < 0) __PYX_ERR(0, 1547, __pyx_L1_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          goto __pyx_L37_unpacking_done;
          __pyx_L36_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1547, __pyx_L1_error)
          __pyx_L37_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_20);
        __pyx_t_20 = 0;
        __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_18);
        __pyx_t_18 = 0;
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_c, __pyx_v_x, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1547, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_2) {
          __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1547, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_v_b);
          __Pyx_GIVEREF(__pyx_v_b);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_b);
          __Pyx_INCREF(__pyx_v_e);
          __Pyx_GIVEREF(__pyx_v_e);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_e);
          __Pyx_INCREF(__pyx_v_c);
          __Pyx_GIVEREF(__pyx_v_c);
          PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_c);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 1547, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_17 = PyList_GET_SIZE(__pyx_t_8); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_14 = PyNumber_InPlaceAdd(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_false_positive, __pyx_t_9, __pyx_t_14) < 0)) __PYX_ERR(0, 1547, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "gigaword2feature.pyx":1548
 *             true_positive[x] += len( [ (b,e,c) for (b,e,c) in estimate & actual if c == x ] )
 *             false_positive[x] += len( [ (b,e,c) for (b,e,c) in estimate - actual if c == x ] )
 *             false_negative[x] += len( [ (b,e,c) for (b,e,c) in actual - estimate if c == x ] )             # <<<<<<<<<<<<<<
 * 
 *         if analysis is not None and set(estimate) != set(actual):
 */
      __Pyx_INCREF(__pyx_v_x);
      __pyx_t_9 = __pyx_v_x;
      __pyx_t_14 = PyObject_GetItem(__pyx_v_false_negative, __pyx_t_9); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = PyNumber_Subtract(__pyx_v_actual, __pyx_v_estimate); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
        __pyx_t_1 = __pyx_t_10; __Pyx_INCREF(__pyx_t_1); __pyx_t_17 = 0;
        __pyx_t_19 = NULL;
      } else {
        __pyx_t_17 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1548, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_19 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1548, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      for (;;) {
        if (likely(!__pyx_t_19)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_10); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1548, __pyx_L1_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1548, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_10); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1548, __pyx_L1_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1548, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_19(__pyx_t_1);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1548, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
          PyObject* sequence = __pyx_t_10;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1548, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_18 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_20 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_18 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_20 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_18);
          __Pyx_INCREF(__pyx_t_20);
          #else
          __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1548, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_18 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1548, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_20 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1548, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          #endif
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_21 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1548, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_21)->tp_iternext;
          index = 0; __pyx_t_7 = __pyx_t_11(__pyx_t_21); if (unlikely(!__pyx_t_7)) goto __pyx_L41_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          index = 1; __pyx_t_18 = __pyx_t_11(__pyx_t_21); if (unlikely(!__pyx_t_18)) goto __pyx_L41_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_18);
          index = 2; __pyx_t_20 = __pyx_t_11(__pyx_t_21); if (unlikely(!__pyx_t_20)) goto __pyx_L41_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_20);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_21), 3) < 0) __PYX_ERR(0, 1548, __pyx_L1_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          goto __pyx_L42_unpacking_done;
          __pyx_L41_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1548, __pyx_L1_error)
          __pyx_L42_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_18);
        __pyx_t_18 = 0;
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_20);
        __pyx_t_20 = 0;
        __pyx_t_10 = PyObject_RichCompare(__pyx_v_c, __pyx_v_x, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1548, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1548, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_2) {
          __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1548, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_v_b);
          __Pyx_GIVEREF(__pyx_v_b);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_b);
          __Pyx_INCREF(__pyx_v_e);
          __Pyx_GIVEREF(__pyx_v_e);
          PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_e);
          __Pyx_INCREF(__pyx_v_c);
          __Pyx_GIVEREF(__pyx_v_c);
          PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_v_c);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 1548, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_17 = PyList_GET_SIZE(__pyx_t_8); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_17); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_t_14, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_false_negative, __pyx_t_9, __pyx_t_1) < 0)) __PYX_ERR(0, 1548, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "gigaword2feature.pyx":1542
 *         estimate = set(estimate)
 * 
 *         for x in xrange( len(true_positive) ):             # <<<<<<<<<<<<<<
 *             # true_positive += len( estimate & actual )
 *             # false_positive += len( estimate - actual )
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gigaword2feature.pyx":1550
 *             false_negative[x] += len( [ (b,e,c) for (b,e,c) in actual - estimate if c == x ] )
 * 
 *         if analysis is not None and set(estimate) != set(actual):             # <<<<<<<<<<<<<<
 *             print >> analysis, 'false-positive: ', [ (b, e, idx2ner[c]) for (b, e, c) in (estimate - actual)]
 *             print >> analysis, 'false-negative: ', [ (b, e, idx2ner[c]) for (b, e, c) in (actual - estimate)]
 */
    __pyx_t_16 = (__pyx_v_analysis != Py_None);
    __pyx_t_15 = (__pyx_t_16 != 0);
    if (__pyx_t_15) {
    } else {
      __pyx_t_2 = __pyx_t_15;
      goto __pyx_L45_bool_binop_done;
    }
    __pyx_t_3 = PySet_New(__pyx_v_estimate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PySet_New(__pyx_v_actual); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_9, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1550, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_15;
    __pyx_L45_bool_binop_done:;
    if (__pyx_t_2) {

      /* "gigaword2feature.pyx":1551
 * 
 *         if analysis is not None and set(estimate) != set(actual):
 *             print >> analysis, 'false-positive: ', [ (b, e, idx2ner[c]) for (b, e, c) in (estimate - actual)]             # <<<<<<<<<<<<<<
 *             print >> analysis, 'false-negative: ', [ (b, e, idx2ner[c]) for (b, e, c) in (actual - estimate)]
 *             print >> analysis
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = PyNumber_Subtract(__pyx_v_estimate, __pyx_v_actual); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
        __pyx_t_3 = __pyx_t_9; __Pyx_INCREF(__pyx_t_3); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1551, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1551, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1551, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1551, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_12); __Pyx_INCREF(__pyx_t_9); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1551, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1551, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          }
        } else {
          __pyx_t_9 = __pyx_t_13(__pyx_t_3);
          if (unlikely(!__pyx_t_9)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1551, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
          PyObject* sequence = __pyx_t_9;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1551, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_10);
          #else
          __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1551, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1551, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_10 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1551, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_20 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1551, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_20)->tp_iternext;
          index = 0; __pyx_t_8 = __pyx_t_11(__pyx_t_20); if (unlikely(!__pyx_t_8)) goto __pyx_L49_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          index = 1; __pyx_t_14 = __pyx_t_11(__pyx_t_20); if (unlikely(!__pyx_t_14)) goto __pyx_L49_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_14);
          index = 2; __pyx_t_10 = __pyx_t_11(__pyx_t_20); if (unlikely(!__pyx_t_10)) goto __pyx_L49_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_10);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_20), 3) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          goto __pyx_L50_unpacking_done;
          __pyx_L49_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1551, __pyx_L1_error)
          __pyx_L50_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_14);
        __pyx_t_14 = 0;
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_9 = PyObject_GetItem(__pyx_v_idx2ner, __pyx_v_c); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1551, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1551, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_e);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_9);
        __pyx_t_9 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 1551, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_kp_s_false_positive);
      __Pyx_GIVEREF(__pyx_kp_s_false_positive);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_false_positive);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      if (__Pyx_Print(__pyx_v_analysis, __pyx_t_3, 1) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "gigaword2feature.pyx":1552
 *         if analysis is not None and set(estimate) != set(actual):
 *             print >> analysis, 'false-positive: ', [ (b, e, idx2ner[c]) for (b, e, c) in (estimate - actual)]
 *             print >> analysis, 'false-negative: ', [ (b, e, idx2ner[c]) for (b, e, c) in (actual - estimate)]             # <<<<<<<<<<<<<<
 *             print >> analysis
 * 
 */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1552, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_actual, __pyx_v_estimate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_10 = __pyx_t_1; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1552, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1552, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 1552, __pyx_L1_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_13(__pyx_t_10);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1552, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
          PyObject* sequence = __pyx_t_1;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1552, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_8);
          #else
          __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_8 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_20 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_20)->tp_iternext;
          index = 0; __pyx_t_9 = __pyx_t_11(__pyx_t_20); if (unlikely(!__pyx_t_9)) goto __pyx_L53_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_9);
          index = 1; __pyx_t_14 = __pyx_t_11(__pyx_t_20); if (unlikely(!__pyx_t_14)) goto __pyx_L53_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_14);
          index = 2; __pyx_t_8 = __pyx_t_11(__pyx_t_20); if (unlikely(!__pyx_t_8)) goto __pyx_L53_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_20), 3) < 0) __PYX_ERR(0, 1552, __pyx_L1_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          goto __pyx_L54_unpacking_done;
          __pyx_L53_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1552, __pyx_L1_error)
          __pyx_L54_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_14);
        __pyx_t_14 = 0;
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_1 = PyObject_GetItem(__pyx_v_idx2ner, __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1552, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_e);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
        __pyx_t_1 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1552, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1552, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_kp_s_false_negative);
      __Pyx_GIVEREF(__pyx_kp_s_false_negative);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_kp_s_false_negative);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      if (__Pyx_Print(__pyx_v_analysis, __pyx_t_10, 1) < 0) __PYX_ERR(0, 1552, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "gigaword2feature.pyx":1553
 *             print >> analysis, 'false-positive: ', [ (b, e, idx2ner[c]) for (b, e, c) in (estimate - actual)]
 *             print >> analysis, 'false-negative: ', [ (b, e, idx2ner[c]) for (b, e, c) in (actual - estimate)]
 *             print >> analysis             # <<<<<<<<<<<<<<
 * 
 *         # for CoNLL2003 output
 */
      if (__Pyx_Print(__pyx_v_analysis, __pyx_empty_tuple, 1) < 0) __PYX_ERR(0, 1553, __pyx_L1_error)

      /* "gigaword2feature.pyx":1550
 *             false_negative[x] += len( [ (b,e,c) for (b,e,c) in actual - estimate if c == x ] )
 * 
 *         if analysis is not None and set(estimate) != set(actual):             # <<<<<<<<<<<<<<
 *             print >> analysis, 'false-positive: ', [ (b, e, idx2ner[c]) for (b, e, c) in (estimate - actual)]
 *             print >> analysis, 'false-negative: ', [ (b, e, idx2ner[c]) for (b, e, c) in (actual - estimate)]
 */
    }

    /* "gigaword2feature.pyx":1556
 * 
 *         # for CoNLL2003 output
 *         if si is not None:             # <<<<<<<<<<<<<<
 *             original = si.next()
 *             assert( len(original) == len(sentence) )
 */
    __pyx_t_2 = (__pyx_v_si != Py_None);
    __pyx_t_15 = (__pyx_t_2 != 0);
    if (__pyx_t_15) {

      /* "gigaword2feature.pyx":1557
 *         # for CoNLL2003 output
 *         if si is not None:
 *             original = si.next()             # <<<<<<<<<<<<<<
 *             assert( len(original) == len(sentence) )
 *             tag = [ 'O' ] * len(sentence)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_si, __pyx_n_s_next); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_8) {
        __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1557, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_10 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1557, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_original, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "gigaword2feature.pyx":1558
 *         if si is not None:
 *             original = si.next()
 *             assert( len(original) == len(sentence) )             # <<<<<<<<<<<<<<
 *             tag = [ 'O' ] * len(sentence)
 *             for b, e, c in estimate:
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_12 = PyObject_Length(__pyx_v_original); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 1558, __pyx_L1_error)
        __pyx_t_17 = PyObject_Length(__pyx_v_sentence); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 1558, __pyx_L1_error)
        if (unlikely(!((__pyx_t_12 == __pyx_t_17) != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(0, 1558, __pyx_L1_error)
        }
      }
      #endif

      /* "gigaword2feature.pyx":1559
 *             original = si.next()
 *             assert( len(original) == len(sentence) )
 *             tag = [ 'O' ] * len(sentence)             # <<<<<<<<<<<<<<
 *             for b, e, c in estimate:
 *                 x = 'I-' + idx2ner[c]
 */
      __pyx_t_17 = PyObject_Length(__pyx_v_sentence); if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 1559, __pyx_L1_error)
      __pyx_t_10 = PyList_New(1 * ((__pyx_t_17<0) ? 0:__pyx_t_17)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1559, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      { Py_ssize_t __pyx_temp;
        for (__pyx_temp=0; __pyx_temp < __pyx_t_17; __pyx_temp++) {
          __Pyx_INCREF(__pyx_n_s_O);
          __Pyx_GIVEREF(__pyx_n_s_O);
          PyList_SET_ITEM(__pyx_t_10, __pyx_temp, __pyx_n_s_O);
        }
      }
      __Pyx_XDECREF_SET(__pyx_v_tag, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "gigaword2feature.pyx":1560
 *             assert( len(original) == len(sentence) )
 *             tag = [ 'O' ] * len(sentence)
 *             for b, e, c in estimate:             # <<<<<<<<<<<<<<
 *                 x = 'I-' + idx2ner[c]
 *                 for i in xrange(b, e):
 */
      __pyx_t_10 = PyObject_GetIter(__pyx_v_estimate); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1560, __pyx_L1_error)
      for (;;) {
        {
          __pyx_t_3 = __pyx_t_13(__pyx_t_10);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1560, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
          PyObject* sequence = __pyx_t_3;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1560, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_14 = PyTuple_GET_ITEM(sequence, 2); 
          } else {
            __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_14 = PyList_GET_ITEM(sequence, 2); 
          }
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_14);
          #else
          __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1560, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1560, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_14 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1560, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          #endif
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1560, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_9)->tp_iternext;
          index = 0; __pyx_t_8 = __pyx_t_11(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L58_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_8);
          index = 1; __pyx_t_1 = __pyx_t_11(__pyx_t_9); if (unlikely(!__pyx_t_1)) goto __pyx_L58_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_1);
          index = 2; __pyx_t_14 = __pyx_t_11(__pyx_t_9); if (unlikely(!__pyx_t_14)) goto __pyx_L58_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_14);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_9), 3) < 0) __PYX_ERR(0, 1560, __pyx_L1_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L59_unpacking_done;
          __pyx_L58_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1560, __pyx_L1_error)
          __pyx_L59_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_b, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "gigaword2feature.pyx":1561
 *             tag = [ 'O' ] * len(sentence)
 *             for b, e, c in estimate:
 *                 x = 'I-' + idx2ner[c]             # <<<<<<<<<<<<<<
 *                 for i in xrange(b, e):
 *                     tag[i] = x
 */
        __pyx_t_3 = PyObject_GetItem(__pyx_v_idx2ner, __pyx_v_c); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1561, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = PyNumber_Add(__pyx_kp_s_I, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1561, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "gigaword2feature.pyx":1562
 *             for b, e, c in estimate:
 *                 x = 'I-' + idx2ner[c]
 *                 for i in xrange(b, e):             # <<<<<<<<<<<<<<
 *                     tag[i] = x
 *             for o, t in zip( original, tag ):
 */
        __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_INCREF(__pyx_v_b);
        __Pyx_GIVEREF(__pyx_v_b);
        PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_b);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_e);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
          __pyx_t_14 = __pyx_t_3; __Pyx_INCREF(__pyx_t_14); __pyx_t_17 = 0;
          __pyx_t_19 = NULL;
        } else {
          __pyx_t_17 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1562, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_19 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1562, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        for (;;) {
          if (likely(!__pyx_t_19)) {
            if (likely(PyList_CheckExact(__pyx_t_14))) {
              if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_14)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_3); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1562, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_17); __Pyx_INCREF(__pyx_t_3); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1562, __pyx_L1_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_14, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_19(__pyx_t_14);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1562, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_3);
          }
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "gigaword2feature.pyx":1563
 *                 x = 'I-' + idx2ner[c]
 *                 for i in xrange(b, e):
 *                     tag[i] = x             # <<<<<<<<<<<<<<
 *             for o, t in zip( original, tag ):
 *                 if not surpress_output:
 */
          if (unlikely(PyObject_SetItem(__pyx_v_tag, __pyx_v_i, __pyx_v_x) < 0)) __PYX_ERR(0, 1563, __pyx_L1_error)

          /* "gigaword2feature.pyx":1562
 *             for b, e, c in estimate:
 *                 x = 'I-' + idx2ner[c]
 *                 for i in xrange(b, e):             # <<<<<<<<<<<<<<
 *                     tag[i] = x
 *             for o, t in zip( original, tag ):
 */
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "gigaword2feature.pyx":1560
 *             assert( len(original) == len(sentence) )
 *             tag = [ 'O' ] * len(sentence)
 *             for b, e, c in estimate:             # <<<<<<<<<<<<<<
 *                 x = 'I-' + idx2ner[c]
 *                 for i in xrange(b, e):
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "gigaword2feature.pyx":1564
 *                 for i in xrange(b, e):
 *                     tag[i] = x
 *             for o, t in zip( original, tag ):             # <<<<<<<<<<<<<<
 *                 if not surpress_output:
 *                     print o, t
 */
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_original);
      __Pyx_GIVEREF(__pyx_v_original);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_original);
      __Pyx_INCREF(__pyx_v_tag);
      __Pyx_GIVEREF(__pyx_v_tag);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_tag);
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_10, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1564, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
        __pyx_t_10 = __pyx_t_14; __Pyx_INCREF(__pyx_t_10); __pyx_t_17 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_17 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1564, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1564, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_17 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_14 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_17); __Pyx_INCREF(__pyx_t_14); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1564, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_10, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1564, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          } else {
            if (__pyx_t_17 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_17); __Pyx_INCREF(__pyx_t_14); __pyx_t_17++; if (unlikely(0 < 0)) __PYX_ERR(0, 1564, __pyx_L1_error)
            #else
            __pyx_t_14 = PySequence_ITEM(__pyx_t_10, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1564, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            #endif
          }
        } else {
          __pyx_t_14 = __pyx_t_13(__pyx_t_10);
          if (unlikely(!__pyx_t_14)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1564, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_14);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_14))) || (PyList_CheckExact(__pyx_t_14))) {
          PyObject* sequence = __pyx_t_14;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 1564, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          #else
          __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1564, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1564, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_8 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1564, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_8)->tp_iternext;
          index = 0; __pyx_t_3 = __pyx_t_11(__pyx_t_8); if (unlikely(!__pyx_t_3)) goto __pyx_L64_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_3);
          index = 1; __pyx_t_1 = __pyx_t_11(__pyx_t_8); if (unlikely(!__pyx_t_1)) goto __pyx_L64_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_1);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_8), 2) < 0) __PYX_ERR(0, 1564, __pyx_L1_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L65_unpacking_done;
          __pyx_L64_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 1564, __pyx_L1_error)
          __pyx_L65_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_o, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "gigaword2feature.pyx":1565
 *                     tag[i] = x
 *             for o, t in zip( original, tag ):
 *                 if not surpress_output:             # <<<<<<<<<<<<<<
 *                     print o, t
 *             if not surpress_output:
 */
        __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_surpress_output); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1565, __pyx_L1_error)
        __pyx_t_2 = ((!__pyx_t_15) != 0);
        if (__pyx_t_2) {

          /* "gigaword2feature.pyx":1566
 *             for o, t in zip( original, tag ):
 *                 if not surpress_output:
 *                     print o, t             # <<<<<<<<<<<<<<
 *             if not surpress_output:
 *                 print
 */
          __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1566, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_v_o);
          __Pyx_GIVEREF(__pyx_v_o);
          PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_o);
          __Pyx_INCREF(__pyx_v_t);
          __Pyx_GIVEREF(__pyx_v_t);
          PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_t);
          if (__Pyx_Print(0, __pyx_t_14, 1) < 0) __PYX_ERR(0, 1566, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "gigaword2feature.pyx":1565
 *                     tag[i] = x
 *             for o, t in zip( original, tag ):
 *                 if not surpress_output:             # <<<<<<<<<<<<<<
 *                     print o, t
 *             if not surpress_output:
 */
        }

        /* "gigaword2feature.pyx":1564
 *                 for i in xrange(b, e):
 *                     tag[i] = x
 *             for o, t in zip( original, tag ):             # <<<<<<<<<<<<<<
 *                 if not surpress_output:
 *                     print o, t
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "gigaword2feature.pyx":1567
 *                 if not surpress_output:
 *                     print o, t
 *             if not surpress_output:             # <<<<<<<<<<<<<<
 *                 print
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_surpress_output); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1567, __pyx_L1_error)
      __pyx_t_15 = ((!__pyx_t_2) != 0);
      if (__pyx_t_15) {

        /* "gigaword2feature.pyx":1568
 *                     print o, t
 *             if not surpress_output:
 *                 print             # <<<<<<<<<<<<<<
 * 
 *     for x in xrange( len(true_positive) ):
 */
        if (__Pyx_Print(0, __pyx_empty_tuple, 1) < 0) __PYX_ERR(0, 1568, __pyx_L1_error)

        /* "gigaword2feature.pyx":1567
 *                 if not surpress_output:
 *                     print o, t
 *             if not surpress_output:             # <<<<<<<<<<<<<<
 *                 print
 * 
 */
      }

      /* "gigaword2feature.pyx":1556
 * 
 *         # for CoNLL2003 output
 *         if si is not None:             # <<<<<<<<<<<<<<
 *             original = si.next()
 *             assert( len(original) == len(sentence) )
 */
    }

    /* "gigaword2feature.pyx":1445
 *         [ 0 ] * n_label_type, [ 0 ] * n_label_type, [ 0 ] * n_label_type
 * 
 *     for sentence, table, estimate, actual in pp:             # <<<<<<<<<<<<<<
 *         # 'sorted_est' also serves as a copy of 'estimate' before anything is applied
 *         sorted_est = [ (b, e, idx2ner[c], table[b][e - 1][1]) for (b, e, c) in estimate ]
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":1570
 *                 print
 * 
 *     for x in xrange( len(true_positive) ):             # <<<<<<<<<<<<<<
 *         if true_positive[x] != 0:
 *             precision = float(true_positive[x]) / float(true_positive[x] + false_positive[x])
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_true_positive); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_10 = __pyx_t_4; __Pyx_INCREF(__pyx_t_10); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_6 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1570, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_10))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1570, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_10, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1570, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_10, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_10);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1570, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "gigaword2feature.pyx":1571
 * 
 *     for x in xrange( len(true_positive) ):
 *         if true_positive[x] != 0:             # <<<<<<<<<<<<<<
 *             precision = float(true_positive[x]) / float(true_positive[x] + false_positive[x])
 *             recall = float(true_positive[x]) / float(true_positive[x] + false_negative[x])
 */
    __pyx_t_4 = PyObject_GetItem(__pyx_v_true_positive, __pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1571, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1571, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (__pyx_t_15) {

      /* "gigaword2feature.pyx":1572
 *     for x in xrange( len(true_positive) ):
 *         if true_positive[x] != 0:
 *             precision = float(true_positive[x]) / float(true_positive[x] + false_positive[x])             # <<<<<<<<<<<<<<
 *             recall = float(true_positive[x]) / float(true_positive[x] + false_negative[x])
 *             f_beta = 2.0 * precision * recall / (precision + recall)
 */
      __pyx_t_14 = PyObject_GetItem(__pyx_v_true_positive, __pyx_v_x); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_22 = __Pyx_PyObject_AsDouble(__pyx_t_14); if (unlikely(__pyx_t_22 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = PyObject_GetItem(__pyx_v_true_positive, __pyx_v_x); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_4 = PyObject_GetItem(__pyx_v_false_positive, __pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyNumber_Add(__pyx_t_14, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_23 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_23 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__pyx_t_23 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1572, __pyx_L1_error)
      }
      __pyx_v_precision = (__pyx_t_22 / __pyx_t_23);

      /* "gigaword2feature.pyx":1573
 *         if true_positive[x] != 0:
 *             precision = float(true_positive[x]) / float(true_positive[x] + false_positive[x])
 *             recall = float(true_positive[x]) / float(true_positive[x] + false_negative[x])             # <<<<<<<<<<<<<<
 *             f_beta = 2.0 * precision * recall / (precision + recall)
 *         else:
 */
      __pyx_t_1 = PyObject_GetItem(__pyx_v_true_positive, __pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_23 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_23 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_GetItem(__pyx_v_true_positive, __pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyObject_GetItem(__pyx_v_false_negative, __pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_22 = __Pyx_PyObject_AsDouble(__pyx_t_14); if (unlikely(__pyx_t_22 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1573, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(__pyx_t_22 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1573, __pyx_L1_error)
      }
      __pyx_v_recall = (__pyx_t_23 / __pyx_t_22);

      /* "gigaword2feature.pyx":1574
 *             precision = float(true_positive[x]) / float(true_positive[x] + false_positive[x])
 *             recall = float(true_positive[x]) / float(true_positive[x] + false_negative[x])
 *             f_beta = 2.0 * precision * recall / (precision + recall)             # <<<<<<<<<<<<<<
 *         else:
 *             precision, recall, f_beta = 0.0, 0.0, 0.0
 */
      __pyx_t_22 = ((2.0 * __pyx_v_precision) * __pyx_v_recall);
      __pyx_t_23 = (__pyx_v_precision + __pyx_v_recall);
      if (unlikely(__pyx_t_23 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1574, __pyx_L1_error)
      }
      __pyx_v_f_beta = (__pyx_t_22 / __pyx_t_23);

      /* "gigaword2feature.pyx":1571
 * 
 *     for x in xrange( len(true_positive) ):
 *         if true_positive[x] != 0:             # <<<<<<<<<<<<<<
 *             precision = float(true_positive[x]) / float(true_positive[x] + false_positive[x])
 *             recall = float(true_positive[x]) / float(true_positive[x] + false_negative[x])
 */
      goto __pyx_L70;
    }

    /* "gigaword2feature.pyx":1576
 *             f_beta = 2.0 * precision * recall / (precision + recall)
 *         else:
 *             precision, recall, f_beta = 0.0, 0.0, 0.0             # <<<<<<<<<<<<<<
 *         info += '%12s  precision: %.2f%%, recall: %.2f%%, FB1: %.2f\n' % \
 *                             (idx2ner[x], precision * 100, recall * 100, f_beta * 100)
 */
    /*else*/ {
      __pyx_t_23 = 0.0;
      __pyx_t_22 = 0.0;
      __pyx_t_24 = 0.0;
      __pyx_v_precision = __pyx_t_23;
      __pyx_v_recall = __pyx_t_22;
      __pyx_v_f_beta = __pyx_t_24;
    }
    __pyx_L70:;

    /* "gigaword2feature.pyx":1578
 *             precision, recall, f_beta = 0.0, 0.0, 0.0
 *         info += '%12s  precision: %.2f%%, recall: %.2f%%, FB1: %.2f\n' % \
 *                             (idx2ner[x], precision * 100, recall * 100, f_beta * 100)             # <<<<<<<<<<<<<<
 * 
 *     true_positive, false_positive, false_negative = \
 */
    __pyx_t_14 = PyObject_GetItem(__pyx_v_idx2ner, __pyx_v_x); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_precision * 100.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_recall * 100.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_f_beta * 100.0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_3);
    __pyx_t_14 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;

    /* "gigaword2feature.pyx":1577
 *         else:
 *             precision, recall, f_beta = 0.0, 0.0, 0.0
 *         info += '%12s  precision: %.2f%%, recall: %.2f%%, FB1: %.2f\n' % \             # <<<<<<<<<<<<<<
 *                             (idx2ner[x], precision * 100, recall * 100, f_beta * 100)
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_12s_precision_2f_recall_2f_FB1, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_info, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_info, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "gigaword2feature.pyx":1570
 *                 print
 * 
 *     for x in xrange( len(true_positive) ):             # <<<<<<<<<<<<<<
 *         if true_positive[x] != 0:
 *             precision = float(true_positive[x]) / float(true_positive[x] + false_positive[x])
 */
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "gigaword2feature.pyx":1581
 * 
 *     true_positive, false_positive, false_negative = \
 *             sum(true_positive), sum(false_positive), sum(false_negative)             # <<<<<<<<<<<<<<
 *     if true_positive != 0:
 *         precision = float(true_positive) / float(true_positive + false_positive)
 */
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_true_positive);
  __Pyx_GIVEREF(__pyx_v_true_positive);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_true_positive);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_false_positive);
  __Pyx_GIVEREF(__pyx_v_false_positive);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_false_positive);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_false_negative);
  __Pyx_GIVEREF(__pyx_v_false_negative);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_false_negative);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF_SET(__pyx_v_true_positive, __pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_false_positive, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_false_negative, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":1582
 *     true_positive, false_positive, false_negative = \
 *             sum(true_positive), sum(false_positive), sum(false_negative)
 *     if true_positive != 0:             # <<<<<<<<<<<<<<
 *         precision = float(true_positive) / float(true_positive + false_positive)
 *         recall = float(true_positive) / float(true_positive + false_negative)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_true_positive, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1582, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_15 < 0)) __PYX_ERR(0, 1582, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_15) {

    /* "gigaword2feature.pyx":1583
 *             sum(true_positive), sum(false_positive), sum(false_negative)
 *     if true_positive != 0:
 *         precision = float(true_positive) / float(true_positive + false_positive)             # <<<<<<<<<<<<<<
 *         recall = float(true_positive) / float(true_positive + false_negative)
 *         f_beta = 2.0 * precision * recall / (precision + recall)
 */
    __pyx_t_24 = __Pyx_PyObject_AsDouble(__pyx_v_true_positive); if (unlikely(__pyx_t_24 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1583, __pyx_L1_error)
    __pyx_t_1 = PyNumber_Add(__pyx_v_true_positive, __pyx_v_false_positive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_22 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_22 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1583, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_22 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1583, __pyx_L1_error)
    }
    __pyx_v_precision = (__pyx_t_24 / __pyx_t_22);

    /* "gigaword2feature.pyx":1584
 *     if true_positive != 0:
 *         precision = float(true_positive) / float(true_positive + false_positive)
 *         recall = float(true_positive) / float(true_positive + false_negative)             # <<<<<<<<<<<<<<
 *         f_beta = 2.0 * precision * recall / (precision + recall)
 *     else:
 */
    __pyx_t_22 = __Pyx_PyObject_AsDouble(__pyx_v_true_positive); if (unlikely(__pyx_t_22 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1584, __pyx_L1_error)
    __pyx_t_1 = PyNumber_Add(__pyx_v_true_positive, __pyx_v_false_negative); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_24 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_24 == ((double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1584, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_24 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1584, __pyx_L1_error)
    }
    __pyx_v_recall = (__pyx_t_22 / __pyx_t_24);

    /* "gigaword2feature.pyx":1585
 *         precision = float(true_positive) / float(true_positive + false_positive)
 *         recall = float(true_positive) / float(true_positive + false_negative)
 *         f_beta = 2.0 * precision * recall / (precision + recall)             # <<<<<<<<<<<<<<
 *     else:
 *         precision, recall, f_beta = 0.0, 0.0, 0.0
 */
    __pyx_t_24 = ((2.0 * __pyx_v_precision) * __pyx_v_recall);
    __pyx_t_22 = (__pyx_v_precision + __pyx_v_recall);
    if (unlikely(__pyx_t_22 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1585, __pyx_L1_error)
    }
    __pyx_v_f_beta = (__pyx_t_24 / __pyx_t_22);

    /* "gigaword2feature.pyx":1582
 *     true_positive, false_positive, false_negative = \
 *             sum(true_positive), sum(false_positive), sum(false_negative)
 *     if true_positive != 0:             # <<<<<<<<<<<<<<
 *         precision = float(true_positive) / float(true_positive + false_positive)
 *         recall = float(true_positive) / float(true_positive + false_negative)
 */
    goto __pyx_L71;
  }

  /* "gigaword2feature.pyx":1587
 *         f_beta = 2.0 * precision * recall / (precision + recall)
 *     else:
 *         precision, recall, f_beta = 0.0, 0.0, 0.0             # <<<<<<<<<<<<<<
 *     info = '%-12s  precision: %.2f%%, recall: %.2f%%, FB1: %.2f\n' % \
 *                         ('OVERALL', precision * 100, recall * 100, f_beta * 100) + info
 */
  /*else*/ {
    __pyx_t_22 = 0.0;
    __pyx_t_24 = 0.0;
    __pyx_t_23 = 0.0;
    __pyx_v_precision = __pyx_t_22;
    __pyx_v_recall = __pyx_t_24;
    __pyx_v_f_beta = __pyx_t_23;
  }
  __pyx_L71:;

  /* "gigaword2feature.pyx":1589
 *         precision, recall, f_beta = 0.0, 0.0, 0.0
 *     info = '%-12s  precision: %.2f%%, recall: %.2f%%, FB1: %.2f\n' % \
 *                         ('OVERALL', precision * 100, recall * 100, f_beta * 100) + info             # <<<<<<<<<<<<<<
 * 
 *     if analysis is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_precision * 100.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_recall * 100.0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_f_beta * 100.0)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_n_s_OVERALL);
  __Pyx_GIVEREF(__pyx_n_s_OVERALL);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_OVERALL);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_8 = 0;

  /* "gigaword2feature.pyx":1588
 *     else:
 *         precision, recall, f_beta = 0.0, 0.0, 0.0
 *     info = '%-12s  precision: %.2f%%, recall: %.2f%%, FB1: %.2f\n' % \             # <<<<<<<<<<<<<<
 *                         ('OVERALL', precision * 100, recall * 100, f_beta * 100) + info
 * 
 */
  __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_12s_precision_2f_recall_2f_FB1_2, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "gigaword2feature.pyx":1589
 *         precision, recall, f_beta = 0.0, 0.0, 0.0
 *     info = '%-12s  precision: %.2f%%, recall: %.2f%%, FB1: %.2f\n' % \
 *                         ('OVERALL', precision * 100, recall * 100, f_beta * 100) + info             # <<<<<<<<<<<<<<
 * 
 *     if analysis is not None:
 */
  __pyx_t_10 = PyNumber_Add(__pyx_t_8, __pyx_v_info); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_info, __pyx_t_10);
  __pyx_t_10 = 0;

  /* "gigaword2feature.pyx":1591
 *                         ('OVERALL', precision * 100, recall * 100, f_beta * 100) + info
 * 
 *     if analysis is not None:             # <<<<<<<<<<<<<<
 *         # print >> analysis, 'precision: %f, recall: %f, F-beta: %f' % ( precision, recall, f_beta )
 *         print >> analysis, info
 */
  __pyx_t_15 = (__pyx_v_analysis != Py_None);
  __pyx_t_2 = (__pyx_t_15 != 0);
  if (__pyx_t_2) {

    /* "gigaword2feature.pyx":1593
 *     if analysis is not None:
 *         # print >> analysis, 'precision: %f, recall: %f, F-beta: %f' % ( precision, recall, f_beta )
 *         print >> analysis, info             # <<<<<<<<<<<<<<
 *         analysis.close()
 * 
 */
    if (__Pyx_PrintOne(__pyx_v_analysis, __pyx_v_info) < 0) __PYX_ERR(0, 1593, __pyx_L1_error)

    /* "gigaword2feature.pyx":1594
 *         # print >> analysis, 'precision: %f, recall: %f, F-beta: %f' % ( precision, recall, f_beta )
 *         print >> analysis, info
 *         analysis.close()             # <<<<<<<<<<<<<<
 * 
 *     return precision, recall, f_beta, info
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_analysis, __pyx_n_s_close); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1594, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_10 = __Pyx_PyObject_CallNoArg(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1594, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "gigaword2feature.pyx":1591
 *                         ('OVERALL', precision * 100, recall * 100, f_beta * 100) + info
 * 
 *     if analysis is not None:             # <<<<<<<<<<<<<<
 *         # print >> analysis, 'precision: %f, recall: %f, F-beta: %f' % ( precision, recall, f_beta )
 *         print >> analysis, info
 */
  }

  /* "gigaword2feature.pyx":1596
 *         analysis.close()
 * 
 *     return precision, recall, f_beta, info             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_precision); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_recall); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_f_beta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_info);
  __Pyx_GIVEREF(__pyx_v_info);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_info);
  __pyx_t_10 = 0;
  __pyx_t_8 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gigaword2feature.pyx":1424
 * 
 * 
 * def evaluation( prediction_parser, threshold, algorithm,             # <<<<<<<<<<<<<<
 *                 surpress_output = False, analysis = None, sentence_iterator = None,
 *                 n_label_type = 4, decoder_callback = None ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("gigaword2feature.evaluation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_si);
  __Pyx_XDECREF(__pyx_v_pp);
  __Pyx_XDECREF(__pyx_v_info);
  __Pyx_XDECREF(__pyx_v_idx2ner);
  __Pyx_XDECREF(__pyx_v_true_positive);
  __Pyx_XDECREF(__pyx_v_false_positive);
  __Pyx_XDECREF(__pyx_v_false_negative);
  __Pyx_XDECREF(__pyx_v_sentence);
  __Pyx_XDECREF(__pyx_v_table);
  __Pyx_XDECREF(__pyx_v_estimate);
  __Pyx_XDECREF(__pyx_v_actual);
  __Pyx_XDECREF(__pyx_v_sorted_est);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_original);
  __Pyx_XDECREF(__pyx_v_tag);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_w);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_36generator9(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":1603
 * 
 * 
 * def distant_supervision_parser( sentence_file, tag_file,             # <<<<<<<<<<<<<<
 *                                 start = 0, stop = None, step = 1,
 *                                 mode = 'KBP' ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_16gigaword2feature_35distant_supervision_parser(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_16gigaword2feature_35distant_supervision_parser = {"distant_supervision_parser", (PyCFunction)__pyx_pw_16gigaword2feature_35distant_supervision_parser, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_16gigaword2feature_35distant_supervision_parser(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sentence_file = 0;
  PyObject *__pyx_v_tag_file = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  PyObject *__pyx_v_step = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distant_supervision_parser (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sentence_file,&__pyx_n_s_tag_file,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_step,&__pyx_n_s_mode,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)__pyx_int_0);

    /* "gigaword2feature.pyx":1604
 * 
 * def distant_supervision_parser( sentence_file, tag_file,
 *                                 start = 0, stop = None, step = 1,             # <<<<<<<<<<<<<<
 *                                 mode = 'KBP' ):
 *     if mode == 'KBP':
 */
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)__pyx_int_1);
    values[5] = ((PyObject *)__pyx_n_s_KBP);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tag_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distant_supervision_parser", 0, 2, 6, 1); __PYX_ERR(0, 1603, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stop);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distant_supervision_parser") < 0)) __PYX_ERR(0, 1603, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sentence_file = values[0];
    __pyx_v_tag_file = values[1];
    __pyx_v_start = values[2];
    __pyx_v_stop = values[3];
    __pyx_v_step = values[4];
    __pyx_v_mode = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distant_supervision_parser", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1603, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gigaword2feature.distant_supervision_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_16gigaword2feature_34distant_supervision_parser(__pyx_self, __pyx_v_sentence_file, __pyx_v_tag_file, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_mode);

  /* "gigaword2feature.pyx":1603
 * 
 * 
 * def distant_supervision_parser( sentence_file, tag_file,             # <<<<<<<<<<<<<<
 *                                 start = 0, stop = None, step = 1,
 *                                 mode = 'KBP' ):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_16gigaword2feature_26distant_supervision_parser_2generator14(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gigaword2feature.pyx":1653
 *             if to_keep:
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \             # <<<<<<<<<<<<<<
 *                                           else chr(0) for c in list(w) )
 *                 yield sent, boe, eoe, loe
 */

static PyObject *__pyx_pf_16gigaword2feature_26distant_supervision_parser_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_20_genexpr(__pyx_ptype_16gigaword2feature___pyx_scope_struct_20_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_26distant_supervision_parser_2generator14, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_distant_supervision_parser_local); if (unlikely(!gen)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.distant_supervision_parser.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_26distant_supervision_parser_2generator14(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);

  /* "gigaword2feature.pyx":1654
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \
 *                                           else chr(0) for c in list(w) )             # <<<<<<<<<<<<<<
 *                 yield sent, boe, eoe, loe
 * 
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_w)) { __Pyx_RaiseClosureNameError("w"); __PYX_ERR(0, 1654, __pyx_L1_error) }
  __pyx_t_1 = PySequence_List(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 1654, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_c);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_c, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gigaword2feature.pyx":1653
 *             if to_keep:
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \             # <<<<<<<<<<<<<<
 *                                           else chr(0) for c in list(w) )
 *                 yield sent, boe, eoe, loe
 */
    __pyx_t_4 = __Pyx_PyObject_Ord(__pyx_cur_scope->__pyx_v_c); if (unlikely(__pyx_t_4 == (long)(Py_UCS4)-1)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __pyx_t_5 = (0 <= __pyx_t_4);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_t_4 < 0x80);
    }
    if ((__pyx_t_5 != 0)) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_c);
      __pyx_t_1 = __pyx_cur_scope->__pyx_v_c;
    } else {

      /* "gigaword2feature.pyx":1654
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \
 *                                           else chr(0) for c in list(w) )             # <<<<<<<<<<<<<<
 *                 yield sent, boe, eoe, loe
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1654, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __pyx_t_6;
      __pyx_t_6 = 0;
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1653
 *             if to_keep:
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \             # <<<<<<<<<<<<<<
 *                                           else chr(0) for c in list(w) )
 *                 yield sent, boe, eoe, loe
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gigaword2feature.pyx":1603
 * 
 * 
 * def distant_supervision_parser( sentence_file, tag_file,             # <<<<<<<<<<<<<<
 *                                 start = 0, stop = None, step = 1,
 *                                 mode = 'KBP' ):
 */

static PyObject *__pyx_pf_16gigaword2feature_34distant_supervision_parser(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_sentence_file, PyObject *__pyx_v_tag_file, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_mode) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distant_supervision_parser", 0);
  __pyx_cur_scope = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *)__pyx_tp_new_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser(__pyx_ptype_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_sentence_file = __pyx_v_sentence_file;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence_file);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentence_file);
  __pyx_cur_scope->__pyx_v_tag_file = __pyx_v_tag_file;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag_file);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag_file);
  __pyx_cur_scope->__pyx_v_start = __pyx_v_start;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_start);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_start);
  __pyx_cur_scope->__pyx_v_stop = __pyx_v_stop;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_stop);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_stop);
  __pyx_cur_scope->__pyx_v_step = __pyx_v_step;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_step);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_step);
  __pyx_cur_scope->__pyx_v_mode = __pyx_v_mode;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_mode);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_mode);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_16gigaword2feature_36generator9, (PyObject *) __pyx_cur_scope, __pyx_n_s_distant_supervision_parser, __pyx_n_s_distant_supervision_parser); if (unlikely(!gen)) __PYX_ERR(0, 1603, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gigaword2feature.distant_supervision_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_16gigaword2feature_36generator9(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *__pyx_cur_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *(*__pyx_t_17)(PyObject *);
  PyObject *(*__pyx_t_18)(PyObject *);
  int __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  PyObject *(*__pyx_t_21)(PyObject *);
  int __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L51_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1603, __pyx_L1_error)

  /* "gigaword2feature.pyx":1606
 *                                 start = 0, stop = None, step = 1,
 *                                 mode = 'KBP' ):
 *     if mode == 'KBP':             # <<<<<<<<<<<<<<
 *         str2idx = {
 *             '<PER>' : 0, '<ORG>' : 1, '<GPE>' : 2,
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_cur_scope->__pyx_v_mode, __pyx_n_s_KBP, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1606, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "gigaword2feature.pyx":1608
 *     if mode == 'KBP':
 *         str2idx = {
 *             '<PER>' : 0, '<ORG>' : 1, '<GPE>' : 2,             # <<<<<<<<<<<<<<
 *             '<LOC>' : 3, '<FAC>' : 4, '<TTL>' : 5,
 *             '<MISC>' : 12, '<UNSURE>' : 13
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1608, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_PER_2, __pyx_int_0) < 0) __PYX_ERR(0, 1608, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_ORG_2, __pyx_int_1) < 0) __PYX_ERR(0, 1608, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_GPE, __pyx_int_2) < 0) __PYX_ERR(0, 1608, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_LOC_2, __pyx_int_3) < 0) __PYX_ERR(0, 1608, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_FAC, __pyx_int_4) < 0) __PYX_ERR(0, 1608, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_TTL, __pyx_int_5) < 0) __PYX_ERR(0, 1608, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_MISC_2, __pyx_int_12) < 0) __PYX_ERR(0, 1608, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_UNSURE, __pyx_int_13) < 0) __PYX_ERR(0, 1608, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_str2idx = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "gigaword2feature.pyx":1606
 *                                 start = 0, stop = None, step = 1,
 *                                 mode = 'KBP' ):
 *     if mode == 'KBP':             # <<<<<<<<<<<<<<
 *         str2idx = {
 *             '<PER>' : 0, '<ORG>' : 1, '<GPE>' : 2,
 */
    goto __pyx_L4;
  }

  /* "gigaword2feature.pyx":1616
 *         # this is a quick attempt to keep the overlapping part based on CoNLL2003
 *         str2idx = {
 *             '<PER>' : 0, '<LOC>' : 1, '<ORG>' : 2,             # <<<<<<<<<<<<<<
 *             '<GPE>' : 8, '<FAC>' : 8, '<TTL>' : 8,
 *             '<MISC>' : 8, '<UNSURE>' : 9
 */
  /*else*/ {
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_PER_2, __pyx_int_0) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_LOC_2, __pyx_int_1) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_ORG_2, __pyx_int_2) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_GPE, __pyx_int_8) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_FAC, __pyx_int_8) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_TTL, __pyx_int_8) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_MISC_2, __pyx_int_8) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_kp_s_UNSURE, __pyx_int_9) < 0) __PYX_ERR(0, 1616, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_str2idx = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "gigaword2feature.pyx":1621
 *         }
 * 
 *     with codecs.open( sentence_file, 'rb', 'utf8' ) as sentences, \             # <<<<<<<<<<<<<<
 *          codecs.open( tag_file, 'rb', 'utf8' ) as tags:
 * 
 */
  /*with:*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_open); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence_file);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentence_file);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_cur_scope->__pyx_v_sentence_file);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_n_s_rb);
    __Pyx_INCREF(__pyx_n_s_utf8);
    __Pyx_GIVEREF(__pyx_n_s_utf8);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_n_s_utf8);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1621, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1621, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1621, __pyx_L5_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {
          __Pyx_GIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_v_sentences = __pyx_t_6;
          __pyx_t_6 = 0;

          /* "gigaword2feature.pyx":1622
 * 
 *     with codecs.open( sentence_file, 'rb', 'utf8' ) as sentences, \
 *          codecs.open( tag_file, 'rb', 'utf8' ) as tags:             # <<<<<<<<<<<<<<
 * 
 *         for sentence, tag in islice( izip( sentences, tags ),
 */
          /*with:*/ {
            __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_codecs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1622, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_open); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1622, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = NULL;
            __pyx_t_5 = 0;
            if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_5 = 1;
              }
            }
            __pyx_t_3 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1622, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (__pyx_t_2) {
              __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
            }
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag_file);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag_file);
            PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_5, __pyx_cur_scope->__pyx_v_tag_file);
            __Pyx_INCREF(__pyx_n_s_rb);
            __Pyx_GIVEREF(__pyx_n_s_rb);
            PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_5, __pyx_n_s_rb);
            __Pyx_INCREF(__pyx_n_s_utf8);
            __Pyx_GIVEREF(__pyx_n_s_utf8);
            PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_5, __pyx_n_s_utf8);
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1622, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_11 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_exit); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1622, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_6, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1622, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            if (__pyx_t_2) {
              __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1622, __pyx_L17_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            } else {
              __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1622, __pyx_L17_error)
            }
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __pyx_t_4;
            __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            /*try:*/ {
              {
                __Pyx_PyThreadState_declare
                __Pyx_PyThreadState_assign
                __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
                __Pyx_XGOTREF(__pyx_t_12);
                __Pyx_XGOTREF(__pyx_t_13);
                __Pyx_XGOTREF(__pyx_t_14);
                /*try:*/ {
                  __Pyx_GIVEREF(__pyx_t_3);
                  __pyx_cur_scope->__pyx_v_tags = __pyx_t_3;
                  __pyx_t_3 = 0;

                  /* "gigaword2feature.pyx":1624
 *          codecs.open( tag_file, 'rb', 'utf8' ) as tags:
 * 
 *         for sentence, tag in islice( izip( sentences, tags ),             # <<<<<<<<<<<<<<
 *                                      start, stop, step ):
 *             if sentence.startswith( u'<p>' ) or \
 */
                  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_islice); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L23_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_izip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1624, __pyx_L23_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_15 = NULL;
                  __pyx_t_5 = 0;
                  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
                    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_2);
                    if (likely(__pyx_t_15)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                      __Pyx_INCREF(__pyx_t_15);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_2, function);
                      __pyx_t_5 = 1;
                    }
                  }
                  __pyx_t_16 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1624, __pyx_L23_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  if (__pyx_t_15) {
                    __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;
                  }
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentences);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentences);
                  PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_5, __pyx_cur_scope->__pyx_v_sentences);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tags);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tags);
                  PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_5, __pyx_cur_scope->__pyx_v_tags);
                  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_16, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1624, __pyx_L23_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                  /* "gigaword2feature.pyx":1625
 * 
 *         for sentence, tag in islice( izip( sentences, tags ),
 *                                      start, stop, step ):             # <<<<<<<<<<<<<<
 *             if sentence.startswith( u'<p>' ) or \
 *                     sentence.startswith( u'</p>' ) or \
 */
                  __pyx_t_2 = NULL;
                  __pyx_t_5 = 0;
                  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_6, function);
                      __pyx_t_5 = 1;
                    }
                  }
                  __pyx_t_16 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1624, __pyx_L23_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  if (__pyx_t_2) {
                    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_2); __pyx_t_2 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_4);
                  PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_5, __pyx_t_4);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_start);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_start);
                  PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_5, __pyx_cur_scope->__pyx_v_start);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_stop);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_stop);
                  PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_5, __pyx_cur_scope->__pyx_v_stop);
                  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_step);
                  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_step);
                  PyTuple_SET_ITEM(__pyx_t_16, 3+__pyx_t_5, __pyx_cur_scope->__pyx_v_step);
                  __pyx_t_4 = 0;
                  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1624, __pyx_L23_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

                  /* "gigaword2feature.pyx":1624
 *          codecs.open( tag_file, 'rb', 'utf8' ) as tags:
 * 
 *         for sentence, tag in islice( izip( sentences, tags ),             # <<<<<<<<<<<<<<
 *                                      start, stop, step ):
 *             if sentence.startswith( u'<p>' ) or \
 */
                  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
                    __pyx_t_6 = __pyx_t_3; __Pyx_INCREF(__pyx_t_6); __pyx_t_5 = 0;
                    __pyx_t_17 = NULL;
                  } else {
                    __pyx_t_5 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_6);
                    __pyx_t_17 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1624, __pyx_L23_error)
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  for (;;) {
                    if (likely(!__pyx_t_17)) {
                      if (likely(PyList_CheckExact(__pyx_t_6))) {
                        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_6)) break;
                        #if CYTHON_COMPILING_IN_CPYTHON
                        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1624, __pyx_L23_error)
                        #else
                        __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1624, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        #endif
                      } else {
                        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
                        #if CYTHON_COMPILING_IN_CPYTHON
                        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1624, __pyx_L23_error)
                        #else
                        __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1624, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        #endif
                      }
                    } else {
                      __pyx_t_3 = __pyx_t_17(__pyx_t_6);
                      if (unlikely(!__pyx_t_3)) {
                        PyObject* exc_type = PyErr_Occurred();
                        if (exc_type) {
                          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                          else __PYX_ERR(0, 1624, __pyx_L23_error)
                        }
                        break;
                      }
                      __Pyx_GOTREF(__pyx_t_3);
                    }
                    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
                      PyObject* sequence = __pyx_t_3;
                      #if CYTHON_COMPILING_IN_CPYTHON
                      Py_ssize_t size = Py_SIZE(sequence);
                      #else
                      Py_ssize_t size = PySequence_Size(sequence);
                      #endif
                      if (unlikely(size != 2)) {
                        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                        __PYX_ERR(0, 1624, __pyx_L23_error)
                      }
                      #if CYTHON_COMPILING_IN_CPYTHON
                      if (likely(PyTuple_CheckExact(sequence))) {
                        __pyx_t_16 = PyTuple_GET_ITEM(sequence, 0); 
                        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
                      } else {
                        __pyx_t_16 = PyList_GET_ITEM(sequence, 0); 
                        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
                      }
                      __Pyx_INCREF(__pyx_t_16);
                      __Pyx_INCREF(__pyx_t_4);
                      #else
                      __pyx_t_16 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1624, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1624, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      #endif
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    } else {
                      Py_ssize_t index = -1;
                      __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1624, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __pyx_t_18 = Py_TYPE(__pyx_t_2)->tp_iternext;
                      index = 0; __pyx_t_16 = __pyx_t_18(__pyx_t_2); if (unlikely(!__pyx_t_16)) goto __pyx_L33_unpacking_failed;
                      __Pyx_GOTREF(__pyx_t_16);
                      index = 1; __pyx_t_4 = __pyx_t_18(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L33_unpacking_failed;
                      __Pyx_GOTREF(__pyx_t_4);
                      if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1624, __pyx_L23_error)
                      __pyx_t_18 = NULL;
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      goto __pyx_L34_unpacking_done;
                      __pyx_L33_unpacking_failed:;
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      __pyx_t_18 = NULL;
                      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                      __PYX_ERR(0, 1624, __pyx_L23_error)
                      __pyx_L34_unpacking_done:;
                    }
                    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_sentence);
                    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_sentence, __pyx_t_16);
                    __Pyx_GIVEREF(__pyx_t_16);
                    __pyx_t_16 = 0;
                    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tag);
                    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tag, __pyx_t_4);
                    __Pyx_GIVEREF(__pyx_t_4);
                    __pyx_t_4 = 0;

                    /* "gigaword2feature.pyx":1626
 *         for sentence, tag in islice( izip( sentences, tags ),
 *                                      start, stop, step ):
 *             if sentence.startswith( u'<p>' ) or \             # <<<<<<<<<<<<<<
 *                     sentence.startswith( u'</p>' ) or \
 *                     sentence.startswith( u'**********' ):
 */
                    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_sentence, __pyx_n_s_startswith); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1626, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1626, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 1626, __pyx_L23_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    if (!__pyx_t_19) {
                    } else {
                      __pyx_t_1 = __pyx_t_19;
                      goto __pyx_L36_bool_binop_done;
                    }

                    /* "gigaword2feature.pyx":1627
 *                                      start, stop, step ):
 *             if sentence.startswith( u'<p>' ) or \
 *                     sentence.startswith( u'</p>' ) or \             # <<<<<<<<<<<<<<
 *                     sentence.startswith( u'**********' ):
 *                 continue
 */
                    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_sentence, __pyx_n_s_startswith); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1627, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 1627, __pyx_L23_error)
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    if (!__pyx_t_19) {
                    } else {
                      __pyx_t_1 = __pyx_t_19;
                      goto __pyx_L36_bool_binop_done;
                    }

                    /* "gigaword2feature.pyx":1628
 *             if sentence.startswith( u'<p>' ) or \
 *                     sentence.startswith( u'</p>' ) or \
 *                     sentence.startswith( u'**********' ):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
                    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_sentence, __pyx_n_s_startswith); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1628, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1628, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_19 < 0)) __PYX_ERR(0, 1628, __pyx_L23_error)
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __pyx_t_1 = __pyx_t_19;
                    __pyx_L36_bool_binop_done:;

                    /* "gigaword2feature.pyx":1626
 *         for sentence, tag in islice( izip( sentences, tags ),
 *                                      start, stop, step ):
 *             if sentence.startswith( u'<p>' ) or \             # <<<<<<<<<<<<<<
 *                     sentence.startswith( u'</p>' ) or \
 *                     sentence.startswith( u'**********' ):
 */
                    if (__pyx_t_1) {

                      /* "gigaword2feature.pyx":1629
 *                     sentence.startswith( u'</p>' ) or \
 *                     sentence.startswith( u'**********' ):
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             # parse a sentence
 */
                      goto __pyx_L31_continue;

                      /* "gigaword2feature.pyx":1626
 *         for sentence, tag in islice( izip( sentences, tags ),
 *                                      start, stop, step ):
 *             if sentence.startswith( u'<p>' ) or \             # <<<<<<<<<<<<<<
 *                     sentence.startswith( u'</p>' ) or \
 *                     sentence.startswith( u'**********' ):
 */
                    }

                    /* "gigaword2feature.pyx":1632
 * 
 *             # parse a sentence
 *             boe, eoe, loe, to_keep = [], [], [], False             # <<<<<<<<<<<<<<
 *             for x in tag.split():
 *                 tokens = x.split( u',' )
 */
                    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1632, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1632, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_16 = PyList_New(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1632, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __pyx_t_1 = 0;
                    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_boe);
                    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_boe, ((PyObject*)__pyx_t_4));
                    __Pyx_GIVEREF(__pyx_t_4);
                    __pyx_t_4 = 0;
                    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_eoe);
                    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_eoe, ((PyObject*)__pyx_t_3));
                    __Pyx_GIVEREF(__pyx_t_3);
                    __pyx_t_3 = 0;
                    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_loe);
                    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_loe, ((PyObject*)__pyx_t_16));
                    __Pyx_GIVEREF(__pyx_t_16);
                    __pyx_t_16 = 0;
                    __pyx_cur_scope->__pyx_v_to_keep = __pyx_t_1;

                    /* "gigaword2feature.pyx":1633
 *             # parse a sentence
 *             boe, eoe, loe, to_keep = [], [], [], False
 *             for x in tag.split():             # <<<<<<<<<<<<<<
 *                 tokens = x.split( u',' )
 *                 boe.append( int(tokens[0]) )
 */
                    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tag, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1633, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_4 = NULL;
                    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
                      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                      if (likely(__pyx_t_4)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                        __Pyx_INCREF(__pyx_t_4);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_3, function);
                      }
                    }
                    if (__pyx_t_4) {
                      __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1633, __pyx_L23_error)
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    } else {
                      __pyx_t_16 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1633, __pyx_L23_error)
                    }
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
                      __pyx_t_3 = __pyx_t_16; __Pyx_INCREF(__pyx_t_3); __pyx_t_20 = 0;
                      __pyx_t_21 = NULL;
                    } else {
                      __pyx_t_20 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1633, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __pyx_t_21 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1633, __pyx_L23_error)
                    }
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    for (;;) {
                      if (likely(!__pyx_t_21)) {
                        if (likely(PyList_CheckExact(__pyx_t_3))) {
                          if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_3)) break;
                          #if CYTHON_COMPILING_IN_CPYTHON
                          __pyx_t_16 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_20); __Pyx_INCREF(__pyx_t_16); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1633, __pyx_L23_error)
                          #else
                          __pyx_t_16 = PySequence_ITEM(__pyx_t_3, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1633, __pyx_L23_error)
                          __Pyx_GOTREF(__pyx_t_16);
                          #endif
                        } else {
                          if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                          #if CYTHON_COMPILING_IN_CPYTHON
                          __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_20); __Pyx_INCREF(__pyx_t_16); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1633, __pyx_L23_error)
                          #else
                          __pyx_t_16 = PySequence_ITEM(__pyx_t_3, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1633, __pyx_L23_error)
                          __Pyx_GOTREF(__pyx_t_16);
                          #endif
                        }
                      } else {
                        __pyx_t_16 = __pyx_t_21(__pyx_t_3);
                        if (unlikely(!__pyx_t_16)) {
                          PyObject* exc_type = PyErr_Occurred();
                          if (exc_type) {
                            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                            else __PYX_ERR(0, 1633, __pyx_L23_error)
                          }
                          break;
                        }
                        __Pyx_GOTREF(__pyx_t_16);
                      }
                      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
                      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_16);
                      __Pyx_GIVEREF(__pyx_t_16);
                      __pyx_t_16 = 0;

                      /* "gigaword2feature.pyx":1634
 *             boe, eoe, loe, to_keep = [], [], [], False
 *             for x in tag.split():
 *                 tokens = x.split( u',' )             # <<<<<<<<<<<<<<
 *                 boe.append( int(tokens[0]) )
 *                 eoe.append( int(tokens[1]) )
 */
                      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_x, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1634, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1634, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tokens);
                      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tokens, __pyx_t_4);
                      __Pyx_GIVEREF(__pyx_t_4);
                      __pyx_t_4 = 0;

                      /* "gigaword2feature.pyx":1635
 *             for x in tag.split():
 *                 tokens = x.split( u',' )
 *                 boe.append( int(tokens[0]) )             # <<<<<<<<<<<<<<
 *                 eoe.append( int(tokens[1]) )
 *                 loe.append( str2idx[tokens[2]] )
 */
                      __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tokens, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1635, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __pyx_t_16 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1635, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      __pyx_t_22 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_boe, __pyx_t_16); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 1635, __pyx_L23_error)
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

                      /* "gigaword2feature.pyx":1636
 *                 tokens = x.split( u',' )
 *                 boe.append( int(tokens[0]) )
 *                 eoe.append( int(tokens[1]) )             # <<<<<<<<<<<<<<
 *                 loe.append( str2idx[tokens[2]] )
 *                 if loe[-1] < 10:
 */
                      __pyx_t_16 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tokens, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1636, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1636, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __pyx_t_22 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_eoe, __pyx_t_4); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 1636, __pyx_L23_error)
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                      /* "gigaword2feature.pyx":1637
 *                 boe.append( int(tokens[0]) )
 *                 eoe.append( int(tokens[1]) )
 *                 loe.append( str2idx[tokens[2]] )             # <<<<<<<<<<<<<<
 *                 if loe[-1] < 10:
 *                     to_keep = True
 */
                      __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_tokens, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1637, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __pyx_t_16 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_str2idx, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1637, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      __pyx_t_22 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_loe, __pyx_t_16); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 1637, __pyx_L23_error)
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

                      /* "gigaword2feature.pyx":1638
 *                 eoe.append( int(tokens[1]) )
 *                 loe.append( str2idx[tokens[2]] )
 *                 if loe[-1] < 10:             # <<<<<<<<<<<<<<
 *                     to_keep = True
 * 
 */
                      __pyx_t_16 = __Pyx_GetItemInt_List(__pyx_cur_scope->__pyx_v_loe, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1638, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __pyx_t_4 = PyObject_RichCompare(__pyx_t_16, __pyx_int_10, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1638, __pyx_L23_error)
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1638, __pyx_L23_error)
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      if (__pyx_t_1) {

                        /* "gigaword2feature.pyx":1639
 *                 loe.append( str2idx[tokens[2]] )
 *                 if loe[-1] < 10:
 *                     to_keep = True             # <<<<<<<<<<<<<<
 * 
 *             if to_keep:
 */
                        __pyx_cur_scope->__pyx_v_to_keep = 1;

                        /* "gigaword2feature.pyx":1638
 *                 eoe.append( int(tokens[1]) )
 *                 loe.append( str2idx[tokens[2]] )
 *                 if loe[-1] < 10:             # <<<<<<<<<<<<<<
 *                     to_keep = True
 * 
 */
                      }

                      /* "gigaword2feature.pyx":1633
 *             # parse a sentence
 *             boe, eoe, loe, to_keep = [], [], [], False
 *             for x in tag.split():             # <<<<<<<<<<<<<<
 *                 tokens = x.split( u',' )
 *                 boe.append( int(tokens[0]) )
 */
                    }
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                    /* "gigaword2feature.pyx":1641
 *                     to_keep = True
 * 
 *             if to_keep:             # <<<<<<<<<<<<<<
 *                 sent = sentence.split()
 *                 for b, e in zip( boe, eoe ):
 */
                    __pyx_t_1 = (__pyx_cur_scope->__pyx_v_to_keep != 0);
                    if (__pyx_t_1) {

                      /* "gigaword2feature.pyx":1642
 * 
 *             if to_keep:
 *                 sent = sentence.split()             # <<<<<<<<<<<<<<
 *                 for b, e in zip( boe, eoe ):
 *                     # assert 0 <= b < e <= len(sent)
 */
                      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_sentence, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1642, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __pyx_t_16 = NULL;
                      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
                        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_4);
                        if (likely(__pyx_t_16)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                          __Pyx_INCREF(__pyx_t_16);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_4, function);
                        }
                      }
                      if (__pyx_t_16) {
                        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1642, __pyx_L23_error)
                        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      } else {
                        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1642, __pyx_L23_error)
                      }
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_sent);
                      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_sent, __pyx_t_3);
                      __Pyx_GIVEREF(__pyx_t_3);
                      __pyx_t_3 = 0;

                      /* "gigaword2feature.pyx":1643
 *             if to_keep:
 *                 sent = sentence.split()
 *                 for b, e in zip( boe, eoe ):             # <<<<<<<<<<<<<<
 *                     # assert 0 <= b < e <= len(sent)
 *                     if not 0 <= b < e <= len(sent):
 */
                      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1643, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_boe);
                      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_boe);
                      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_boe);
                      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_eoe);
                      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_eoe);
                      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_cur_scope->__pyx_v_eoe);
                      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1643, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
                        __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_20 = 0;
                        __pyx_t_21 = NULL;
                      } else {
                        __pyx_t_20 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1643, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_21 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1643, __pyx_L23_error)
                      }
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      for (;;) {
                        if (likely(!__pyx_t_21)) {
                          if (likely(PyList_CheckExact(__pyx_t_3))) {
                            if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_3)) break;
                            #if CYTHON_COMPILING_IN_CPYTHON
                            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_20); __Pyx_INCREF(__pyx_t_4); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1643, __pyx_L23_error)
                            #else
                            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1643, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            #endif
                          } else {
                            if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                            #if CYTHON_COMPILING_IN_CPYTHON
                            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_20); __Pyx_INCREF(__pyx_t_4); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1643, __pyx_L23_error)
                            #else
                            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1643, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            #endif
                          }
                        } else {
                          __pyx_t_4 = __pyx_t_21(__pyx_t_3);
                          if (unlikely(!__pyx_t_4)) {
                            PyObject* exc_type = PyErr_Occurred();
                            if (exc_type) {
                              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                              else __PYX_ERR(0, 1643, __pyx_L23_error)
                            }
                            break;
                          }
                          __Pyx_GOTREF(__pyx_t_4);
                        }
                        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
                          PyObject* sequence = __pyx_t_4;
                          #if CYTHON_COMPILING_IN_CPYTHON
                          Py_ssize_t size = Py_SIZE(sequence);
                          #else
                          Py_ssize_t size = PySequence_Size(sequence);
                          #endif
                          if (unlikely(size != 2)) {
                            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                            __PYX_ERR(0, 1643, __pyx_L23_error)
                          }
                          #if CYTHON_COMPILING_IN_CPYTHON
                          if (likely(PyTuple_CheckExact(sequence))) {
                            __pyx_t_16 = PyTuple_GET_ITEM(sequence, 0); 
                            __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
                          } else {
                            __pyx_t_16 = PyList_GET_ITEM(sequence, 0); 
                            __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
                          }
                          __Pyx_INCREF(__pyx_t_16);
                          __Pyx_INCREF(__pyx_t_2);
                          #else
                          __pyx_t_16 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1643, __pyx_L23_error)
                          __Pyx_GOTREF(__pyx_t_16);
                          __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1643, __pyx_L23_error)
                          __Pyx_GOTREF(__pyx_t_2);
                          #endif
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                        } else {
                          Py_ssize_t index = -1;
                          __pyx_t_15 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1643, __pyx_L23_error)
                          __Pyx_GOTREF(__pyx_t_15);
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                          __pyx_t_18 = Py_TYPE(__pyx_t_15)->tp_iternext;
                          index = 0; __pyx_t_16 = __pyx_t_18(__pyx_t_15); if (unlikely(!__pyx_t_16)) goto __pyx_L45_unpacking_failed;
                          __Pyx_GOTREF(__pyx_t_16);
                          index = 1; __pyx_t_2 = __pyx_t_18(__pyx_t_15); if (unlikely(!__pyx_t_2)) goto __pyx_L45_unpacking_failed;
                          __Pyx_GOTREF(__pyx_t_2);
                          if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_15), 2) < 0) __PYX_ERR(0, 1643, __pyx_L23_error)
                          __pyx_t_18 = NULL;
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          goto __pyx_L46_unpacking_done;
                          __pyx_L45_unpacking_failed:;
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          __pyx_t_18 = NULL;
                          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
                          __PYX_ERR(0, 1643, __pyx_L23_error)
                          __pyx_L46_unpacking_done:;
                        }
                        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_b);
                        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_b, __pyx_t_16);
                        __Pyx_GIVEREF(__pyx_t_16);
                        __pyx_t_16 = 0;
                        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_e);
                        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_e, __pyx_t_2);
                        __Pyx_GIVEREF(__pyx_t_2);
                        __pyx_t_2 = 0;

                        /* "gigaword2feature.pyx":1645
 *                 for b, e in zip( boe, eoe ):
 *                     # assert 0 <= b < e <= len(sent)
 *                     if not 0 <= b < e <= len(sent):             # <<<<<<<<<<<<<<
 *                         logger.exception( sentence )
 *                         logger.exception( tag )
 */
                        __pyx_t_4 = PyObject_RichCompare(__pyx_int_0, __pyx_cur_scope->__pyx_v_b, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L23_error)
                        if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {
                          __Pyx_DECREF(__pyx_t_4);
                          __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_b, __pyx_cur_scope->__pyx_v_e, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L23_error)
                          if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {
                            __Pyx_DECREF(__pyx_t_4);
                            __pyx_t_23 = PyObject_Length(__pyx_cur_scope->__pyx_v_sent); if (unlikely(__pyx_t_23 == -1)) __PYX_ERR(0, 1645, __pyx_L23_error)
                            __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_23); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1645, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_2);
                            __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_e, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1645, __pyx_L23_error)
                            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                          }
                        }
                        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1645, __pyx_L23_error)
                        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                        __pyx_t_19 = ((!__pyx_t_1) != 0);
                        if (__pyx_t_19) {

                          /* "gigaword2feature.pyx":1646
 *                     # assert 0 <= b < e <= len(sent)
 *                     if not 0 <= b < e <= len(sent):
 *                         logger.exception( sentence )             # <<<<<<<<<<<<<<
 *                         logger.exception( tag )
 *                         to_keep = False
 */
                          __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1646, __pyx_L23_error)
                          __Pyx_GOTREF(__pyx_t_2);
                          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exception); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1646, __pyx_L23_error)
                          __Pyx_GOTREF(__pyx_t_16);
                          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                          __pyx_t_2 = NULL;
                          if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_16))) {
                            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_16);
                            if (likely(__pyx_t_2)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                              __Pyx_INCREF(__pyx_t_2);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_16, function);
                            }
                          }
                          if (!__pyx_t_2) {
                            __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_cur_scope->__pyx_v_sentence); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1646, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_4);
                          } else {
                            __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1646, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_15);
                            __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_2); __pyx_t_2 = NULL;
                            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sentence);
                            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sentence);
                            PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_cur_scope->__pyx_v_sentence);
                            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1646, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          }
                          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                          /* "gigaword2feature.pyx":1647
 *                     if not 0 <= b < e <= len(sent):
 *                         logger.exception( sentence )
 *                         logger.exception( tag )             # <<<<<<<<<<<<<<
 *                         to_keep = False
 *                         break
 */
                          __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_logger); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1647, __pyx_L23_error)
                          __Pyx_GOTREF(__pyx_t_16);
                          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_exception); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1647, __pyx_L23_error)
                          __Pyx_GOTREF(__pyx_t_15);
                          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                          __pyx_t_16 = NULL;
                          if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_15))) {
                            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
                            if (likely(__pyx_t_16)) {
                              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                              __Pyx_INCREF(__pyx_t_16);
                              __Pyx_INCREF(function);
                              __Pyx_DECREF_SET(__pyx_t_15, function);
                            }
                          }
                          if (!__pyx_t_16) {
                            __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_cur_scope->__pyx_v_tag); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1647, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_4);
                          } else {
                            __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1647, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_2);
                            __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_16); __pyx_t_16 = NULL;
                            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tag);
                            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tag);
                            PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_cur_scope->__pyx_v_tag);
                            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1647, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                          }
                          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                          /* "gigaword2feature.pyx":1648
 *                         logger.exception( sentence )
 *                         logger.exception( tag )
 *                         to_keep = False             # <<<<<<<<<<<<<<
 *                         break
 * 
 */
                          __pyx_cur_scope->__pyx_v_to_keep = 0;

                          /* "gigaword2feature.pyx":1649
 *                         logger.exception( tag )
 *                         to_keep = False
 *                         break             # <<<<<<<<<<<<<<
 * 
 *             if to_keep:
 */
                          goto __pyx_L44_break;

                          /* "gigaword2feature.pyx":1645
 *                 for b, e in zip( boe, eoe ):
 *                     # assert 0 <= b < e <= len(sent)
 *                     if not 0 <= b < e <= len(sent):             # <<<<<<<<<<<<<<
 *                         logger.exception( sentence )
 *                         logger.exception( tag )
 */
                        }

                        /* "gigaword2feature.pyx":1643
 *             if to_keep:
 *                 sent = sentence.split()
 *                 for b, e in zip( boe, eoe ):             # <<<<<<<<<<<<<<
 *                     # assert 0 <= b < e <= len(sent)
 *                     if not 0 <= b < e <= len(sent):
 */
                      }
                      __pyx_L44_break:;
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                      /* "gigaword2feature.pyx":1641
 *                     to_keep = True
 * 
 *             if to_keep:             # <<<<<<<<<<<<<<
 *                 sent = sentence.split()
 *                 for b, e in zip( boe, eoe ):
 */
                    }

                    /* "gigaword2feature.pyx":1651
 *                         break
 * 
 *             if to_keep:             # <<<<<<<<<<<<<<
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \
 */
                    __pyx_t_19 = (__pyx_cur_scope->__pyx_v_to_keep != 0);
                    if (__pyx_t_19) {

                      /* "gigaword2feature.pyx":1652
 * 
 *             if to_keep:
 *                 for i,w in enumerate( sent ):             # <<<<<<<<<<<<<<
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \
 *                                           else chr(0) for c in list(w) )
 */
                      __Pyx_INCREF(__pyx_int_0);
                      __pyx_t_3 = __pyx_int_0;
                      if (unlikely(!__pyx_cur_scope->__pyx_v_sent)) { __Pyx_RaiseUnboundLocalError("sent"); __PYX_ERR(0, 1652, __pyx_L23_error) }
                      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_sent)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_sent)) {
                        __pyx_t_4 = __pyx_cur_scope->__pyx_v_sent; __Pyx_INCREF(__pyx_t_4); __pyx_t_20 = 0;
                        __pyx_t_21 = NULL;
                      } else {
                        __pyx_t_20 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_sent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1652, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_4);
                        __pyx_t_21 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 1652, __pyx_L23_error)
                      }
                      for (;;) {
                        if (likely(!__pyx_t_21)) {
                          if (likely(PyList_CheckExact(__pyx_t_4))) {
                            if (__pyx_t_20 >= PyList_GET_SIZE(__pyx_t_4)) break;
                            #if CYTHON_COMPILING_IN_CPYTHON
                            __pyx_t_15 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_20); __Pyx_INCREF(__pyx_t_15); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1652, __pyx_L23_error)
                            #else
                            __pyx_t_15 = PySequence_ITEM(__pyx_t_4, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1652, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_15);
                            #endif
                          } else {
                            if (__pyx_t_20 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
                            #if CYTHON_COMPILING_IN_CPYTHON
                            __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_20); __Pyx_INCREF(__pyx_t_15); __pyx_t_20++; if (unlikely(0 < 0)) __PYX_ERR(0, 1652, __pyx_L23_error)
                            #else
                            __pyx_t_15 = PySequence_ITEM(__pyx_t_4, __pyx_t_20); __pyx_t_20++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1652, __pyx_L23_error)
                            __Pyx_GOTREF(__pyx_t_15);
                            #endif
                          }
                        } else {
                          __pyx_t_15 = __pyx_t_21(__pyx_t_4);
                          if (unlikely(!__pyx_t_15)) {
                            PyObject* exc_type = PyErr_Occurred();
                            if (exc_type) {
                              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                              else __PYX_ERR(0, 1652, __pyx_L23_error)
                            }
                            break;
                          }
                          __Pyx_GOTREF(__pyx_t_15);
                        }
                        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_w);
                        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_w, __pyx_t_15);
                        __Pyx_GIVEREF(__pyx_t_15);
                        __pyx_t_15 = 0;
                        __Pyx_INCREF(__pyx_t_3);
                        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
                        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_3);
                        __Pyx_GIVEREF(__pyx_t_3);
                        __pyx_t_15 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1652, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_15);
                        __Pyx_DECREF(__pyx_t_3);
                        __pyx_t_3 = __pyx_t_15;
                        __pyx_t_15 = 0;

                        /* "gigaword2feature.pyx":1653
 *             if to_keep:
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \             # <<<<<<<<<<<<<<
 *                                           else chr(0) for c in list(w) )
 *                 yield sent, boe, eoe, loe
 */
                        __pyx_t_15 = __pyx_pf_16gigaword2feature_26distant_supervision_parser_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1653, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_15);
                        __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1653, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                        __pyx_t_15 = PyUnicode_Join(__pyx_kp_u__42, __pyx_t_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1653, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_15);
                        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                        if (unlikely(!__pyx_cur_scope->__pyx_v_sent)) { __Pyx_RaiseUnboundLocalError("sent"); __PYX_ERR(0, 1653, __pyx_L23_error) }
                        if (unlikely(PyObject_SetItem(__pyx_cur_scope->__pyx_v_sent, __pyx_cur_scope->__pyx_v_i, __pyx_t_15) < 0)) __PYX_ERR(0, 1653, __pyx_L23_error)
                        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                        /* "gigaword2feature.pyx":1652
 * 
 *             if to_keep:
 *                 for i,w in enumerate( sent ):             # <<<<<<<<<<<<<<
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \
 *                                           else chr(0) for c in list(w) )
 */
                      }
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                      /* "gigaword2feature.pyx":1655
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \
 *                                           else chr(0) for c in list(w) )
 *                 yield sent, boe, eoe, loe             # <<<<<<<<<<<<<<
 * 
 * 
 */
                      if (unlikely(!__pyx_cur_scope->__pyx_v_sent)) { __Pyx_RaiseUnboundLocalError("sent"); __PYX_ERR(0, 1655, __pyx_L23_error) }
                      __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1655, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_sent);
                      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_sent);
                      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_sent);
                      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_boe);
                      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_boe);
                      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_cur_scope->__pyx_v_boe);
                      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_eoe);
                      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_eoe);
                      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_cur_scope->__pyx_v_eoe);
                      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_loe);
                      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_loe);
                      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_cur_scope->__pyx_v_loe);
                      __pyx_r = __pyx_t_3;
                      __pyx_t_3 = 0;
                      __pyx_cur_scope->__pyx_t_0 = __pyx_t_5;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __pyx_cur_scope->__pyx_t_3 = __pyx_t_8;
                      __Pyx_XGIVEREF(__pyx_t_9);
                      __pyx_cur_scope->__pyx_t_4 = __pyx_t_9;
                      __Pyx_XGIVEREF(__pyx_t_10);
                      __pyx_cur_scope->__pyx_t_5 = __pyx_t_10;
                      __Pyx_XGIVEREF(__pyx_t_11);
                      __pyx_cur_scope->__pyx_t_6 = __pyx_t_11;
                      __Pyx_XGIVEREF(__pyx_t_12);
                      __pyx_cur_scope->__pyx_t_7 = __pyx_t_12;
                      __Pyx_XGIVEREF(__pyx_t_13);
                      __pyx_cur_scope->__pyx_t_8 = __pyx_t_13;
                      __Pyx_XGIVEREF(__pyx_t_14);
                      __pyx_cur_scope->__pyx_t_9 = __pyx_t_14;
                      __pyx_cur_scope->__pyx_t_10 = __pyx_t_17;
                      __Pyx_XGIVEREF(__pyx_r);
                      __Pyx_RefNannyFinishContext();
                      /* return from generator, yielding value */
                      __pyx_generator->resume_label = 1;
                      return __pyx_r;
                      __pyx_L51_resume_from_yield:;
                      __pyx_t_5 = __pyx_cur_scope->__pyx_t_0;
                      __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
                      __pyx_cur_scope->__pyx_t_1 = 0;
                      __Pyx_XGOTREF(__pyx_t_6);
                      __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
                      __pyx_cur_scope->__pyx_t_2 = 0;
                      __Pyx_XGOTREF(__pyx_t_7);
                      __pyx_t_8 = __pyx_cur_scope->__pyx_t_3;
                      __pyx_cur_scope->__pyx_t_3 = 0;
                      __Pyx_XGOTREF(__pyx_t_8);
                      __pyx_t_9 = __pyx_cur_scope->__pyx_t_4;
                      __pyx_cur_scope->__pyx_t_4 = 0;
                      __Pyx_XGOTREF(__pyx_t_9);
                      __pyx_t_10 = __pyx_cur_scope->__pyx_t_5;
                      __pyx_cur_scope->__pyx_t_5 = 0;
                      __Pyx_XGOTREF(__pyx_t_10);
                      __pyx_t_11 = __pyx_cur_scope->__pyx_t_6;
                      __pyx_cur_scope->__pyx_t_6 = 0;
                      __Pyx_XGOTREF(__pyx_t_11);
                      __pyx_t_12 = __pyx_cur_scope->__pyx_t_7;
                      __pyx_cur_scope->__pyx_t_7 = 0;
                      __Pyx_XGOTREF(__pyx_t_12);
                      __pyx_t_13 = __pyx_cur_scope->__pyx_t_8;
                      __pyx_cur_scope->__pyx_t_8 = 0;
                      __Pyx_XGOTREF(__pyx_t_13);
                      __pyx_t_14 = __pyx_cur_scope->__pyx_t_9;
                      __pyx_cur_scope->__pyx_t_9 = 0;
                      __Pyx_XGOTREF(__pyx_t_14);
                      __pyx_t_17 = __pyx_cur_scope->__pyx_t_10;
                      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1655, __pyx_L23_error)

                      /* "gigaword2feature.pyx":1651
 *                         break
 * 
 *             if to_keep:             # <<<<<<<<<<<<<<
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \
 */
                    }

                    /* "gigaword2feature.pyx":1624
 *          codecs.open( tag_file, 'rb', 'utf8' ) as tags:
 * 
 *         for sentence, tag in islice( izip( sentences, tags ),             # <<<<<<<<<<<<<<
 *                                      start, stop, step ):
 *             if sentence.startswith( u'<p>' ) or \
 */
                    __pyx_L31_continue:;
                  }
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

                  /* "gigaword2feature.pyx":1622
 * 
 *     with codecs.open( sentence_file, 'rb', 'utf8' ) as sentences, \
 *          codecs.open( tag_file, 'rb', 'utf8' ) as tags:             # <<<<<<<<<<<<<<
 * 
 *         for sentence, tag in islice( izip( sentences, tags ),
 */
                }
                __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
                __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                goto __pyx_L30_try_end;
                __pyx_L23_error:;
                __Pyx_PyThreadState_assign
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                /*except:*/ {
                  __Pyx_AddTraceback("gigaword2feature.distant_supervision_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_3, &__pyx_t_4) < 0) __PYX_ERR(0, 1622, __pyx_L25_except_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_15 = PyTuple_Pack(3, __pyx_t_6, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1622, __pyx_L25_except_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_15, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 1622, __pyx_L25_except_error)
                  __Pyx_GOTREF(__pyx_t_24);
                  __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_24);
                  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                  if (__pyx_t_19 < 0) __PYX_ERR(0, 1622, __pyx_L25_except_error)
                  __pyx_t_1 = ((!(__pyx_t_19 != 0)) != 0);
                  if (__pyx_t_1) {
                    __Pyx_GIVEREF(__pyx_t_6);
                    __Pyx_GIVEREF(__pyx_t_3);
                    __Pyx_XGIVEREF(__pyx_t_4);
                    __Pyx_ErrRestoreWithState(__pyx_t_6, __pyx_t_3, __pyx_t_4);
                    __pyx_t_6 = 0; __pyx_t_3 = 0; __pyx_t_4 = 0; 
                    __PYX_ERR(0, 1622, __pyx_L25_except_error)
                  }
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  goto __pyx_L24_exception_handled;
                }
                __pyx_L25_except_error:;
                __Pyx_PyThreadState_assign
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_14);
                __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
                goto __pyx_L9_error;
                __pyx_L24_exception_handled:;
                __Pyx_PyThreadState_assign
                __Pyx_XGIVEREF(__pyx_t_12);
                __Pyx_XGIVEREF(__pyx_t_13);
                __Pyx_XGIVEREF(__pyx_t_14);
                __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
                __pyx_L30_try_end:;
              }
            }
            /*finally:*/ {
              /*normal exit:*/{
                if (__pyx_t_11) {
                  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__70, NULL);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1622, __pyx_L9_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                }
                goto __pyx_L22;
              }
              __pyx_L22:;
            }
            goto __pyx_L55;
            __pyx_L17_error:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L9_error;
            __pyx_L55:;
          }

          /* "gigaword2feature.pyx":1621
 *         }
 * 
 *     with codecs.open( sentence_file, 'rb', 'utf8' ) as sentences, \             # <<<<<<<<<<<<<<
 *          codecs.open( tag_file, 'rb', 'utf8' ) as tags:
 * 
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L16_try_end;
        __pyx_L9_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("gigaword2feature.distant_supervision_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_6) < 0) __PYX_ERR(0, 1621, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_15 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1621, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_15, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1621, __pyx_L11_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (__pyx_t_1 < 0) __PYX_ERR(0, 1621, __pyx_L11_except_error)
          __pyx_t_19 = ((!(__pyx_t_1 != 0)) != 0);
          if (__pyx_t_19) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_3, __pyx_t_6);
            __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(0, 1621, __pyx_L11_except_error)
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L10_exception_handled;
        }
        __pyx_L11_except_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L1_error;
        __pyx_L10_exception_handled:;
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L16_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_7) {
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__71, NULL);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1621, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        goto __pyx_L8;
      }
      __pyx_L8:;
    }
    goto __pyx_L59;
    __pyx_L5_error:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L1_error;
    __pyx_L59:;
  }

  /* "gigaword2feature.pyx":1603
 * 
 * 
 * def distant_supervision_parser( sentence_file, tag_file,             # <<<<<<<<<<<<<<
 *                                 start = 0, stop = None, step = 1,
 *                                 mode = 'KBP' ):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("distant_supervision_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 218, __pyx_L1_error)

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 222, __pyx_L1_error)

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 259, __pyx_L1_error)

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 278, __pyx_L1_error)
      break;
    }

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 796, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 799, __pyx_L1_error)

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 803, __pyx_L1_error)

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 823, __pyx_L1_error)

        /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyObject_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const std::vector<std::vector<int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_vector_to_py_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_float(const std::vector<float>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_float", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___(const std::vector<std::vector<float> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_vector_to_py_float((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_float_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(2, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) __PYX_ERR(2, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_16gigaword2feature_vocabulary __pyx_vtable_16gigaword2feature_vocabulary;

static PyObject *__pyx_tp_new_16gigaword2feature_vocabulary(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_16gigaword2feature_vocabulary *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_16gigaword2feature_vocabulary *)o);
  p->__pyx_vtab = __pyx_vtabptr_16gigaword2feature_vocabulary;
  p->word2idx = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->word2fofe = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_16gigaword2feature_10vocabulary_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature_vocabulary(PyObject *o) {
  struct __pyx_obj_16gigaword2feature_vocabulary *p = (struct __pyx_obj_16gigaword2feature_vocabulary *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_16gigaword2feature_10vocabulary_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->word2idx);
  Py_CLEAR(p->word2fofe);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_16gigaword2feature_vocabulary(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature_vocabulary *p = (struct __pyx_obj_16gigaword2feature_vocabulary *)o;
  if (p->word2idx) {
    e = (*v)(p->word2idx, a); if (e) return e;
  }
  if (p->word2fofe) {
    e = (*v)(p->word2fofe, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature_vocabulary(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature_vocabulary *p = (struct __pyx_obj_16gigaword2feature_vocabulary *)o;
  tmp = ((PyObject*)p->word2idx);
  p->word2idx = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->word2fofe);
  p->word2fofe = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_16gigaword2feature_10vocabulary_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_10vocabulary_5alpha_1__get__(o);
}

static PyMethodDef __pyx_methods_16gigaword2feature_vocabulary[] = {
  {"char_fofe_of_word", (PyCFunction)__pyx_pw_16gigaword2feature_10vocabulary_5char_fofe_of_word, METH_O, 0},
  {"char_fofe_of_phrase", (PyCFunction)__pyx_pw_16gigaword2feature_10vocabulary_7char_fofe_of_phrase, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_16gigaword2feature_vocabulary[] = {
  {(char *)"alpha", __pyx_getprop_16gigaword2feature_10vocabulary_alpha, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_16gigaword2feature_vocabulary = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.vocabulary", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature_vocabulary), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature_vocabulary, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature_vocabulary, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature_vocabulary, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_16gigaword2feature_vocabulary, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_16gigaword2feature_vocabulary, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature_vocabulary, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_16gigaword2feature_processed_sentence __pyx_vtable_16gigaword2feature_processed_sentence;

static PyObject *__pyx_tp_new_16gigaword2feature_processed_sentence(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_16gigaword2feature_processed_sentence *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_16gigaword2feature_processed_sentence *)o);
  p->__pyx_vtab = __pyx_vtabptr_16gigaword2feature_processed_sentence;
  new((void*)&(p->numeric)) std::vector<int> ();
  new((void*)&(p->sentence)) std::vector<std::string> ();
  new((void*)&(p->left_context_idx)) std::vector<std::vector<int> > ();
  new((void*)&(p->left_context_data)) std::vector<std::vector<float> > ();
  new((void*)&(p->right_context_idx)) std::vector<std::vector<int> > ();
  new((void*)&(p->right_context_data)) std::vector<std::vector<float> > ();
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature_processed_sentence(PyObject *o) {
  struct __pyx_obj_16gigaword2feature_processed_sentence *p = (struct __pyx_obj_16gigaword2feature_processed_sentence *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->numeric);
  __Pyx_call_destructor(p->sentence);
  __Pyx_call_destructor(p->left_context_idx);
  __Pyx_call_destructor(p->left_context_data);
  __Pyx_call_destructor(p->right_context_idx);
  __Pyx_call_destructor(p->right_context_data);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_16gigaword2feature_18processed_sentence_numeric(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_18processed_sentence_7numeric_1__get__(o);
}

static int __pyx_setprop_16gigaword2feature_18processed_sentence_numeric(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_16gigaword2feature_18processed_sentence_7numeric_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_16gigaword2feature_18processed_sentence_sentence(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_18processed_sentence_8sentence_1__get__(o);
}

static PyObject *__pyx_getprop_16gigaword2feature_18processed_sentence_left_context_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_18processed_sentence_16left_context_idx_1__get__(o);
}

static PyObject *__pyx_getprop_16gigaword2feature_18processed_sentence_left_context_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_18processed_sentence_17left_context_data_1__get__(o);
}

static PyObject *__pyx_getprop_16gigaword2feature_18processed_sentence_right_context_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_18processed_sentence_17right_context_idx_1__get__(o);
}

static PyObject *__pyx_getprop_16gigaword2feature_18processed_sentence_right_context_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_18processed_sentence_18right_context_data_1__get__(o);
}

static PyMethodDef __pyx_methods_16gigaword2feature_processed_sentence[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_16gigaword2feature_processed_sentence[] = {
  {(char *)"numeric", __pyx_getprop_16gigaword2feature_18processed_sentence_numeric, __pyx_setprop_16gigaword2feature_18processed_sentence_numeric, (char *)0, 0},
  {(char *)"sentence", __pyx_getprop_16gigaword2feature_18processed_sentence_sentence, 0, (char *)0, 0},
  {(char *)"left_context_idx", __pyx_getprop_16gigaword2feature_18processed_sentence_left_context_idx, 0, (char *)0, 0},
  {(char *)"left_context_data", __pyx_getprop_16gigaword2feature_18processed_sentence_left_context_data, 0, (char *)0, 0},
  {(char *)"right_context_idx", __pyx_getprop_16gigaword2feature_18processed_sentence_right_context_idx, 0, (char *)0, 0},
  {(char *)"right_context_data", __pyx_getprop_16gigaword2feature_18processed_sentence_right_context_data, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_16gigaword2feature_processed_sentence = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.processed_sentence", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature_processed_sentence), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature_processed_sentence, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Any object of this class should not be instantiated outside this module.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_16gigaword2feature_processed_sentence, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_16gigaword2feature_processed_sentence, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_16gigaword2feature_18processed_sentence_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature_processed_sentence, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_16gigaword2feature_example(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_16gigaword2feature_example *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_16gigaword2feature_example *)o);
  p->gazetteer = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature_example(PyObject *o) {
  struct __pyx_obj_16gigaword2feature_example *p = (struct __pyx_obj_16gigaword2feature_example *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->gazetteer);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_16gigaword2feature_example(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature_example *p = (struct __pyx_obj_16gigaword2feature_example *)o;
  if (p->gazetteer) {
    e = (*v)(((PyObject*)p->gazetteer), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature_example(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature_example *p = (struct __pyx_obj_16gigaword2feature_example *)o;
  tmp = ((PyObject*)p->gazetteer);
  p->gazetteer = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_16gigaword2feature_7example_sentence_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_7example_11sentence_id_1__get__(o);
}

static PyObject *__pyx_getprop_16gigaword2feature_7example_begin_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_7example_9begin_idx_1__get__(o);
}

static PyObject *__pyx_getprop_16gigaword2feature_7example_end_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_7example_7end_idx_1__get__(o);
}

static PyObject *__pyx_getprop_16gigaword2feature_7example_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_7example_5label_1__get__(o);
}

static PyObject *__pyx_getprop_16gigaword2feature_7example_gazetteer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_16gigaword2feature_7example_9gazetteer_1__get__(o);
}

static PyMethodDef __pyx_methods_16gigaword2feature_example[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_16gigaword2feature_example[] = {
  {(char *)"sentence_id", __pyx_getprop_16gigaword2feature_7example_sentence_id, 0, (char *)0, 0},
  {(char *)"begin_idx", __pyx_getprop_16gigaword2feature_7example_begin_idx, 0, (char *)0, 0},
  {(char *)"end_idx", __pyx_getprop_16gigaword2feature_7example_end_idx, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_16gigaword2feature_7example_label, 0, (char *)0, 0},
  {(char *)"gazetteer", __pyx_getprop_16gigaword2feature_7example_gazetteer, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_16gigaword2feature_example = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.example", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature_example), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature_example, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature_example, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature_example, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_16gigaword2feature_example, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_16gigaword2feature_example, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_16gigaword2feature_7example_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature_example, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *__pyx_freelist_16gigaword2feature___pyx_scope_struct__KBP2015[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct__KBP2015 = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct__KBP2015(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct__KBP2015 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct__KBP2015[--__pyx_freecount_16gigaword2feature___pyx_scope_struct__KBP2015];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *)o);
  new((void*)&(p->__pyx_v_buffer_stack)) std::vector<std::vector<int> > ();
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct__KBP2015(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_buffer_stack);
  Py_CLEAR(p->__pyx_v_engity_end);
  Py_CLEAR(p->__pyx_v_entity2cls);
  Py_CLEAR(p->__pyx_v_entity_begin);
  Py_CLEAR(p->__pyx_v_entity_end);
  Py_CLEAR(p->__pyx_v_entity_label);
  Py_CLEAR(p->__pyx_v_filename);
  Py_CLEAR(p->__pyx_v_l);
  Py_CLEAR(p->__pyx_v_label);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_sentence);
  Py_CLEAR(p->__pyx_v_text_file);
  Py_CLEAR(p->__pyx_v_tokens);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct__KBP2015 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct__KBP2015[__pyx_freecount_16gigaword2feature___pyx_scope_struct__KBP2015++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct__KBP2015(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *)o;
  if (p->__pyx_v_engity_end) {
    e = (*v)(p->__pyx_v_engity_end, a); if (e) return e;
  }
  if (p->__pyx_v_entity2cls) {
    e = (*v)(p->__pyx_v_entity2cls, a); if (e) return e;
  }
  if (p->__pyx_v_entity_begin) {
    e = (*v)(p->__pyx_v_entity_begin, a); if (e) return e;
  }
  if (p->__pyx_v_entity_end) {
    e = (*v)(p->__pyx_v_entity_end, a); if (e) return e;
  }
  if (p->__pyx_v_entity_label) {
    e = (*v)(p->__pyx_v_entity_label, a); if (e) return e;
  }
  if (p->__pyx_v_filename) {
    e = (*v)(p->__pyx_v_filename, a); if (e) return e;
  }
  if (p->__pyx_v_l) {
    e = (*v)(p->__pyx_v_l, a); if (e) return e;
  }
  if (p->__pyx_v_label) {
    e = (*v)(p->__pyx_v_label, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_sentence) {
    e = (*v)(p->__pyx_v_sentence, a); if (e) return e;
  }
  if (p->__pyx_v_text_file) {
    e = (*v)(p->__pyx_v_text_file, a); if (e) return e;
  }
  if (p->__pyx_v_tokens) {
    e = (*v)(p->__pyx_v_tokens, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct__KBP2015(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015 *)o;
  tmp = ((PyObject*)p->__pyx_v_engity_end);
  p->__pyx_v_engity_end = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_entity2cls);
  p->__pyx_v_entity2cls = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_entity_begin);
  p->__pyx_v_entity_begin = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_entity_end);
  p->__pyx_v_entity_end = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_entity_label);
  p->__pyx_v_entity_label = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_filename);
  p->__pyx_v_filename = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_l);
  p->__pyx_v_l = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_label);
  p->__pyx_v_label = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_line);
  p->__pyx_v_line = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sentence);
  p->__pyx_v_sentence = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_text_file);
  p->__pyx_v_text_file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_tokens);
  p->__pyx_v_tokens = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_2);
  p->__pyx_t_2 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_3);
  p->__pyx_t_3 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_4);
  p->__pyx_t_4 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct__KBP2015 = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct__KBP2015", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct__KBP2015), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct__KBP2015, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct__KBP2015, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct__KBP2015, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct__KBP2015, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *__pyx_freelist_16gigaword2feature___pyx_scope_struct_1_gigaword[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_1_gigaword = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_1_gigaword(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_1_gigaword > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_1_gigaword[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_1_gigaword];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_1_gigaword(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_filename);
  Py_CLEAR(p->__pyx_v_label);
  Py_CLEAR(p->__pyx_v_last_ner);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_n_discard);
  Py_CLEAR(p->__pyx_v_ner);
  Py_CLEAR(p->__pyx_v_ner2cls);
  Py_CLEAR(p->__pyx_v_ner_begin);
  Py_CLEAR(p->__pyx_v_ner_end);
  Py_CLEAR(p->__pyx_v_ner_label);
  Py_CLEAR(p->__pyx_v_number);
  Py_CLEAR(p->__pyx_v_p);
  Py_CLEAR(p->__pyx_v_sentence);
  Py_CLEAR(p->__pyx_v_slash_idx);
  Py_CLEAR(p->__pyx_v_text_file);
  Py_CLEAR(p->__pyx_v_word);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_1_gigaword < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_1_gigaword[__pyx_freecount_16gigaword2feature___pyx_scope_struct_1_gigaword++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_1_gigaword(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *)o;
  if (p->__pyx_v_filename) {
    e = (*v)(p->__pyx_v_filename, a); if (e) return e;
  }
  if (p->__pyx_v_label) {
    e = (*v)(p->__pyx_v_label, a); if (e) return e;
  }
  if (p->__pyx_v_last_ner) {
    e = (*v)(p->__pyx_v_last_ner, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_n_discard) {
    e = (*v)(p->__pyx_v_n_discard, a); if (e) return e;
  }
  if (p->__pyx_v_ner) {
    e = (*v)(p->__pyx_v_ner, a); if (e) return e;
  }
  if (p->__pyx_v_ner2cls) {
    e = (*v)(p->__pyx_v_ner2cls, a); if (e) return e;
  }
  if (p->__pyx_v_ner_begin) {
    e = (*v)(p->__pyx_v_ner_begin, a); if (e) return e;
  }
  if (p->__pyx_v_ner_end) {
    e = (*v)(p->__pyx_v_ner_end, a); if (e) return e;
  }
  if (p->__pyx_v_ner_label) {
    e = (*v)(p->__pyx_v_ner_label, a); if (e) return e;
  }
  if (p->__pyx_v_number) {
    e = (*v)(p->__pyx_v_number, a); if (e) return e;
  }
  if (p->__pyx_v_p) {
    e = (*v)(p->__pyx_v_p, a); if (e) return e;
  }
  if (p->__pyx_v_sentence) {
    e = (*v)(p->__pyx_v_sentence, a); if (e) return e;
  }
  if (p->__pyx_v_slash_idx) {
    e = (*v)(p->__pyx_v_slash_idx, a); if (e) return e;
  }
  if (p->__pyx_v_text_file) {
    e = (*v)(p->__pyx_v_text_file, a); if (e) return e;
  }
  if (p->__pyx_v_word) {
    e = (*v)(p->__pyx_v_word, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_1_gigaword(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword *)o;
  tmp = ((PyObject*)p->__pyx_v_filename);
  p->__pyx_v_filename = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_label);
  p->__pyx_v_label = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_last_ner);
  p->__pyx_v_last_ner = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_line);
  p->__pyx_v_line = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_n_discard);
  p->__pyx_v_n_discard = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner);
  p->__pyx_v_ner = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner2cls);
  p->__pyx_v_ner2cls = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner_begin);
  p->__pyx_v_ner_begin = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner_end);
  p->__pyx_v_ner_end = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner_label);
  p->__pyx_v_ner_label = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_number);
  p->__pyx_v_number = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_p);
  p->__pyx_v_p = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sentence);
  p->__pyx_v_sentence = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_slash_idx);
  p->__pyx_v_slash_idx = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_text_file);
  p->__pyx_v_text_file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_word);
  p->__pyx_v_word = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_2);
  p->__pyx_t_2 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_3);
  p->__pyx_t_3 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_4);
  p->__pyx_t_4 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_5);
  p->__pyx_t_5 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_1_gigaword = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_1_gigaword", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_1_gigaword), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_1_gigaword, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_1_gigaword, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_1_gigaword, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_1_gigaword, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *__pyx_freelist_16gigaword2feature___pyx_scope_struct_2_gazetteer[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_2_gazetteer = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_2_gazetteer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_2_gazetteer > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_2_gazetteer[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_2_gazetteer];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_2_gazetteer(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_ner2cls);
  Py_CLEAR(p->__pyx_v_result);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_2_gazetteer < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_2_gazetteer[__pyx_freecount_16gigaword2feature___pyx_scope_struct_2_gazetteer++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_2_gazetteer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *)o;
  if (p->__pyx_v_ner2cls) {
    e = (*v)(p->__pyx_v_ner2cls, a); if (e) return e;
  }
  if (p->__pyx_v_result) {
    e = (*v)(p->__pyx_v_result, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_2_gazetteer(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *)o;
  tmp = ((PyObject*)p->__pyx_v_ner2cls);
  p->__pyx_v_ner2cls = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_result);
  p->__pyx_v_result = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_2_gazetteer = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_2_gazetteer", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_2_gazetteer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_2_gazetteer, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_2_gazetteer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_2_gazetteer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *__pyx_freelist_16gigaword2feature___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_3_genexpr[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_cls);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_3_genexpr[__pyx_freecount_16gigaword2feature___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_cls) {
    e = (*v)(p->__pyx_v_cls, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_3_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_2_gazetteer *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_cls);
  p->__pyx_v_cls = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_3_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *__pyx_freelist_16gigaword2feature___pyx_scope_struct_4_CoNLL2003[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_4_CoNLL2003(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_4_CoNLL2003[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_4_CoNLL2003];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_4_CoNLL2003(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_filename);
  Py_CLEAR(p->__pyx_v_label);
  Py_CLEAR(p->__pyx_v_last_ner);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_ner);
  Py_CLEAR(p->__pyx_v_ner2cls);
  Py_CLEAR(p->__pyx_v_ner_begin);
  Py_CLEAR(p->__pyx_v_ner_end);
  Py_CLEAR(p->__pyx_v_ner_label);
  Py_CLEAR(p->__pyx_v_sentence);
  Py_CLEAR(p->__pyx_v_text_file);
  Py_CLEAR(p->__pyx_v_tokens);
  Py_CLEAR(p->__pyx_v_word);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_4_CoNLL2003[__pyx_freecount_16gigaword2feature___pyx_scope_struct_4_CoNLL2003++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_4_CoNLL2003(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *)o;
  if (p->__pyx_v_filename) {
    e = (*v)(p->__pyx_v_filename, a); if (e) return e;
  }
  if (p->__pyx_v_label) {
    e = (*v)(p->__pyx_v_label, a); if (e) return e;
  }
  if (p->__pyx_v_last_ner) {
    e = (*v)(p->__pyx_v_last_ner, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_ner) {
    e = (*v)(p->__pyx_v_ner, a); if (e) return e;
  }
  if (p->__pyx_v_ner2cls) {
    e = (*v)(p->__pyx_v_ner2cls, a); if (e) return e;
  }
  if (p->__pyx_v_ner_begin) {
    e = (*v)(p->__pyx_v_ner_begin, a); if (e) return e;
  }
  if (p->__pyx_v_ner_end) {
    e = (*v)(p->__pyx_v_ner_end, a); if (e) return e;
  }
  if (p->__pyx_v_ner_label) {
    e = (*v)(p->__pyx_v_ner_label, a); if (e) return e;
  }
  if (p->__pyx_v_sentence) {
    e = (*v)(p->__pyx_v_sentence, a); if (e) return e;
  }
  if (p->__pyx_v_text_file) {
    e = (*v)(p->__pyx_v_text_file, a); if (e) return e;
  }
  if (p->__pyx_v_tokens) {
    e = (*v)(p->__pyx_v_tokens, a); if (e) return e;
  }
  if (p->__pyx_v_word) {
    e = (*v)(p->__pyx_v_word, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_4_CoNLL2003(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 *)o;
  tmp = ((PyObject*)p->__pyx_v_filename);
  p->__pyx_v_filename = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_label);
  p->__pyx_v_label = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_last_ner);
  p->__pyx_v_last_ner = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_line);
  p->__pyx_v_line = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner);
  p->__pyx_v_ner = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner2cls);
  p->__pyx_v_ner2cls = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner_begin);
  p->__pyx_v_ner_begin = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner_end);
  p->__pyx_v_ner_end = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner_label);
  p->__pyx_v_ner_label = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sentence);
  p->__pyx_v_sentence = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_text_file);
  p->__pyx_v_text_file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_tokens);
  p->__pyx_v_tokens = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_word);
  p->__pyx_v_word = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_2);
  p->__pyx_t_2 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_3);
  p->__pyx_t_3 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_4);
  p->__pyx_t_4 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_5);
  p->__pyx_t_5 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_4_CoNLL2003", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_4_CoNLL2003), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_4_CoNLL2003, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_4_CoNLL2003, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_4_CoNLL2003, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_4_CoNLL2003, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *__pyx_freelist_16gigaword2feature___pyx_scope_struct_5_sentence2indices[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_5_sentence2indices = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_5_sentence2indices(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_5_sentence2indices > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_5_sentence2indices[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_5_sentence2indices];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_5_sentence2indices(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_w);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_5_sentence2indices < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_5_sentence2indices[__pyx_freecount_16gigaword2feature___pyx_scope_struct_5_sentence2indices++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_5_sentence2indices(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_v_w) {
    e = (*v)(p->__pyx_v_w, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_5_sentence2indices(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_w);
  p->__pyx_v_w = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_5_sentence2indices = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_5_sentence2indices", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_5_sentence2indices, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_5_sentence2indices, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_5_sentence2indices, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_5_sentence2indices, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *__pyx_freelist_16gigaword2feature___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_6_genexpr[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_c);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_6_genexpr[__pyx_freecount_16gigaword2feature___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_c) {
    e = (*v)(p->__pyx_v_c, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_6_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_5_sentence2indices *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_c);
  p->__pyx_v_c = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_6_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *__pyx_freelist_16gigaword2feature___pyx_scope_struct_7_sentence2indices[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_7_sentence2indices = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_7_sentence2indices(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_7_sentence2indices > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_7_sentence2indices[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_7_sentence2indices];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_7_sentence2indices(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_7_sentence2indices < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_7_sentence2indices[__pyx_freecount_16gigaword2feature___pyx_scope_struct_7_sentence2indices++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_7_sentence2indices(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_7_sentence2indices(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_7_sentence2indices = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_7_sentence2indices", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_7_sentence2indices), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_7_sentence2indices, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_7_sentence2indices, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_7_sentence2indices, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_7_sentence2indices, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *__pyx_freelist_16gigaword2feature___pyx_scope_struct_8___init__[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_8___init__ = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_8___init__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_8___init__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_8___init__[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_8___init__];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_8___init__(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_w);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_8___init__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_8___init__[__pyx_freecount_16gigaword2feature___pyx_scope_struct_8___init__++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_8___init__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *)o;
  if (p->__pyx_v_w) {
    e = (*v)(p->__pyx_v_w, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_8___init__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *)o;
  tmp = ((PyObject*)p->__pyx_v_w);
  p->__pyx_v_w = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_8___init__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_8___init__", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_8___init__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_8___init__, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_8___init__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_8___init__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *__pyx_freelist_16gigaword2feature___pyx_scope_struct_9_genexpr[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_9_genexpr = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_9_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_9_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_9_genexpr[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_9_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_9_genexpr(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_c);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_9_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_9_genexpr[__pyx_freecount_16gigaword2feature___pyx_scope_struct_9_genexpr++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_9_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_c) {
    e = (*v)(p->__pyx_v_c, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_9_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_8___init__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_c);
  p->__pyx_v_c = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_9_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_9_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_9_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_9_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_9_genexpr, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_9_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_9_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *__pyx_freelist_16gigaword2feature___pyx_scope_struct_10___init__[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_10___init__ = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_10___init__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_10___init__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_10___init__[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_10___init__];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_10___init__(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_sentence);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_10___init__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_10___init__[__pyx_freecount_16gigaword2feature___pyx_scope_struct_10___init__++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_10___init__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *)o;
  if (p->__pyx_v_sentence) {
    e = (*v)(p->__pyx_v_sentence, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_10___init__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *)o;
  tmp = ((PyObject*)p->__pyx_v_sentence);
  p->__pyx_v_sentence = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_10___init__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_10___init__", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_10___init__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_10___init__, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_10___init__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_10___init__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *__pyx_freelist_16gigaword2feature___pyx_scope_struct_11_genexpr[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_11_genexpr = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_11_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_11_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_11_genexpr[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_11_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_11_genexpr(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_w);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_11_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_11_genexpr[__pyx_freecount_16gigaword2feature___pyx_scope_struct_11_genexpr++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_11_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_w) {
    e = (*v)(p->__pyx_v_w, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_11_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_10___init__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_w);
  p->__pyx_v_w = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_11_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_11_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_11_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_11_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_11_genexpr, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_11_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_11_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *__pyx_freelist_16gigaword2feature___pyx_scope_struct_12_mini_batch[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_12_mini_batch = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_12_mini_batch(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_12_mini_batch > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_12_mini_batch[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_12_mini_batch];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *)o);
  new((void*)&(p->__pyx_v_bow1)) std::vector<int> ();
  new((void*)&(p->__pyx_v_bow2)) std::vector<int> ();
  new((void*)&(p->__pyx_v_conv_buff)) std::vector<int> ();
  new((void*)&(p->__pyx_v_conv_idx)) std::vector<std::vector<int> > ();
  new((void*)&(p->__pyx_v_l1_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_l1_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_l2_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_l2_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_l3_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_l3_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_l4_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_l4_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_label)) std::vector<int> ();
  new((void*)&(p->__pyx_v_lbc_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_lbc_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_phrase)) std::string();
  new((void*)&(p->__pyx_v_r1_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_r1_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_r2_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_r2_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_r3_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_r3_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_r4_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_r4_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_rbc_indices)) std::vector<int> ();
  new((void*)&(p->__pyx_v_rbc_values)) std::vector<float> ();
  new((void*)&(p->__pyx_v_reversed_phrase)) std::string();
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_12_mini_batch(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_bow1);
  __Pyx_call_destructor(p->__pyx_v_bow2);
  __Pyx_call_destructor(p->__pyx_v_conv_buff);
  __Pyx_call_destructor(p->__pyx_v_conv_idx);
  __Pyx_call_destructor(p->__pyx_v_l1_indices);
  __Pyx_call_destructor(p->__pyx_v_l1_values);
  __Pyx_call_destructor(p->__pyx_v_l2_indices);
  __Pyx_call_destructor(p->__pyx_v_l2_values);
  __Pyx_call_destructor(p->__pyx_v_l3_indices);
  __Pyx_call_destructor(p->__pyx_v_l3_values);
  __Pyx_call_destructor(p->__pyx_v_l4_indices);
  __Pyx_call_destructor(p->__pyx_v_l4_values);
  __Pyx_call_destructor(p->__pyx_v_label);
  __Pyx_call_destructor(p->__pyx_v_lbc_indices);
  __Pyx_call_destructor(p->__pyx_v_lbc_values);
  __Pyx_call_destructor(p->__pyx_v_phrase);
  __Pyx_call_destructor(p->__pyx_v_r1_indices);
  __Pyx_call_destructor(p->__pyx_v_r1_values);
  __Pyx_call_destructor(p->__pyx_v_r2_indices);
  __Pyx_call_destructor(p->__pyx_v_r2_values);
  __Pyx_call_destructor(p->__pyx_v_r3_indices);
  __Pyx_call_destructor(p->__pyx_v_r3_values);
  __Pyx_call_destructor(p->__pyx_v_r4_indices);
  __Pyx_call_destructor(p->__pyx_v_r4_values);
  __Pyx_call_destructor(p->__pyx_v_rbc_indices);
  __Pyx_call_destructor(p->__pyx_v_rbc_values);
  __Pyx_call_destructor(p->__pyx_v_reversed_phrase);
  Py_CLEAR(p->__pyx_v_candidate);
  Py_CLEAR(p->__pyx_v_dense_buffer);
  Py_CLEAR(p->__pyx_v_disjoint);
  Py_CLEAR(p->__pyx_v_left_c);
  Py_CLEAR(p->__pyx_v_left_init);
  Py_CLEAR(p->__pyx_v_next_example);
  Py_CLEAR(p->__pyx_v_overlap);
  Py_CLEAR(p->__pyx_v_right_c);
  Py_CLEAR(p->__pyx_v_right_init);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_sentence);
  Py_CLEAR(p->__pyx_v_w);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_12_mini_batch < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_12_mini_batch[__pyx_freecount_16gigaword2feature___pyx_scope_struct_12_mini_batch++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_12_mini_batch(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *)o;
  if (p->__pyx_v_candidate) {
    e = (*v)(p->__pyx_v_candidate, a); if (e) return e;
  }
  if (p->__pyx_v_dense_buffer) {
    e = (*v)(p->__pyx_v_dense_buffer, a); if (e) return e;
  }
  if (p->__pyx_v_disjoint) {
    e = (*v)(p->__pyx_v_disjoint, a); if (e) return e;
  }
  if (p->__pyx_v_left_c) {
    e = (*v)(p->__pyx_v_left_c, a); if (e) return e;
  }
  if (p->__pyx_v_left_init) {
    e = (*v)(p->__pyx_v_left_init, a); if (e) return e;
  }
  if (p->__pyx_v_next_example) {
    e = (*v)(((PyObject*)p->__pyx_v_next_example), a); if (e) return e;
  }
  if (p->__pyx_v_overlap) {
    e = (*v)(p->__pyx_v_overlap, a); if (e) return e;
  }
  if (p->__pyx_v_right_c) {
    e = (*v)(p->__pyx_v_right_c, a); if (e) return e;
  }
  if (p->__pyx_v_right_init) {
    e = (*v)(p->__pyx_v_right_init, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_v_sentence) {
    e = (*v)(((PyObject*)p->__pyx_v_sentence), a); if (e) return e;
  }
  if (p->__pyx_v_w) {
    e = (*v)(p->__pyx_v_w, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_12_mini_batch(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch *)o;
  tmp = ((PyObject*)p->__pyx_v_candidate);
  p->__pyx_v_candidate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_dense_buffer);
  p->__pyx_v_dense_buffer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_disjoint);
  p->__pyx_v_disjoint = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_left_c);
  p->__pyx_v_left_c = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_left_init);
  p->__pyx_v_left_init = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_next_example);
  p->__pyx_v_next_example = ((struct __pyx_obj_16gigaword2feature_example *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_overlap);
  p->__pyx_v_overlap = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_right_c);
  p->__pyx_v_right_c = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_right_init);
  p->__pyx_v_right_init = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sentence);
  p->__pyx_v_sentence = ((struct __pyx_obj_16gigaword2feature_processed_sentence *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_w);
  p->__pyx_v_w = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_12_mini_batch = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_12_mini_batch", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_12_mini_batch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_12_mini_batch, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_12_mini_batch, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_12_mini_batch, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_12_mini_batch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *__pyx_freelist_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_batch_buffer);
  Py_CLEAR(p->__pyx_v_batch_generator);
  Py_CLEAR(p->__pyx_v_next_batch);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_t);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread[__pyx_freecount_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *)o;
  if (p->__pyx_v_batch_buffer) {
    e = (*v)(p->__pyx_v_batch_buffer, a); if (e) return e;
  }
  if (p->__pyx_v_batch_generator) {
    e = (*v)(p->__pyx_v_batch_generator, a); if (e) return e;
  }
  if (p->__pyx_v_next_batch) {
    e = (*v)(p->__pyx_v_next_batch, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_v_t) {
    e = (*v)(p->__pyx_v_t, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread *)o;
  tmp = ((PyObject*)p->__pyx_v_batch_buffer);
  p->__pyx_v_batch_buffer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_batch_generator);
  p->__pyx_v_batch_generator = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_next_batch);
  p->__pyx_v_next_batch = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_t);
  p->__pyx_v_t = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_13_mini_batch_multi_thread", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *__pyx_freelist_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_next_batch);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread[__pyx_freecount_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *)o;
  if (p->__pyx_v_next_batch) {
    e = (*v)(p->__pyx_v_next_batch, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread *)o;
  tmp = ((PyObject*)p->__pyx_v_next_batch);
  p->__pyx_v_next_batch = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_14_infinite_mini_batch_multi_thread", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *__pyx_freelist_16gigaword2feature___pyx_scope_struct_15_SampleGenerator[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_15_SampleGenerator = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_15_SampleGenerator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_15_SampleGenerator > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_15_SampleGenerator[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_15_SampleGenerator];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_15_SampleGenerator(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_beginOfNer);
  Py_CLEAR(p->__pyx_v_corpus);
  Py_CLEAR(p->__pyx_v_endOfNer);
  Py_CLEAR(p->__pyx_v_filename);
  Py_CLEAR(p->__pyx_v_lastNer);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_ner);
  Py_CLEAR(p->__pyx_v_ner2idx);
  Py_CLEAR(p->__pyx_v_nerCls);
  Py_CLEAR(p->__pyx_v_sentence);
  Py_CLEAR(p->__pyx_v_tokens);
  Py_CLEAR(p->__pyx_v_word);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_15_SampleGenerator < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_15_SampleGenerator[__pyx_freecount_16gigaword2feature___pyx_scope_struct_15_SampleGenerator++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_15_SampleGenerator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *)o;
  if (p->__pyx_v_beginOfNer) {
    e = (*v)(p->__pyx_v_beginOfNer, a); if (e) return e;
  }
  if (p->__pyx_v_corpus) {
    e = (*v)(p->__pyx_v_corpus, a); if (e) return e;
  }
  if (p->__pyx_v_endOfNer) {
    e = (*v)(p->__pyx_v_endOfNer, a); if (e) return e;
  }
  if (p->__pyx_v_filename) {
    e = (*v)(p->__pyx_v_filename, a); if (e) return e;
  }
  if (p->__pyx_v_lastNer) {
    e = (*v)(p->__pyx_v_lastNer, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_ner) {
    e = (*v)(p->__pyx_v_ner, a); if (e) return e;
  }
  if (p->__pyx_v_ner2idx) {
    e = (*v)(p->__pyx_v_ner2idx, a); if (e) return e;
  }
  if (p->__pyx_v_nerCls) {
    e = (*v)(p->__pyx_v_nerCls, a); if (e) return e;
  }
  if (p->__pyx_v_sentence) {
    e = (*v)(p->__pyx_v_sentence, a); if (e) return e;
  }
  if (p->__pyx_v_tokens) {
    e = (*v)(p->__pyx_v_tokens, a); if (e) return e;
  }
  if (p->__pyx_v_word) {
    e = (*v)(p->__pyx_v_word, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_15_SampleGenerator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator *)o;
  tmp = ((PyObject*)p->__pyx_v_beginOfNer);
  p->__pyx_v_beginOfNer = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_corpus);
  p->__pyx_v_corpus = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_endOfNer);
  p->__pyx_v_endOfNer = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_filename);
  p->__pyx_v_filename = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_lastNer);
  p->__pyx_v_lastNer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_line);
  p->__pyx_v_line = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner);
  p->__pyx_v_ner = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner2idx);
  p->__pyx_v_ner2idx = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_nerCls);
  p->__pyx_v_nerCls = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sentence);
  p->__pyx_v_sentence = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_tokens);
  p->__pyx_v_tokens = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_word);
  p->__pyx_v_word = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_15_SampleGenerator = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_15_SampleGenerator", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_15_SampleGenerator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_15_SampleGenerator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_15_SampleGenerator, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_15_SampleGenerator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_15_SampleGenerator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *__pyx_freelist_16gigaword2feature___pyx_scope_struct_16_PredictionParser[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_16_PredictionParser = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_16_PredictionParser(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_16_PredictionParser > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_16_PredictionParser[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_16_PredictionParser];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_16_PredictionParser(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_actual);
  Py_CLEAR(p->__pyx_v_all_prob);
  Py_CLEAR(p->__pyx_v_boe);
  Py_CLEAR(p->__pyx_v_cls);
  Py_CLEAR(p->__pyx_v_cnt);
  Py_CLEAR(p->__pyx_v_eoe);
  Py_CLEAR(p->__pyx_v_estimate);
  Py_CLEAR(p->__pyx_v_fp);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_v_idx2ner);
  Py_CLEAR(p->__pyx_v_j);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_lines);
  Py_CLEAR(p->__pyx_v_n_label_type);
  Py_CLEAR(p->__pyx_v_ner_max_length);
  Py_CLEAR(p->__pyx_v_predicted);
  Py_CLEAR(p->__pyx_v_predicted_label);
  Py_CLEAR(p->__pyx_v_probability);
  Py_CLEAR(p->__pyx_v_reinterpret_threshold);
  Py_CLEAR(p->__pyx_v_result);
  Py_CLEAR(p->__pyx_v_s);
  Py_CLEAR(p->__pyx_v_sample_generator);
  Py_CLEAR(p->__pyx_v_sg);
  Py_CLEAR(p->__pyx_v_table);
  Py_CLEAR(p->__pyx_v_tokens);
  Py_CLEAR(p->__pyx_v_x);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_16_PredictionParser < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_16_PredictionParser[__pyx_freecount_16gigaword2feature___pyx_scope_struct_16_PredictionParser++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_16_PredictionParser(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *)o;
  if (p->__pyx_v_actual) {
    e = (*v)(p->__pyx_v_actual, a); if (e) return e;
  }
  if (p->__pyx_v_all_prob) {
    e = (*v)(p->__pyx_v_all_prob, a); if (e) return e;
  }
  if (p->__pyx_v_boe) {
    e = (*v)(p->__pyx_v_boe, a); if (e) return e;
  }
  if (p->__pyx_v_cls) {
    e = (*v)(p->__pyx_v_cls, a); if (e) return e;
  }
  if (p->__pyx_v_cnt) {
    e = (*v)(p->__pyx_v_cnt, a); if (e) return e;
  }
  if (p->__pyx_v_eoe) {
    e = (*v)(p->__pyx_v_eoe, a); if (e) return e;
  }
  if (p->__pyx_v_estimate) {
    e = (*v)(p->__pyx_v_estimate, a); if (e) return e;
  }
  if (p->__pyx_v_fp) {
    e = (*v)(p->__pyx_v_fp, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_v_idx2ner) {
    e = (*v)(p->__pyx_v_idx2ner, a); if (e) return e;
  }
  if (p->__pyx_v_j) {
    e = (*v)(p->__pyx_v_j, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_lines) {
    e = (*v)(p->__pyx_v_lines, a); if (e) return e;
  }
  if (p->__pyx_v_n_label_type) {
    e = (*v)(p->__pyx_v_n_label_type, a); if (e) return e;
  }
  if (p->__pyx_v_ner_max_length) {
    e = (*v)(p->__pyx_v_ner_max_length, a); if (e) return e;
  }
  if (p->__pyx_v_predicted) {
    e = (*v)(p->__pyx_v_predicted, a); if (e) return e;
  }
  if (p->__pyx_v_predicted_label) {
    e = (*v)(p->__pyx_v_predicted_label, a); if (e) return e;
  }
  if (p->__pyx_v_probability) {
    e = (*v)(p->__pyx_v_probability, a); if (e) return e;
  }
  if (p->__pyx_v_reinterpret_threshold) {
    e = (*v)(p->__pyx_v_reinterpret_threshold, a); if (e) return e;
  }
  if (p->__pyx_v_result) {
    e = (*v)(p->__pyx_v_result, a); if (e) return e;
  }
  if (p->__pyx_v_s) {
    e = (*v)(p->__pyx_v_s, a); if (e) return e;
  }
  if (p->__pyx_v_sample_generator) {
    e = (*v)(p->__pyx_v_sample_generator, a); if (e) return e;
  }
  if (p->__pyx_v_sg) {
    e = (*v)(p->__pyx_v_sg, a); if (e) return e;
  }
  if (p->__pyx_v_table) {
    e = (*v)(p->__pyx_v_table, a); if (e) return e;
  }
  if (p->__pyx_v_tokens) {
    e = (*v)(p->__pyx_v_tokens, a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_16_PredictionParser(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser *)o;
  tmp = ((PyObject*)p->__pyx_v_actual);
  p->__pyx_v_actual = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_all_prob);
  p->__pyx_v_all_prob = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_boe);
  p->__pyx_v_boe = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_cls);
  p->__pyx_v_cls = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_cnt);
  p->__pyx_v_cnt = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_eoe);
  p->__pyx_v_eoe = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_estimate);
  p->__pyx_v_estimate = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_fp);
  p->__pyx_v_fp = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_idx2ner);
  p->__pyx_v_idx2ner = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_j);
  p->__pyx_v_j = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_line);
  p->__pyx_v_line = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_lines);
  p->__pyx_v_lines = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_n_label_type);
  p->__pyx_v_n_label_type = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_ner_max_length);
  p->__pyx_v_ner_max_length = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_predicted);
  p->__pyx_v_predicted = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_predicted_label);
  p->__pyx_v_predicted_label = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_probability);
  p->__pyx_v_probability = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_reinterpret_threshold);
  p->__pyx_v_reinterpret_threshold = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_result);
  p->__pyx_v_result = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_s);
  p->__pyx_v_s = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sample_generator);
  p->__pyx_v_sample_generator = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sg);
  p->__pyx_v_sg = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_table);
  p->__pyx_v_table = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_tokens);
  p->__pyx_v_tokens = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_x);
  p->__pyx_v_x = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_16_PredictionParser = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_16_PredictionParser", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_16_PredictionParser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_16_PredictionParser, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_16_PredictionParser, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_16_PredictionParser, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_16_PredictionParser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *__pyx_freelist_16gigaword2feature___pyx_scope_struct_17_SentenceIterator[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_17_SentenceIterator = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_17_SentenceIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_17_SentenceIterator > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_17_SentenceIterator[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_17_SentenceIterator];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_17_SentenceIterator(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_corpus);
  Py_CLEAR(p->__pyx_v_filename);
  Py_CLEAR(p->__pyx_v_line);
  Py_CLEAR(p->__pyx_v_sentence);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_17_SentenceIterator < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_17_SentenceIterator[__pyx_freecount_16gigaword2feature___pyx_scope_struct_17_SentenceIterator++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_17_SentenceIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *)o;
  if (p->__pyx_v_corpus) {
    e = (*v)(p->__pyx_v_corpus, a); if (e) return e;
  }
  if (p->__pyx_v_filename) {
    e = (*v)(p->__pyx_v_filename, a); if (e) return e;
  }
  if (p->__pyx_v_line) {
    e = (*v)(p->__pyx_v_line, a); if (e) return e;
  }
  if (p->__pyx_v_sentence) {
    e = (*v)(p->__pyx_v_sentence, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_17_SentenceIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator *)o;
  tmp = ((PyObject*)p->__pyx_v_corpus);
  p->__pyx_v_corpus = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_filename);
  p->__pyx_v_filename = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_line);
  p->__pyx_v_line = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sentence);
  p->__pyx_v_sentence = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_2);
  p->__pyx_t_2 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_3);
  p->__pyx_t_3 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_4);
  p->__pyx_t_4 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_17_SentenceIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_17_SentenceIterator", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_17_SentenceIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_17_SentenceIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_17_SentenceIterator, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_17_SentenceIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_17_SentenceIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *__pyx_freelist_16gigaword2feature___pyx_scope_struct_18___decode_algo_1[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_18___decode_algo_1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_18___decode_algo_1[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_18___decode_algo_1];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_18___decode_algo_1(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_table);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_18___decode_algo_1[__pyx_freecount_16gigaword2feature___pyx_scope_struct_18___decode_algo_1++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_18___decode_algo_1(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *)o;
  if (p->__pyx_v_table) {
    e = (*v)(p->__pyx_v_table, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_18___decode_algo_1(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 *)o;
  tmp = ((PyObject*)p->__pyx_v_table);
  p->__pyx_v_table = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_18___decode_algo_1", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_18___decode_algo_1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_18___decode_algo_1, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_18___decode_algo_1, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_18___decode_algo_1, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_18___decode_algo_1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *__pyx_freelist_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_v_boe);
  Py_CLEAR(p->__pyx_v_e);
  Py_CLEAR(p->__pyx_v_eoe);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_v_loe);
  Py_CLEAR(p->__pyx_v_mode);
  Py_CLEAR(p->__pyx_v_sent);
  Py_CLEAR(p->__pyx_v_sentence);
  Py_CLEAR(p->__pyx_v_sentence_file);
  Py_CLEAR(p->__pyx_v_sentences);
  Py_CLEAR(p->__pyx_v_start);
  Py_CLEAR(p->__pyx_v_step);
  Py_CLEAR(p->__pyx_v_stop);
  Py_CLEAR(p->__pyx_v_str2idx);
  Py_CLEAR(p->__pyx_v_tag);
  Py_CLEAR(p->__pyx_v_tag_file);
  Py_CLEAR(p->__pyx_v_tags);
  Py_CLEAR(p->__pyx_v_tokens);
  Py_CLEAR(p->__pyx_v_w);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  Py_CLEAR(p->__pyx_t_7);
  Py_CLEAR(p->__pyx_t_8);
  Py_CLEAR(p->__pyx_t_9);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser[__pyx_freecount_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *)o;
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_v_boe) {
    e = (*v)(p->__pyx_v_boe, a); if (e) return e;
  }
  if (p->__pyx_v_e) {
    e = (*v)(p->__pyx_v_e, a); if (e) return e;
  }
  if (p->__pyx_v_eoe) {
    e = (*v)(p->__pyx_v_eoe, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_v_loe) {
    e = (*v)(p->__pyx_v_loe, a); if (e) return e;
  }
  if (p->__pyx_v_mode) {
    e = (*v)(p->__pyx_v_mode, a); if (e) return e;
  }
  if (p->__pyx_v_sent) {
    e = (*v)(p->__pyx_v_sent, a); if (e) return e;
  }
  if (p->__pyx_v_sentence) {
    e = (*v)(p->__pyx_v_sentence, a); if (e) return e;
  }
  if (p->__pyx_v_sentence_file) {
    e = (*v)(p->__pyx_v_sentence_file, a); if (e) return e;
  }
  if (p->__pyx_v_sentences) {
    e = (*v)(p->__pyx_v_sentences, a); if (e) return e;
  }
  if (p->__pyx_v_start) {
    e = (*v)(p->__pyx_v_start, a); if (e) return e;
  }
  if (p->__pyx_v_step) {
    e = (*v)(p->__pyx_v_step, a); if (e) return e;
  }
  if (p->__pyx_v_stop) {
    e = (*v)(p->__pyx_v_stop, a); if (e) return e;
  }
  if (p->__pyx_v_str2idx) {
    e = (*v)(p->__pyx_v_str2idx, a); if (e) return e;
  }
  if (p->__pyx_v_tag) {
    e = (*v)(p->__pyx_v_tag, a); if (e) return e;
  }
  if (p->__pyx_v_tag_file) {
    e = (*v)(p->__pyx_v_tag_file, a); if (e) return e;
  }
  if (p->__pyx_v_tags) {
    e = (*v)(p->__pyx_v_tags, a); if (e) return e;
  }
  if (p->__pyx_v_tokens) {
    e = (*v)(p->__pyx_v_tokens, a); if (e) return e;
  }
  if (p->__pyx_v_w) {
    e = (*v)(p->__pyx_v_w, a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  if (p->__pyx_t_7) {
    e = (*v)(p->__pyx_t_7, a); if (e) return e;
  }
  if (p->__pyx_t_8) {
    e = (*v)(p->__pyx_t_8, a); if (e) return e;
  }
  if (p->__pyx_t_9) {
    e = (*v)(p->__pyx_t_9, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *)o;
  tmp = ((PyObject*)p->__pyx_v_b);
  p->__pyx_v_b = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_boe);
  p->__pyx_v_boe = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_e);
  p->__pyx_v_e = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_eoe);
  p->__pyx_v_eoe = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_genexpr);
  p->__pyx_v_genexpr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_loe);
  p->__pyx_v_loe = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_mode);
  p->__pyx_v_mode = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sent);
  p->__pyx_v_sent = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sentence);
  p->__pyx_v_sentence = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sentence_file);
  p->__pyx_v_sentence_file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_sentences);
  p->__pyx_v_sentences = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_start);
  p->__pyx_v_start = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_step);
  p->__pyx_v_step = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_stop);
  p->__pyx_v_stop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_str2idx);
  p->__pyx_v_str2idx = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_tag);
  p->__pyx_v_tag = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_tag_file);
  p->__pyx_v_tag_file = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_tags);
  p->__pyx_v_tags = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_tokens);
  p->__pyx_v_tokens = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_w);
  p->__pyx_v_w = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_x);
  p->__pyx_v_x = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_1);
  p->__pyx_t_1 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_2);
  p->__pyx_t_2 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_3);
  p->__pyx_t_3 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_4);
  p->__pyx_t_4 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_5);
  p->__pyx_t_5 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_6);
  p->__pyx_t_6 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_7);
  p->__pyx_t_7 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_8);
  p->__pyx_t_8 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_9);
  p->__pyx_t_9 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_19_distant_supervision_parser", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *__pyx_freelist_16gigaword2feature___pyx_scope_struct_20_genexpr[8];
static int __pyx_freecount_16gigaword2feature___pyx_scope_struct_20_genexpr = 0;

static PyObject *__pyx_tp_new_16gigaword2feature___pyx_scope_struct_20_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_16gigaword2feature___pyx_scope_struct_20_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr)))) {
    o = (PyObject*)__pyx_freelist_16gigaword2feature___pyx_scope_struct_20_genexpr[--__pyx_freecount_16gigaword2feature___pyx_scope_struct_20_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_20_genexpr(PyObject *o) {
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_c);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_16gigaword2feature___pyx_scope_struct_20_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr)))) {
    __pyx_freelist_16gigaword2feature___pyx_scope_struct_20_genexpr[__pyx_freecount_16gigaword2feature___pyx_scope_struct_20_genexpr++] = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_20_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_c) {
    e = (*v)(p->__pyx_v_c, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_20_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *p = (struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_c);
  p->__pyx_v_c = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_16gigaword2feature___pyx_scope_struct_20_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gigaword2feature.__pyx_scope_struct_20_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_16gigaword2feature___pyx_scope_struct_20_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_16gigaword2feature___pyx_scope_struct_20_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_16gigaword2feature___pyx_scope_struct_20_genexpr, /*tp_traverse*/
  __pyx_tp_clear_16gigaword2feature___pyx_scope_struct_20_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_16gigaword2feature___pyx_scope_struct_20_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "gigaword2feature",
    __pyx_k_Author_Mingbin_Xu_mingbin_xu_gm, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_b_01_d_2_0_3_0_5_d_0_5_d, __pyx_k_01_d_2_0_3_0_5_d_0_5_d, sizeof(__pyx_k_01_d_2_0_3_0_5_d_0_5_d), 0, 0, 0, 0},
  {&__pyx_kp_b_0_9, __pyx_k_0_9, sizeof(__pyx_k_0_9), 0, 0, 0, 0},
  {&__pyx_kp_s_10s, __pyx_k_10s, sizeof(__pyx_k_10s), 0, 0, 1, 0},
  {&__pyx_kp_s_12s_precision_2f_recall_2f_FB1, __pyx_k_12s_precision_2f_recall_2f_FB1, sizeof(__pyx_k_12s_precision_2f_recall_2f_FB1), 0, 0, 1, 0},
  {&__pyx_kp_s_12s_precision_2f_recall_2f_FB1_2, __pyx_k_12s_precision_2f_recall_2f_FB1_2, sizeof(__pyx_k_12s_precision_2f_recall_2f_FB1_2), 0, 0, 1, 0},
  {&__pyx_kp_b_1_9_d_0_2_d_3_1_9_d_0_d, __pyx_k_1_9_d_0_2_d_3_1_9_d_0_d, sizeof(__pyx_k_1_9_d_0_2_d_3_1_9_d_0_d), 0, 0, 0, 0},
  {&__pyx_kp_b_1_s_s_s_2_9_1_02_9_2_9_02_8_1_2, __pyx_k_1_s_s_s_2_9_1_02_9_2_9_02_8_1_2, sizeof(__pyx_k_1_s_s_s_2_9_1_02_9_2_9_02_8_1_2), 0, 0, 0, 0},
  {&__pyx_kp_b_31_0_13578_1_02_Jan_Mar_May_Jul, __pyx_k_31_0_13578_1_02_Jan_Mar_May_Jul, sizeof(__pyx_k_31_0_13578_1_02_Jan_Mar_May_Jul), 0, 0, 0, 0},
  {&__pyx_kp_s_A_Za_z_0_9, __pyx_k_A_Za_z_0_9, sizeof(__pyx_k_A_Za_z_0_9), 0, 0, 1, 0},
  {&__pyx_kp_s_According_to_Liu_TTL_NAM_are_all, __pyx_k_According_to_Liu_TTL_NAM_are_all, sizeof(__pyx_k_According_to_Liu_TTL_NAM_are_all), 0, 0, 1, 0},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_kp_s_B_LOC, __pyx_k_B_LOC, sizeof(__pyx_k_B_LOC), 0, 0, 1, 0},
  {&__pyx_kp_s_B_MISC, __pyx_k_B_MISC, sizeof(__pyx_k_B_MISC), 0, 0, 1, 0},
  {&__pyx_kp_s_B_ORG, __pyx_k_B_ORG, sizeof(__pyx_k_B_ORG), 0, 0, 1, 0},
  {&__pyx_kp_s_B_PER, __pyx_k_B_PER, sizeof(__pyx_k_B_PER), 0, 0, 1, 0},
  {&__pyx_n_s_CONLL2003, __pyx_k_CONLL2003, sizeof(__pyx_k_CONLL2003), 0, 0, 1, 1},
  {&__pyx_kp_s_Chinese_is_modeled_at_character, __pyx_k_Chinese_is_modeled_at_character, sizeof(__pyx_k_Chinese_is_modeled_at_character), 0, 0, 1, 0},
  {&__pyx_n_s_CoNLL2003, __pyx_k_CoNLL2003, sizeof(__pyx_k_CoNLL2003), 0, 0, 1, 1},
  {&__pyx_kp_s_FAC, __pyx_k_FAC, sizeof(__pyx_k_FAC), 0, 0, 1, 0},
  {&__pyx_n_s_FAC_NAM, __pyx_k_FAC_NAM, sizeof(__pyx_k_FAC_NAM), 0, 0, 1, 1},
  {&__pyx_n_s_FAC_NAME, __pyx_k_FAC_NAME, sizeof(__pyx_k_FAC_NAME), 0, 0, 1, 1},
  {&__pyx_n_s_FAC_NOM, __pyx_k_FAC_NOM, sizeof(__pyx_k_FAC_NOM), 0, 0, 1, 1},
  {&__pyx_n_s_FAC_NOMINAL, __pyx_k_FAC_NOMINAL, sizeof(__pyx_k_FAC_NOMINAL), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_s_GPE, __pyx_k_GPE, sizeof(__pyx_k_GPE), 0, 0, 1, 0},
  {&__pyx_n_s_GPE_NAM, __pyx_k_GPE_NAM, sizeof(__pyx_k_GPE_NAM), 0, 0, 1, 1},
  {&__pyx_n_s_GPE_NAME, __pyx_k_GPE_NAME, sizeof(__pyx_k_GPE_NAME), 0, 0, 1, 1},
  {&__pyx_n_s_GPE_NOM, __pyx_k_GPE_NOM, sizeof(__pyx_k_GPE_NOM), 0, 0, 1, 1},
  {&__pyx_n_s_GPE_NOMINAL, __pyx_k_GPE_NOMINAL, sizeof(__pyx_k_GPE_NOMINAL), 0, 0, 1, 1},
  {&__pyx_n_s_HanziConv, __pyx_k_HanziConv, sizeof(__pyx_k_HanziConv), 0, 0, 1, 1},
  {&__pyx_kp_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 0},
  {&__pyx_kp_s_I_LOC, __pyx_k_I_LOC, sizeof(__pyx_k_I_LOC), 0, 0, 1, 0},
  {&__pyx_kp_s_I_MISC, __pyx_k_I_MISC, sizeof(__pyx_k_I_MISC), 0, 0, 1, 0},
  {&__pyx_kp_s_I_ORG, __pyx_k_I_ORG, sizeof(__pyx_k_I_ORG), 0, 0, 1, 0},
  {&__pyx_kp_s_I_PER, __pyx_k_I_PER, sizeof(__pyx_k_I_PER), 0, 0, 1, 0},
  {&__pyx_n_s_KBP, __pyx_k_KBP, sizeof(__pyx_k_KBP), 0, 0, 1, 1},
  {&__pyx_n_s_KBP2015, __pyx_k_KBP2015, sizeof(__pyx_k_KBP2015), 0, 0, 1, 1},
  {&__pyx_n_s_LOC, __pyx_k_LOC, sizeof(__pyx_k_LOC), 0, 0, 1, 1},
  {&__pyx_n_s_LOCATION, __pyx_k_LOCATION, sizeof(__pyx_k_LOCATION), 0, 0, 1, 1},
  {&__pyx_kp_s_LOC_2, __pyx_k_LOC_2, sizeof(__pyx_k_LOC_2), 0, 0, 1, 0},
  {&__pyx_n_s_LOC_NAM, __pyx_k_LOC_NAM, sizeof(__pyx_k_LOC_NAM), 0, 0, 1, 1},
  {&__pyx_n_s_LOC_NAME, __pyx_k_LOC_NAME, sizeof(__pyx_k_LOC_NAME), 0, 0, 1, 1},
  {&__pyx_n_s_LOC_NOM, __pyx_k_LOC_NOM, sizeof(__pyx_k_LOC_NOM), 0, 0, 1, 1},
  {&__pyx_n_s_LOC_NOMINAL, __pyx_k_LOC_NOMINAL, sizeof(__pyx_k_LOC_NOMINAL), 0, 0, 1, 1},
  {&__pyx_n_s_MISC, __pyx_k_MISC, sizeof(__pyx_k_MISC), 0, 0, 1, 1},
  {&__pyx_kp_s_MISC_2, __pyx_k_MISC_2, sizeof(__pyx_k_MISC_2), 0, 0, 1, 0},
  {&__pyx_n_s_MONEY, __pyx_k_MONEY, sizeof(__pyx_k_MONEY), 0, 0, 1, 1},
  {&__pyx_n_s_NUMBER, __pyx_k_NUMBER, sizeof(__pyx_k_NUMBER), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1, 1},
  {&__pyx_n_s_ORG, __pyx_k_ORG, sizeof(__pyx_k_ORG), 0, 0, 1, 1},
  {&__pyx_n_s_ORGANIZATION, __pyx_k_ORGANIZATION, sizeof(__pyx_k_ORGANIZATION), 0, 0, 1, 1},
  {&__pyx_kp_s_ORG_2, __pyx_k_ORG_2, sizeof(__pyx_k_ORG_2), 0, 0, 1, 0},
  {&__pyx_n_s_ORG_NAM, __pyx_k_ORG_NAM, sizeof(__pyx_k_ORG_NAM), 0, 0, 1, 1},
  {&__pyx_n_s_ORG_NAME, __pyx_k_ORG_NAME, sizeof(__pyx_k_ORG_NAME), 0, 0, 1, 1},
  {&__pyx_n_s_ORG_NOM, __pyx_k_ORG_NOM, sizeof(__pyx_k_ORG_NOM), 0, 0, 1, 1},
  {&__pyx_n_s_ORG_NOMINAL, __pyx_k_ORG_NOMINAL, sizeof(__pyx_k_ORG_NOMINAL), 0, 0, 1, 1},
  {&__pyx_n_s_OVERALL, __pyx_k_OVERALL, sizeof(__pyx_k_OVERALL), 0, 0, 1, 1},
  {&__pyx_n_s_PER, __pyx_k_PER, sizeof(__pyx_k_PER), 0, 0, 1, 1},
  {&__pyx_n_s_PERCENT, __pyx_k_PERCENT, sizeof(__pyx_k_PERCENT), 0, 0, 1, 1},
  {&__pyx_n_s_PERSON, __pyx_k_PERSON, sizeof(__pyx_k_PERSON), 0, 0, 1, 1},
  {&__pyx_kp_s_PER_2, __pyx_k_PER_2, sizeof(__pyx_k_PER_2), 0, 0, 1, 0},
  {&__pyx_n_s_PER_NAM, __pyx_k_PER_NAM, sizeof(__pyx_k_PER_NAM), 0, 0, 1, 1},
  {&__pyx_n_s_PER_NAME, __pyx_k_PER_NAME, sizeof(__pyx_k_PER_NAME), 0, 0, 1, 1},
  {&__pyx_n_s_PER_NOM, __pyx_k_PER_NOM, sizeof(__pyx_k_PER_NOM), 0, 0, 1, 1},
  {&__pyx_n_s_PER_NOMINAL, __pyx_k_PER_NOMINAL, sizeof(__pyx_k_PER_NOMINAL), 0, 0, 1, 1},
  {&__pyx_n_s_PredictionParser, __pyx_k_PredictionParser, sizeof(__pyx_k_PredictionParser), 0, 0, 1, 1},
  {&__pyx_n_s_Queue, __pyx_k_Queue, sizeof(__pyx_k_Queue), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SampleGenerator, __pyx_k_SampleGenerator, sizeof(__pyx_k_SampleGenerator), 0, 0, 1, 1},
  {&__pyx_n_s_SentenceIterator, __pyx_k_SentenceIterator, sizeof(__pyx_k_SentenceIterator), 0, 0, 1, 1},
  {&__pyx_n_s_TITLE_NAME, __pyx_k_TITLE_NAME, sizeof(__pyx_k_TITLE_NAME), 0, 0, 1, 1},
  {&__pyx_n_s_TITLE_NOMINAL, __pyx_k_TITLE_NOMINAL, sizeof(__pyx_k_TITLE_NOMINAL), 0, 0, 1, 1},
  {&__pyx_kp_s_TTL, __pyx_k_TTL, sizeof(__pyx_k_TTL), 0, 0, 1, 0},
  {&__pyx_n_s_TTL_NAM, __pyx_k_TTL_NAM, sizeof(__pyx_k_TTL_NAM), 0, 0, 1, 1},
  {&__pyx_kp_s_The_legancy_code_is_strongly_ty, __pyx_k_The_legancy_code_is_strongly_ty, sizeof(__pyx_k_The_legancy_code_is_strongly_ty), 0, 0, 1, 0},
  {&__pyx_n_s_Thread, __pyx_k_Thread, sizeof(__pyx_k_Thread), 0, 0, 1, 1},
  {&__pyx_kp_s_UNK, __pyx_k_UNK, sizeof(__pyx_k_UNK), 0, 0, 1, 0},
  {&__pyx_kp_s_UNSURE, __pyx_k_UNSURE, sizeof(__pyx_k_UNSURE), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_kp_s__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 0, 1, 0},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 0},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 0, 1, 0},
  {&__pyx_kp_u__29, __pyx_k__29, sizeof(__pyx_k__29), 0, 1, 0, 0},
  {&__pyx_n_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 1},
  {&__pyx_kp_u__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 1, 0, 0},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_kp_s__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 0, 1, 0},
  {&__pyx_kp_u__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 1, 0, 0},
  {&__pyx_kp_s__44, __pyx_k__44, sizeof(__pyx_k__44), 0, 0, 1, 0},
  {&__pyx_kp_u__44, __pyx_k__44, sizeof(__pyx_k__44), 0, 1, 0, 0},
  {&__pyx_kp_s__53, __pyx_k__53, sizeof(__pyx_k__53), 0, 0, 1, 0},
  {&__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
  {&__pyx_kp_s__62, __pyx_k__62, sizeof(__pyx_k__62), 0, 0, 1, 0},
  {&__pyx_kp_u__66, __pyx_k__66, sizeof(__pyx_k__66), 0, 1, 0, 0},
  {&__pyx_kp_u__68, __pyx_k__68, sizeof(__pyx_k__68), 0, 1, 0, 0},
  {&__pyx_n_s__82, __pyx_k__82, sizeof(__pyx_k__82), 0, 0, 1, 1},
  {&__pyx_kp_s__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_kp_s_actual, __pyx_k_actual, sizeof(__pyx_k_actual), 0, 0, 1, 0},
  {&__pyx_n_s_actual_2, __pyx_k_actual_2, sizeof(__pyx_k_actual_2), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_algorithm, __pyx_k_algorithm, sizeof(__pyx_k_algorithm), 0, 0, 1, 1},
  {&__pyx_n_s_all_prob, __pyx_k_all_prob, sizeof(__pyx_k_all_prob), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_analysis, __pyx_k_analysis, sizeof(__pyx_k_analysis), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_argmax, __pyx_k_argmax, sizeof(__pyx_k_argmax), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_b1, __pyx_k_b1, sizeof(__pyx_k_b1), 0, 0, 1, 1},
  {&__pyx_n_s_b2, __pyx_k_b2, sizeof(__pyx_k_b2), 0, 0, 1, 1},
  {&__pyx_n_s_batch_buffer, __pyx_k_batch_buffer, sizeof(__pyx_k_batch_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_batch_constructor, __pyx_k_batch_constructor, sizeof(__pyx_k_batch_constructor), 0, 0, 1, 1},
  {&__pyx_n_s_batch_constructor___init, __pyx_k_batch_constructor___init, sizeof(__pyx_k_batch_constructor___init), 0, 0, 1, 1},
  {&__pyx_n_s_batch_constructor___init___local, __pyx_k_batch_constructor___init___local, sizeof(__pyx_k_batch_constructor___init___local), 0, 0, 1, 1},
  {&__pyx_n_s_batch_constructor___str, __pyx_k_batch_constructor___str, sizeof(__pyx_k_batch_constructor___str), 0, 0, 1, 1},
  {&__pyx_n_s_batch_constructor_infinite_mini, __pyx_k_batch_constructor_infinite_mini, sizeof(__pyx_k_batch_constructor_infinite_mini), 0, 0, 1, 1},
  {&__pyx_n_s_batch_constructor_mini_batch, __pyx_k_batch_constructor_mini_batch, sizeof(__pyx_k_batch_constructor_mini_batch), 0, 0, 1, 1},
  {&__pyx_n_s_batch_constructor_mini_batch_mul, __pyx_k_batch_constructor_mini_batch_mul, sizeof(__pyx_k_batch_constructor_mini_batch_mul), 0, 0, 1, 1},
  {&__pyx_n_s_batch_generator, __pyx_k_batch_generator, sizeof(__pyx_k_batch_generator), 0, 0, 1, 1},
  {&__pyx_n_s_beginOfNer, __pyx_k_beginOfNer, sizeof(__pyx_k_beginOfNer), 0, 0, 1, 1},
  {&__pyx_n_s_begin_idx, __pyx_k_begin_idx, sizeof(__pyx_k_begin_idx), 0, 0, 1, 1},
  {&__pyx_n_s_best, __pyx_k_best, sizeof(__pyx_k_best), 0, 0, 1, 1},
  {&__pyx_n_s_bigram_alpha, __pyx_k_bigram_alpha, sizeof(__pyx_k_bigram_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_boe, __pyx_k_boe, sizeof(__pyx_k_boe), 0, 0, 1, 1},
  {&__pyx_n_s_bow1, __pyx_k_bow1, sizeof(__pyx_k_bow1), 0, 0, 1, 1},
  {&__pyx_n_s_bow2, __pyx_k_bow2, sizeof(__pyx_k_bow2), 0, 0, 1, 1},
  {&__pyx_n_s_buffer_stack, __pyx_k_buffer_stack, sizeof(__pyx_k_buffer_stack), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_c1, __pyx_k_c1, sizeof(__pyx_k_c1), 0, 0, 1, 1},
  {&__pyx_n_s_c2, __pyx_k_c2, sizeof(__pyx_k_c2), 0, 0, 1, 1},
  {&__pyx_n_s_c_unk, __pyx_k_c_unk, sizeof(__pyx_k_c_unk), 0, 0, 1, 1},
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_n_s_candidate, __pyx_k_candidate, sizeof(__pyx_k_candidate), 0, 0, 1, 1},
  {&__pyx_n_s_case_sensitive, __pyx_k_case_sensitive, sizeof(__pyx_k_case_sensitive), 0, 0, 1, 1},
  {&__pyx_n_s_char2idx, __pyx_k_char2idx, sizeof(__pyx_k_char2idx), 0, 0, 1, 1},
  {&__pyx_n_s_char_fofe_of_phrase, __pyx_k_char_fofe_of_phrase, sizeof(__pyx_k_char_fofe_of_phrase), 0, 0, 1, 1},
  {&__pyx_n_s_char_fofe_of_word, __pyx_k_char_fofe_of_word, sizeof(__pyx_k_char_fofe_of_word), 0, 0, 1, 1},
  {&__pyx_n_s_char_sequence, __pyx_k_char_sequence, sizeof(__pyx_k_char_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_chars, __pyx_k_chars, sizeof(__pyx_k_chars), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_char_vocab, __pyx_k_chinese_char_vocab, sizeof(__pyx_k_chinese_char_vocab), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_char_vocab___init, __pyx_k_chinese_char_vocab___init, sizeof(__pyx_k_chinese_char_vocab___init), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_char_vocab_sentence2indi, __pyx_k_chinese_char_vocab_sentence2indi, sizeof(__pyx_k_chinese_char_vocab_sentence2indi), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_char_vocab_sentence2indi_2, __pyx_k_chinese_char_vocab_sentence2indi_2, sizeof(__pyx_k_chinese_char_vocab_sentence2indi_2), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_char_vocab_sentence2indi_3, __pyx_k_chinese_char_vocab_sentence2indi_3, sizeof(__pyx_k_chinese_char_vocab_sentence2indi_3), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_word_vocab, __pyx_k_chinese_word_vocab, sizeof(__pyx_k_chinese_word_vocab), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_word_vocab___init, __pyx_k_chinese_word_vocab___init, sizeof(__pyx_k_chinese_word_vocab___init), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_word_vocab_char_fofe_of, __pyx_k_chinese_word_vocab_char_fofe_of, sizeof(__pyx_k_chinese_word_vocab_char_fofe_of), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_word_vocab_char_fofe_of_2, __pyx_k_chinese_word_vocab_char_fofe_of_2, sizeof(__pyx_k_chinese_word_vocab_char_fofe_of_2), 0, 0, 1, 1},
  {&__pyx_kp_s_chinese_word_vocab_does_not_pro, __pyx_k_chinese_word_vocab_does_not_pro, sizeof(__pyx_k_chinese_word_vocab_does_not_pro), 0, 0, 1, 0},
  {&__pyx_kp_s_chinese_word_vocab_does_not_pro_2, __pyx_k_chinese_word_vocab_does_not_pro_2, sizeof(__pyx_k_chinese_word_vocab_does_not_pro_2), 0, 0, 1, 0},
  {&__pyx_n_s_chinese_word_vocab_sentence2indi, __pyx_k_chinese_word_vocab_sentence2indi, sizeof(__pyx_k_chinese_word_vocab_sentence2indi), 0, 0, 1, 1},
  {&__pyx_n_s_chinese_word_vocab_sentence2indi_2, __pyx_k_chinese_word_vocab_sentence2indi_2, sizeof(__pyx_k_chinese_word_vocab_sentence2indi_2), 0, 0, 1, 1},
  {&__pyx_n_s_choice, __pyx_k_choice, sizeof(__pyx_k_choice), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_cmn, __pyx_k_cmn, sizeof(__pyx_k_cmn), 0, 0, 1, 1},
  {&__pyx_n_s_cnt, __pyx_k_cnt, sizeof(__pyx_k_cnt), 0, 0, 1, 1},
  {&__pyx_n_s_codecs, __pyx_k_codecs, sizeof(__pyx_k_codecs), 0, 0, 1, 1},
  {&__pyx_n_s_compile, __pyx_k_compile, sizeof(__pyx_k_compile), 0, 0, 1, 1},
  {&__pyx_n_s_concatenate, __pyx_k_concatenate, sizeof(__pyx_k_concatenate), 0, 0, 1, 1},
  {&__pyx_kp_s_contains_digit, __pyx_k_contains_digit, sizeof(__pyx_k_contains_digit), 0, 0, 1, 0},
  {&__pyx_n_s_conv_buff, __pyx_k_conv_buff, sizeof(__pyx_k_conv_buff), 0, 0, 1, 1},
  {&__pyx_n_s_conv_idx, __pyx_k_conv_idx, sizeof(__pyx_k_conv_idx), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_corpus, __pyx_k_corpus, sizeof(__pyx_k_corpus), 0, 0, 1, 1},
  {&__pyx_n_s_csr_matrix, __pyx_k_csr_matrix, sizeof(__pyx_k_csr_matrix), 0, 0, 1, 1},
  {&__pyx_kp_b_d_4_0_13578_1_02_0_1_9_12_d_3_0, __pyx_k_d_4_0_13578_1_02_0_1_9_12_d_3_0, sizeof(__pyx_k_d_4_0_13578_1_02_0_1_9_12_d_3_0), 0, 0, 0, 0},
  {&__pyx_kp_s_d_sentence_s_discarded, __pyx_k_d_sentence_s_discarded, sizeof(__pyx_k_d_sentence_s_discarded), 0, 0, 1, 0},
  {&__pyx_kp_s_d_sentences_d_positive_d_overla, __pyx_k_d_sentences_d_positive_d_overla, sizeof(__pyx_k_d_sentences_d_positive_d_overla), 0, 0, 1, 0},
  {&__pyx_kp_s_d_words, __pyx_k_d_words, sizeof(__pyx_k_d_words), 0, 0, 1, 0},
  {&__pyx_n_s_daemon, __pyx_k_daemon, sizeof(__pyx_k_daemon), 0, 0, 1, 1},
  {&__pyx_kp_s_date_value, __pyx_k_date_value, sizeof(__pyx_k_date_value), 0, 0, 1, 0},
  {&__pyx_kp_s_dd, __pyx_k_dd, sizeof(__pyx_k_dd), 0, 0, 1, 0},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_decode_algo_1, __pyx_k_decode_algo_1, sizeof(__pyx_k_decode_algo_1), 0, 0, 1, 1},
  {&__pyx_n_s_decode_algo_1_locals_lambda, __pyx_k_decode_algo_1_locals_lambda, sizeof(__pyx_k_decode_algo_1_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_decode_algo_2, __pyx_k_decode_algo_2, sizeof(__pyx_k_decode_algo_2), 0, 0, 1, 1},
  {&__pyx_n_s_decode_algo_3, __pyx_k_decode_algo_3, sizeof(__pyx_k_decode_algo_3), 0, 0, 1, 1},
  {&__pyx_n_s_decoder_callback, __pyx_k_decoder_callback, sizeof(__pyx_k_decoder_callback), 0, 0, 1, 1},
  {&__pyx_n_s_deepcopy, __pyx_k_deepcopy, sizeof(__pyx_k_deepcopy), 0, 0, 1, 1},
  {&__pyx_n_s_dense_buffer, __pyx_k_dense_buffer, sizeof(__pyx_k_dense_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_disjoint, __pyx_k_disjoint, sizeof(__pyx_k_disjoint), 0, 0, 1, 1},
  {&__pyx_n_s_disjoint_rate, __pyx_k_disjoint_rate, sizeof(__pyx_k_disjoint_rate), 0, 0, 1, 1},
  {&__pyx_n_s_distant_supervision_parser, __pyx_k_distant_supervision_parser, sizeof(__pyx_k_distant_supervision_parser), 0, 0, 1, 1},
  {&__pyx_n_s_distant_supervision_parser_local, __pyx_k_distant_supervision_parser_local, sizeof(__pyx_k_distant_supervision_parser_local), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_e1, __pyx_k_e1, sizeof(__pyx_k_e1), 0, 0, 1, 1},
  {&__pyx_n_s_e2, __pyx_k_e2, sizeof(__pyx_k_e2), 0, 0, 1, 1},
  {&__pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_k_eecs_research_asr_mingbin_ner_a, sizeof(__pyx_k_eecs_research_asr_mingbin_ner_a), 0, 0, 1, 0},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_endOfNer, __pyx_k_endOfNer, sizeof(__pyx_k_endOfNer), 0, 0, 1, 1},
  {&__pyx_n_s_end_idx, __pyx_k_end_idx, sizeof(__pyx_k_end_idx), 0, 0, 1, 1},
  {&__pyx_n_s_eng, __pyx_k_eng, sizeof(__pyx_k_eng), 0, 0, 1, 1},
  {&__pyx_n_s_engity_end, __pyx_k_engity_end, sizeof(__pyx_k_engity_end), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_entity2cls, __pyx_k_entity2cls, sizeof(__pyx_k_entity2cls), 0, 0, 1, 1},
  {&__pyx_n_s_entity_begin, __pyx_k_entity_begin, sizeof(__pyx_k_entity_begin), 0, 0, 1, 1},
  {&__pyx_n_s_entity_end, __pyx_k_entity_end, sizeof(__pyx_k_entity_end), 0, 0, 1, 1},
  {&__pyx_n_s_entity_label, __pyx_k_entity_label, sizeof(__pyx_k_entity_label), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eoe, __pyx_k_eoe, sizeof(__pyx_k_eoe), 0, 0, 1, 1},
  {&__pyx_n_s_estimate, __pyx_k_estimate, sizeof(__pyx_k_estimate), 0, 0, 1, 1},
  {&__pyx_kp_s_estimate_2, __pyx_k_estimate_2, sizeof(__pyx_k_estimate_2), 0, 0, 1, 0},
  {&__pyx_n_s_evaluation, __pyx_k_evaluation, sizeof(__pyx_k_evaluation), 0, 0, 1, 1},
  {&__pyx_n_s_evaluation_locals_lambda, __pyx_k_evaluation_locals_lambda, sizeof(__pyx_k_evaluation_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_example, __pyx_k_example, sizeof(__pyx_k_example), 0, 0, 1, 1},
  {&__pyx_n_s_exception, __pyx_k_exception, sizeof(__pyx_k_exception), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_f_beta, __pyx_k_f_beta, sizeof(__pyx_k_f_beta), 0, 0, 1, 1},
  {&__pyx_kp_s_false_negative, __pyx_k_false_negative, sizeof(__pyx_k_false_negative), 0, 0, 1, 0},
  {&__pyx_n_s_false_negative_2, __pyx_k_false_negative_2, sizeof(__pyx_k_false_negative_2), 0, 0, 1, 1},
  {&__pyx_kp_s_false_positive, __pyx_k_false_positive, sizeof(__pyx_k_false_positive), 0, 0, 1, 0},
  {&__pyx_n_s_false_positive_2, __pyx_k_false_positive_2, sizeof(__pyx_k_false_positive_2), 0, 0, 1, 1},
  {&__pyx_n_s_feature_choice, __pyx_k_feature_choice, sizeof(__pyx_k_feature_choice), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_find, __pyx_k_find, sizeof(__pyx_k_find), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_found, __pyx_k_found, sizeof(__pyx_k_found), 0, 0, 1, 1},
  {&__pyx_n_s_fp, __pyx_k_fp, sizeof(__pyx_k_fp), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_gazetteer, __pyx_k_gazetteer, sizeof(__pyx_k_gazetteer), 0, 0, 1, 1},
  {&__pyx_n_s_gazetteer_locals_genexpr, __pyx_k_gazetteer_locals_genexpr, sizeof(__pyx_k_gazetteer_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_gazetteer_match, __pyx_k_gazetteer_match, sizeof(__pyx_k_gazetteer_match), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_gigaword, __pyx_k_gigaword, sizeof(__pyx_k_gigaword), 0, 0, 1, 1},
  {&__pyx_n_s_gigaword2feature, __pyx_k_gigaword2feature, sizeof(__pyx_k_gigaword2feature), 0, 0, 1, 1},
  {&__pyx_n_s_hanziconv, __pyx_k_hanziconv, sizeof(__pyx_k_hanziconv), 0, 0, 1, 1},
  {&__pyx_n_s_has_char_feature, __pyx_k_has_char_feature, sizeof(__pyx_k_has_char_feature), 0, 0, 1, 1},
  {&__pyx_n_s_has_chinese, __pyx_k_has_chinese, sizeof(__pyx_k_has_chinese), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_kp_u_iNCML, __pyx_k_iNCML, sizeof(__pyx_k_iNCML), 0, 1, 0, 0},
  {&__pyx_n_s_idx2char, __pyx_k_idx2char, sizeof(__pyx_k_idx2char), 0, 0, 1, 1},
  {&__pyx_n_s_idx2ner, __pyx_k_idx2ner, sizeof(__pyx_k_idx2ner), 0, 0, 1, 1},
  {&__pyx_n_s_idx2word, __pyx_k_idx2word, sizeof(__pyx_k_idx2word), 0, 0, 1, 1},
  {&__pyx_n_s_imap, __pyx_k_imap, sizeof(__pyx_k_imap), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_infinite_mini_batch_multi_thread, __pyx_k_infinite_mini_batch_multi_thread, sizeof(__pyx_k_infinite_mini_batch_multi_thread), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_init___locals_genexpr, __pyx_k_init___locals_genexpr, sizeof(__pyx_k_init___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_islice, __pyx_k_islice, sizeof(__pyx_k_islice), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_izip, __pyx_k_izip, sizeof(__pyx_k_izip), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_keep, __pyx_k_keep, sizeof(__pyx_k_keep), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_l1_indices, __pyx_k_l1_indices, sizeof(__pyx_k_l1_indices), 0, 0, 1, 1},
  {&__pyx_n_s_l1_values, __pyx_k_l1_values, sizeof(__pyx_k_l1_values), 0, 0, 1, 1},
  {&__pyx_n_s_l2_indices, __pyx_k_l2_indices, sizeof(__pyx_k_l2_indices), 0, 0, 1, 1},
  {&__pyx_n_s_l2_values, __pyx_k_l2_values, sizeof(__pyx_k_l2_values), 0, 0, 1, 1},
  {&__pyx_n_s_l3_indices, __pyx_k_l3_indices, sizeof(__pyx_k_l3_indices), 0, 0, 1, 1},
  {&__pyx_n_s_l3_values, __pyx_k_l3_values, sizeof(__pyx_k_l3_values), 0, 0, 1, 1},
  {&__pyx_n_s_l4_indices, __pyx_k_l4_indices, sizeof(__pyx_k_l4_indices), 0, 0, 1, 1},
  {&__pyx_n_s_l4_values, __pyx_k_l4_values, sizeof(__pyx_k_l4_values), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_language, __pyx_k_language, sizeof(__pyx_k_language), 0, 0, 1, 1},
  {&__pyx_n_s_lastNer, __pyx_k_lastNer, sizeof(__pyx_k_lastNer), 0, 0, 1, 1},
  {&__pyx_n_s_last_ner, __pyx_k_last_ner, sizeof(__pyx_k_last_ner), 0, 0, 1, 1},
  {&__pyx_n_s_lbc_indices, __pyx_k_lbc_indices, sizeof(__pyx_k_lbc_indices), 0, 0, 1, 1},
  {&__pyx_n_s_lbc_values, __pyx_k_lbc_values, sizeof(__pyx_k_lbc_values), 0, 0, 1, 1},
  {&__pyx_n_s_left_c, __pyx_k_left_c, sizeof(__pyx_k_left_c), 0, 0, 1, 1},
  {&__pyx_n_s_left_init, __pyx_k_left_init, sizeof(__pyx_k_left_init), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_lines, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {&__pyx_n_s_loe, __pyx_k_loe, sizeof(__pyx_k_loe), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_malformed, __pyx_k_malformed, sizeof(__pyx_k_malformed), 0, 0, 1, 1},
  {&__pyx_n_s_match, __pyx_k_match, sizeof(__pyx_k_match), 0, 0, 1, 1},
  {&__pyx_n_s_maxsize, __pyx_k_maxsize, sizeof(__pyx_k_maxsize), 0, 0, 1, 1},
  {&__pyx_n_s_merge_adjacient, __pyx_k_merge_adjacient, sizeof(__pyx_k_merge_adjacient), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mini_batch, __pyx_k_mini_batch, sizeof(__pyx_k_mini_batch), 0, 0, 1, 1},
  {&__pyx_n_s_mini_batch_multi_thread, __pyx_k_mini_batch_multi_thread, sizeof(__pyx_k_mini_batch_multi_thread), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_batch_size, __pyx_k_n_batch_size, sizeof(__pyx_k_n_batch_size), 0, 0, 1, 1},
  {&__pyx_n_s_n_copy, __pyx_k_n_copy, sizeof(__pyx_k_n_copy), 0, 0, 1, 1},
  {&__pyx_n_s_n_discard, __pyx_k_n_discard, sizeof(__pyx_k_n_discard), 0, 0, 1, 1},
  {&__pyx_n_s_n_label_type, __pyx_k_n_label_type, sizeof(__pyx_k_n_label_type), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ner, __pyx_k_ner, sizeof(__pyx_k_ner), 0, 0, 1, 1},
  {&__pyx_n_s_ner2cls, __pyx_k_ner2cls, sizeof(__pyx_k_ner2cls), 0, 0, 1, 1},
  {&__pyx_n_s_ner2idx, __pyx_k_ner2idx, sizeof(__pyx_k_ner2idx), 0, 0, 1, 1},
  {&__pyx_n_s_nerCls, __pyx_k_nerCls, sizeof(__pyx_k_nerCls), 0, 0, 1, 1},
  {&__pyx_n_s_ner_begin, __pyx_k_ner_begin, sizeof(__pyx_k_ner_begin), 0, 0, 1, 1},
  {&__pyx_n_s_ner_end, __pyx_k_ner_end, sizeof(__pyx_k_ner_end), 0, 0, 1, 1},
  {&__pyx_n_s_ner_label, __pyx_k_ner_label, sizeof(__pyx_k_ner_label), 0, 0, 1, 1},
  {&__pyx_n_s_ner_max_length, __pyx_k_ner_max_length, sizeof(__pyx_k_ner_max_length), 0, 0, 1, 1},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_n_s_next_batch, __pyx_k_next_batch, sizeof(__pyx_k_next_batch), 0, 0, 1, 1},
  {&__pyx_n_s_next_example, __pyx_k_next_example, sizeof(__pyx_k_next_example), 0, 0, 1, 1},
  {&__pyx_n_s_number, __pyx_k_number, sizeof(__pyx_k_number), 0, 0, 1, 1},
  {&__pyx_kp_u_numeric, __pyx_k_numeric, sizeof(__pyx_k_numeric), 0, 1, 0, 0},
  {&__pyx_kp_s_numeric_value, __pyx_k_numeric_value, sizeof(__pyx_k_numeric_value), 0, 0, 1, 0},
  {&__pyx_n_s_numericizer, __pyx_k_numericizer, sizeof(__pyx_k_numericizer), 0, 0, 1, 1},
  {&__pyx_n_s_numericizer1, __pyx_k_numericizer1, sizeof(__pyx_k_numericizer1), 0, 0, 1, 1},
  {&__pyx_n_s_numericizer2, __pyx_k_numericizer2, sizeof(__pyx_k_numericizer2), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_kp_s_only_3_algorithms_are_supported, __pyx_k_only_3_algorithms_are_supported, sizeof(__pyx_k_only_3_algorithms_are_supported), 0, 0, 1, 0},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_original, __pyx_k_original, sizeof(__pyx_k_original), 0, 0, 1, 1},
  {&__pyx_n_s_overlap, __pyx_k_overlap, sizeof(__pyx_k_overlap), 0, 0, 1, 1},
  {&__pyx_n_s_overlap_rate, __pyx_k_overlap_rate, sizeof(__pyx_k_overlap_rate), 0, 0, 1, 1},
  {&__pyx_kp_u_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 1, 0, 0},
  {&__pyx_kp_u_p_2, __pyx_k_p_2, sizeof(__pyx_k_p_2), 0, 1, 0, 0},
  {&__pyx_n_s_p_3, __pyx_k_p_3, sizeof(__pyx_k_p_3), 0, 0, 1, 1},
  {&__pyx_n_s_parser, __pyx_k_parser, sizeof(__pyx_k_parser), 0, 0, 1, 1},
  {&__pyx_kp_s_phone_value, __pyx_k_phone_value, sizeof(__pyx_k_phone_value), 0, 0, 1, 0},
  {&__pyx_n_s_phrase, __pyx_k_phrase, sizeof(__pyx_k_phrase), 0, 0, 1, 1},
  {&__pyx_n_s_phrase_max_length, __pyx_k_phrase_max_length, sizeof(__pyx_k_phrase_max_length), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_positive, __pyx_k_positive, sizeof(__pyx_k_positive), 0, 0, 1, 1},
  {&__pyx_n_s_pp, __pyx_k_pp, sizeof(__pyx_k_pp), 0, 0, 1, 1},
  {&__pyx_n_s_precision, __pyx_k_precision, sizeof(__pyx_k_precision), 0, 0, 1, 1},
  {&__pyx_n_s_predicted, __pyx_k_predicted, sizeof(__pyx_k_predicted), 0, 0, 1, 1},
  {&__pyx_n_s_predicted_label, __pyx_k_predicted_label, sizeof(__pyx_k_predicted_label), 0, 0, 1, 1},
  {&__pyx_n_s_prediction_parser, __pyx_k_prediction_parser, sizeof(__pyx_k_prediction_parser), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_prepare_mini_batch, __pyx_k_prepare_mini_batch, sizeof(__pyx_k_prepare_mini_batch), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_probability, __pyx_k_probability, sizeof(__pyx_k_probability), 0, 0, 1, 1},
  {&__pyx_n_s_put, __pyx_k_put, sizeof(__pyx_k_put), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_r1_indices, __pyx_k_r1_indices, sizeof(__pyx_k_r1_indices), 0, 0, 1, 1},
  {&__pyx_n_s_r1_values, __pyx_k_r1_values, sizeof(__pyx_k_r1_values), 0, 0, 1, 1},
  {&__pyx_n_s_r2_indices, __pyx_k_r2_indices, sizeof(__pyx_k_r2_indices), 0, 0, 1, 1},
  {&__pyx_n_s_r2_values, __pyx_k_r2_values, sizeof(__pyx_k_r2_values), 0, 0, 1, 1},
  {&__pyx_n_s_r3_indices, __pyx_k_r3_indices, sizeof(__pyx_k_r3_indices), 0, 0, 1, 1},
  {&__pyx_n_s_r3_values, __pyx_k_r3_values, sizeof(__pyx_k_r3_values), 0, 0, 1, 1},
  {&__pyx_n_s_r4_indices, __pyx_k_r4_indices, sizeof(__pyx_k_r4_indices), 0, 0, 1, 1},
  {&__pyx_n_s_r4_values, __pyx_k_r4_values, sizeof(__pyx_k_r4_values), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_kp_s_raw_out, __pyx_k_raw_out, sizeof(__pyx_k_raw_out), 0, 0, 1, 0},
  {&__pyx_n_s_rb, __pyx_k_rb, sizeof(__pyx_k_rb), 0, 0, 1, 1},
  {&__pyx_n_s_rbc_indices, __pyx_k_rbc_indices, sizeof(__pyx_k_rbc_indices), 0, 0, 1, 1},
  {&__pyx_n_s_rbc_values, __pyx_k_rbc_values, sizeof(__pyx_k_rbc_values), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_readlines, __pyx_k_readlines, sizeof(__pyx_k_readlines), 0, 0, 1, 1},
  {&__pyx_n_s_recall, __pyx_k_recall, sizeof(__pyx_k_recall), 0, 0, 1, 1},
  {&__pyx_n_s_reinterpret_threshold, __pyx_k_reinterpret_threshold, sizeof(__pyx_k_reinterpret_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_removed, __pyx_k_removed, sizeof(__pyx_k_removed), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_restore_state, __pyx_k_restore_state, sizeof(__pyx_k_restore_state), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_reversed, __pyx_k_reversed, sizeof(__pyx_k_reversed), 0, 0, 1, 1},
  {&__pyx_n_s_reversed_phrase, __pyx_k_reversed_phrase, sizeof(__pyx_k_reversed_phrase), 0, 0, 1, 1},
  {&__pyx_n_s_rfind, __pyx_k_rfind, sizeof(__pyx_k_rfind), 0, 0, 1, 1},
  {&__pyx_n_s_right_c, __pyx_k_right_c, sizeof(__pyx_k_right_c), 0, 0, 1, 1},
  {&__pyx_n_s_right_init, __pyx_k_right_init, sizeof(__pyx_k_right_init), 0, 0, 1, 1},
  {&__pyx_n_s_rsplit, __pyx_k_rsplit, sizeof(__pyx_k_rsplit), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_sample_generator, __pyx_k_sample_generator, sizeof(__pyx_k_sample_generator), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_sparse, __pyx_k_scipy_sparse, sizeof(__pyx_k_scipy_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sent, __pyx_k_sent, sizeof(__pyx_k_sent), 0, 0, 1, 1},
  {&__pyx_n_s_sentence, __pyx_k_sentence, sizeof(__pyx_k_sentence), 0, 0, 1, 1},
  {&__pyx_n_s_sentence1, __pyx_k_sentence1, sizeof(__pyx_k_sentence1), 0, 0, 1, 1},
  {&__pyx_n_s_sentence2, __pyx_k_sentence2, sizeof(__pyx_k_sentence2), 0, 0, 1, 1},
  {&__pyx_n_s_sentence2indices, __pyx_k_sentence2indices, sizeof(__pyx_k_sentence2indices), 0, 0, 1, 1},
  {&__pyx_n_s_sentence_file, __pyx_k_sentence_file, sizeof(__pyx_k_sentence_file), 0, 0, 1, 1},
  {&__pyx_n_s_sentence_id, __pyx_k_sentence_id, sizeof(__pyx_k_sentence_id), 0, 0, 1, 1},
  {&__pyx_n_s_sentence_iterator, __pyx_k_sentence_iterator, sizeof(__pyx_k_sentence_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_sentences, __pyx_k_sentences, sizeof(__pyx_k_sentences), 0, 0, 1, 1},
  {&__pyx_n_s_sg, __pyx_k_sg, sizeof(__pyx_k_sg), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_shuffle, __pyx_k_shuffle, sizeof(__pyx_k_shuffle), 0, 0, 1, 1},
  {&__pyx_n_s_shuffle_needed, __pyx_k_shuffle_needed, sizeof(__pyx_k_shuffle_needed), 0, 0, 1, 1},
  {&__pyx_n_s_si, __pyx_k_si, sizeof(__pyx_k_si), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_slash_idx, __pyx_k_slash_idx, sizeof(__pyx_k_slash_idx), 0, 0, 1, 1},
  {&__pyx_n_s_sort, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 0, 1, 1},
  {&__pyx_n_s_sorted_est, __pyx_k_sorted_est, sizeof(__pyx_k_sorted_est), 0, 0, 1, 1},
  {&__pyx_n_s_spa, __pyx_k_spa, sizeof(__pyx_k_spa), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_startswith, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_str2idx, __pyx_k_str2idx, sizeof(__pyx_k_str2idx), 0, 0, 1, 1},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_surpress_output, __pyx_k_surpress_output, sizeof(__pyx_k_surpress_output), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_table, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_tag_file, __pyx_k_tag_file, sizeof(__pyx_k_tag_file), 0, 0, 1, 1},
  {&__pyx_n_s_tags, __pyx_k_tags, sizeof(__pyx_k_tags), 0, 0, 1, 1},
  {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text_file, __pyx_k_text_file, sizeof(__pyx_k_text_file), 0, 0, 1, 1},
  {&__pyx_n_s_threading, __pyx_k_threading, sizeof(__pyx_k_threading), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_kp_s_threshold_and_algorithm_do_not, __pyx_k_threshold_and_algorithm_do_not, sizeof(__pyx_k_threshold_and_algorithm_do_not), 0, 0, 1, 0},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_kp_s_time_value, __pyx_k_time_value, sizeof(__pyx_k_time_value), 0, 0, 1, 0},
  {&__pyx_n_s_timeout, __pyx_k_timeout, sizeof(__pyx_k_timeout), 0, 0, 1, 1},
  {&__pyx_n_s_toSimplified, __pyx_k_toSimplified, sizeof(__pyx_k_toSimplified), 0, 0, 1, 1},
  {&__pyx_n_s_to_keep, __pyx_k_to_keep, sizeof(__pyx_k_to_keep), 0, 0, 1, 1},
  {&__pyx_n_s_token, __pyx_k_token, sizeof(__pyx_k_token), 0, 0, 1, 1},
  {&__pyx_n_s_tokens, __pyx_k_tokens, sizeof(__pyx_k_tokens), 0, 0, 1, 1},
  {&__pyx_n_s_true_positive, __pyx_k_true_positive, sizeof(__pyx_k_true_positive), 0, 0, 1, 1},
  {&__pyx_kp_s_unk, __pyx_k_unk, sizeof(__pyx_k_unk), 0, 0, 1, 0},
  {&__pyx_kp_u_unk, __pyx_k_unk, sizeof(__pyx_k_unk), 0, 1, 0, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_unsure, __pyx_k_unsure, sizeof(__pyx_k_unsure), 0, 0, 1, 1},
  {&__pyx_n_s_update_state, __pyx_k_update_state, sizeof(__pyx_k_update_state), 0, 0, 1, 1},
  {&__pyx_n_s_utf8, __pyx_k_utf8, sizeof(__pyx_k_utf8), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_w_unk, __pyx_k_w_unk, sizeof(__pyx_k_w_unk), 0, 0, 1, 1},
  {&__pyx_n_s_window, __pyx_k_window, sizeof(__pyx_k_window), 0, 0, 1, 1},
  {&__pyx_n_s_word, __pyx_k_word, sizeof(__pyx_k_word), 0, 0, 1, 1},
  {&__pyx_n_s_word2idx, __pyx_k_word2idx, sizeof(__pyx_k_word2idx), 0, 0, 1, 1},
  {&__pyx_n_s_word_sequence, __pyx_k_word_sequence, sizeof(__pyx_k_word_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 291, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 117, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 201, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 201, __pyx_L1_error)
  #endif
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_builtin_reversed = __Pyx_GetBuiltinName(__pyx_n_s_reversed); if (!__pyx_builtin_reversed) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 451, __pyx_L1_error)
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 1125, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 1215, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 1581, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 218, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "gigaword2feature.pyx":64
 *     buffer_stack.resize( 10 )
 * 
 *     logger.info( 'According to Liu, TTL_NAM are all labeled as PER_NOM.' )             # <<<<<<<<<<<<<<
 *     entity2cls = {  # KBP2015 label
 *                     'PER_NAM' : 0,
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_According_to_Liu_TTL_NAM_are_all); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "gigaword2feature.pyx":96
 *             # sentence = [ tokens.split('#')[1] for tokens in line[:bar3idx].strip().split() ]
 *             # label = line[bar3idx + 3:].split()
 *             sentence, label = line.rsplit( '|||', 1 )             # <<<<<<<<<<<<<<
 *             sentence = [ tokens.split('#')[1] for tokens in sentence.strip().split() ]
 *             label = label.split()
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_kp_s__2, __pyx_int_1); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "gigaword2feature.pyx":97
 *             # label = line[bar3idx + 3:].split()
 *             sentence, label = line.rsplit( '|||', 1 )
 *             sentence = [ tokens.split('#')[1] for tokens in sentence.strip().split() ]             # <<<<<<<<<<<<<<
 *             label = label.split()
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s__4); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "gigaword2feature.pyx":106
 *                 if l == 'X':
 *                     cnt += 1
 *                 elif l.startswith( '(' ):             # <<<<<<<<<<<<<<
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )
 *                 elif l.startswith( ')' ):
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "gigaword2feature.pyx":107
 *                     cnt += 1
 *                 elif l.startswith( '(' ):
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )             # <<<<<<<<<<<<<<
 *                 elif l.startswith( ')' ):
 *                     cls = entity2cls[ l[1:] ]
 */
  __pyx_slice__8 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__8)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__8);
  __Pyx_GIVEREF(__pyx_slice__8);

  /* "gigaword2feature.pyx":108
 *                 elif l.startswith( '(' ):
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )
 *                 elif l.startswith( ')' ):             # <<<<<<<<<<<<<<
 *                     cls = entity2cls[ l[1:] ]
 *                     entity_begin.append( buffer_stack[cls].back() )
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s__9); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "gigaword2feature.pyx":109
 *                     buffer_stack[ entity2cls[ l[1:] ] ].push_back( cnt )
 *                 elif l.startswith( ')' ):
 *                     cls = entity2cls[ l[1:] ]             # <<<<<<<<<<<<<<
 *                     entity_begin.append( buffer_stack[cls].back() )
 *                     entity_end.append( cnt )
 */
  __pyx_slice__11 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__11)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__11);
  __Pyx_GIVEREF(__pyx_slice__11);

  /* "gigaword2feature.pyx":89
 *                 }
 * 
 *     with codecs.open( filename ) as text_file:             # <<<<<<<<<<<<<<
 *         for line in text_file:
 *             line = line.strip()
 */
  __pyx_tuple__12 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "gigaword2feature.pyx":157
 * 
 *                 for p in line:
 *                     slash_idx = p.rfind('/')             # <<<<<<<<<<<<<<
 *                     if slash_idx == 0:
 *                         malformed = True
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s__13); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "gigaword2feature.pyx":162
 *                         break
 * 
 *                     word = p[:slash_idx].replace('\\/', '/').replace('\\\\', '\\')             # <<<<<<<<<<<<<<
 *                     label = p[slash_idx + 1:]
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_kp_s__15, __pyx_kp_s__13); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_kp_s__17, __pyx_kp_s__18); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "gigaword2feature.pyx":147
 *     number = set(['PERCENT', 'MONEY', 'NUMBER'])
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:             # <<<<<<<<<<<<<<
 *         n_discard = 0
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "gigaword2feature.pyx":205
 *         with codecs.open(filename, 'rb') as text_file:
 *             for line in text_file:
 *                 tokens = line.strip().split( None, 1 )             # <<<<<<<<<<<<<<
 *                 if len(tokens) == 2:
 *                     result[ ner2cls[tokens[0]] ].add( tokens[1] )
 */
  __pyx_tuple__21 = PyTuple_Pack(2, Py_None, __pyx_int_1); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "gigaword2feature.pyx":203
 *         result = [ set() for _ in xrange(4) ]
 *         ner2cls = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3 }
 *         with codecs.open(filename, 'rb') as text_file:             # <<<<<<<<<<<<<<
 *             for line in text_file:
 *                 tokens = line.strip().split( None, 1 )
 */
  __pyx_tuple__22 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "gigaword2feature.pyx":214
 *         with codecs.open(filename, 'rb') as text_file:
 *             for line in text_file:
 *                 tokens = line.strip().rsplit( None, 1 )             # <<<<<<<<<<<<<<
 *                 if len(tokens) == 2 and tokens[1] in ner2cls:
 *                     result[ ner2cls[tokens[1]] ].add( HanziConv.toSimplified(tokens[0][1:-1]) )
 */
  __pyx_tuple__23 = PyTuple_Pack(2, Py_None, __pyx_int_1); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "gigaword2feature.pyx":216
 *                 tokens = line.strip().rsplit( None, 1 )
 *                 if len(tokens) == 2 and tokens[1] in ner2cls:
 *                     result[ ner2cls[tokens[1]] ].add( HanziConv.toSimplified(tokens[0][1:-1]) )             # <<<<<<<<<<<<<<
 * 
 *     logger.info( '; '.join( str((cls,len(result[ner2cls[cls]]))) for cls in ner2cls ) )
 */
  __pyx_slice__24 = PySlice_New(__pyx_int_1, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__24)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__24);
  __Pyx_GIVEREF(__pyx_slice__24);

  /* "gigaword2feature.pyx":212
 *         ner2cls = { '<PER>' : 0, '<ORG>' : 1, '<GPE>' : 2,
 *                     '<LOC>' : 3, '<FAC>' : 4, '<TTL>' : 5 }
 *         with codecs.open(filename, 'rb') as text_file:             # <<<<<<<<<<<<<<
 *             for line in text_file:
 *                 tokens = line.strip().rsplit( None, 1 )
 */
  __pyx_tuple__25 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "gigaword2feature.pyx":248
 *     sentence, ner_begin, ner_end, ner_label, last_ner = [], [], [], [], 4
 * 
 *     with codecs.open( filename, 'rb' ) as text_file:             # <<<<<<<<<<<<<<
 *         for line in text_file:
 *             tokens = line.strip().split()
 */
  __pyx_tuple__27 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "gigaword2feature.pyx":293
 * class chinese_char_vocab( object ):
 *     def __init__( self, filename ):
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )             # <<<<<<<<<<<<<<
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_n_s_utf8); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "gigaword2feature.pyx":296
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 *             self.idx2char = [ c.strip() for c in fp.read().strip().split( u'\n' ) ]             # <<<<<<<<<<<<<<
 *         self.char2idx = { c:i for (i,c) in enumerate( self.idx2char ) }
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u__29); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "gigaword2feature.pyx":295
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:             # <<<<<<<<<<<<<<
 *             self.idx2char = [ c.strip() for c in fp.read().strip().split( u'\n' ) ]
 *         self.char2idx = { c:i for (i,c) in enumerate( self.idx2char ) }
 */
  __pyx_tuple__31 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "gigaword2feature.pyx":341
 *         self.contains_digit = new regex( r"^.*[0-9].*$" )
 * 
 *         with codecs.open( filename ) as word_file:             # <<<<<<<<<<<<<<
 *             for line in word_file:
 *                 word = line.strip().split()[0]
 */
  __pyx_tuple__34 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "gigaword2feature.pyx":397
 *             return self.word2fofe[word]
 *         else:
 *             lfofe, coeff = numpy.zeros((128,), numpy.float32), 1             # <<<<<<<<<<<<<<
 *             for c in reversed(word):
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_int_128); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "gigaword2feature.pyx":402
 *                 lfofe[i] += numpy.float32(coeff)
 *                 coeff *= self.alpha
 *             rfofe, coeff = numpy.zeros((128,), numpy.float32), 1             # <<<<<<<<<<<<<<
 *             for c in word:
 *                 i = ord(c) if 0 < ord(c) < 128 else 0
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_int_128); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "gigaword2feature.pyx":435
 *     """
 *     def __init__( self, filename ):
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )             # <<<<<<<<<<<<<<
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_n_s_utf8); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "gigaword2feature.pyx":438
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:
 *             self.idx2word = [ w.strip() for w in fp.read().strip().split( u'\n' ) ]             # <<<<<<<<<<<<<<
 *         self.word2idx = { w:i for (i,w) in enumerate( self.idx2word ) }
 * 
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u__29); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "gigaword2feature.pyx":437
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 *         with codecs.open( filename, 'rb', 'utf8' ) as fp:             # <<<<<<<<<<<<<<
 *             self.idx2word = [ w.strip() for w in fp.read().strip().split( u'\n' ) ]
 *         self.word2idx = { w:i for (i,w) in enumerate( self.idx2word ) }
 */
  __pyx_tuple__39 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "gigaword2feature.pyx":451
 * 
 *     def char_fofe_of_word( self ):
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_word'" )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_chinese_word_vocab_does_not_pro); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "gigaword2feature.pyx":455
 * 
 *     def char_fofe_of_phrase( self ):
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_phrase'" )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_chinese_word_vocab_does_not_pro_2); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "gigaword2feature.pyx":744
 *                             name = u' '.join(sentence[i:j])
 *                         else:
 *                             name = u''.join( w[:w.find(u'|iNCML|')] for w in sentence[i:j] )             # <<<<<<<<<<<<<<
 *                         for k, g in enumerate(self.gazetteer):
 *                             if name in g:
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_iNCML); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "gigaword2feature.pyx":760
 *                 char_sequence, word_sequence = [], []
 *                 for token in sentence:
 *                     c, w = token.split( u'|iNCML|' )             # <<<<<<<<<<<<<<
 *                     char_sequence.append( c )
 *                     word_sequence.append( w )
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_u_iNCML); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "gigaword2feature.pyx":908
 *             if self.language != 'cmn':
 *                 phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )
 *                 reversed_phrase = ' '.join( sentence.sentence[begin_idx:end_idx] )[::-1]             # <<<<<<<<<<<<<<
 *                 bigram_alpha = self.numericizer1.alpha
 * 
 */
  __pyx_slice__46 = PySlice_New(Py_None, Py_None, __pyx_int_neg_1); if (unlikely(!__pyx_slice__46)) __PYX_ERR(0, 908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__46);
  __Pyx_GIVEREF(__pyx_slice__46);

  /* "gigaword2feature.pyx":941
 *                 #             ''.join( [ w[0] for w in sentence.sentence[begin_idx:] ] ) )
 * 
 *                 dense_buffer[cnt,:128] = left_c             # <<<<<<<<<<<<<<
 *                 dense_buffer[cnt,128:256] = right_c
 * 
 */
  __pyx_slice__47 = PySlice_New(Py_None, __pyx_int_128, Py_None); if (unlikely(!__pyx_slice__47)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__47);
  __Pyx_GIVEREF(__pyx_slice__47);

  /* "gigaword2feature.pyx":942
 * 
 *                 dense_buffer[cnt,:128] = left_c
 *                 dense_buffer[cnt,128:256] = right_c             # <<<<<<<<<<<<<<
 * 
 *             # character-level fofe of initial of focus word(s)
 */
  __pyx_slice__48 = PySlice_New(__pyx_int_128, __pyx_int_256, Py_None); if (unlikely(!__pyx_slice__48)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__48);
  __Pyx_GIVEREF(__pyx_slice__48);

  /* "gigaword2feature.pyx":949
 *                 left_init, right_init = self.numericizer1.char_fofe_of_word(
 *                             ''.join( [ w[0] for w in sentence.sentence[begin_idx:end_idx] ] ) )
 *                 dense_buffer[cnt,256:384] = left_init             # <<<<<<<<<<<<<<
 *                 dense_buffer[cnt,384:512] = right_init
 * 
 */
  __pyx_slice__49 = PySlice_New(__pyx_int_256, __pyx_int_384, Py_None); if (unlikely(!__pyx_slice__49)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__49);
  __Pyx_GIVEREF(__pyx_slice__49);

  /* "gigaword2feature.pyx":950
 *                             ''.join( [ w[0] for w in sentence.sentence[begin_idx:end_idx] ] ) )
 *                 dense_buffer[cnt,256:384] = left_init
 *                 dense_buffer[cnt,384:512] = right_init             # <<<<<<<<<<<<<<
 * 
 *             # gazetteer match
 */
  __pyx_slice__50 = PySlice_New(__pyx_int_384, __pyx_int_512, Py_None); if (unlikely(!__pyx_slice__50)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__50);
  __Pyx_GIVEREF(__pyx_slice__50);

  /* "gigaword2feature.pyx":955
 * 
 *             if feature_choice & 256 > 0:
 *                 dense_buffer[cnt,512:] = next_example.gazetteer             # <<<<<<<<<<<<<<
 * 
 *             label.push_back( next_example.label )
 */
  __pyx_slice__51 = PySlice_New(__pyx_int_512, Py_None, Py_None); if (unlikely(!__pyx_slice__51)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__51);
  __Pyx_GIVEREF(__pyx_slice__51);

  /* "gigaword2feature.pyx":1032
 *                         numpy.reshape( bow2, [-1, 2] ),\
 *                         dense_buffer[:cnt].copy(),\
 *                         numpy.asarray( conv_idx ) if conv_idx.size() > 0 else numpy.empty((0,0), numpy.int64),\             # <<<<<<<<<<<<<<
 *                         numpy.asarray( lbc_values, dtype = numpy.float32 ), \
 *                         numpy.reshape( lbc_indices, [-1, 2]  ), \
 */
  __pyx_tuple__52 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "gigaword2feature.pyx":1133
 * 
 *         if len(tokens) == 4:
 *             word, ner = tokens[0], ner2idx[ tokens[-1].split('-')[-1] ]             # <<<<<<<<<<<<<<
 *             if ner != lastNer:
 *                 if lastNer != 4:
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s__53); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "gigaword2feature.pyx":1218
 * 
 *         table = numpy.empty((len(s), len(s)), dtype = object)
 *         table[:,:] = None #''             # <<<<<<<<<<<<<<
 *         estimate = set()
 *         actual = set( zip(boe, eoe, cls) )
 */
  __pyx_slice__55 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__55)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__55);
  __Pyx_GIVEREF(__pyx_slice__55);
  __pyx_slice__56 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__56)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__56);
  __Pyx_GIVEREF(__pyx_slice__56);
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_slice__55, __pyx_slice__56); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "gigaword2feature.pyx":1232
 *                     tokens = line.strip().split()
 *                     predicted_label = int(tokens[1])
 *                     all_prob = numpy.asarray([ numpy.float32(x) for x in tokens[2:] ])             # <<<<<<<<<<<<<<
 * 
 *                     if predicted_label == n_label_type:
 */
  __pyx_slice__58 = PySlice_New(__pyx_int_2, Py_None, Py_None); if (unlikely(!__pyx_slice__58)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__58);
  __Pyx_GIVEREF(__pyx_slice__58);

  /* "gigaword2feature.pyx":1251
 * 
 * def SentenceIterator( filename ):
 *     with open( filename, 'rb' ) as corpus:             # <<<<<<<<<<<<<<
 *         sentence = []
 *         for line in corpus:
 */
  __pyx_tuple__59 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "gigaword2feature.pyx":1411
 *                 # result |= decode( sentence, candidate, table, threshold[1:], algorithm[1:], callback )
 *                 # some adjacient tokens may merge and the merged one may produce conflit
 *                 candidate = decode( sentence, candidate, table, threshold[1:], algorithm[1:], callback )             # <<<<<<<<<<<<<<
 *                 for b2,e2,c2 in copy.deepcopy( candidate ):
 *                     if b2 == b1 and e2 == e1:
 */
  __pyx_slice__60 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__60)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__60);
  __Pyx_GIVEREF(__pyx_slice__60);
  __pyx_slice__61 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__61)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__61);
  __Pyx_GIVEREF(__pyx_slice__61);

  /* "gigaword2feature.pyx":1654
 *                 for i,w in enumerate( sent ):
 *                     sent[i] = u''.join( c if 0 <= ord(c) < 128 \
 *                                           else chr(0) for c in list(w) )             # <<<<<<<<<<<<<<
 *                 yield sent, boe, eoe, loe
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "gigaword2feature.pyx":1626
 *         for sentence, tag in islice( izip( sentences, tags ),
 *                                      start, stop, step ):
 *             if sentence.startswith( u'<p>' ) or \             # <<<<<<<<<<<<<<
 *                     sentence.startswith( u'</p>' ) or \
 *                     sentence.startswith( u'**********' ):
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_u_p); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 1626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "gigaword2feature.pyx":1627
 *                                      start, stop, step ):
 *             if sentence.startswith( u'<p>' ) or \
 *                     sentence.startswith( u'</p>' ) or \             # <<<<<<<<<<<<<<
 *                     sentence.startswith( u'**********' ):
 *                 continue
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_u_p_2); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 1627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "gigaword2feature.pyx":1628
 *             if sentence.startswith( u'<p>' ) or \
 *                     sentence.startswith( u'</p>' ) or \
 *                     sentence.startswith( u'**********' ):             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_u__66); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 1628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "gigaword2feature.pyx":1634
 *             boe, eoe, loe, to_keep = [], [], [], False
 *             for x in tag.split():
 *                 tokens = x.split( u',' )             # <<<<<<<<<<<<<<
 *                 boe.append( int(tokens[0]) )
 *                 eoe.append( int(tokens[1]) )
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_u__68); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "gigaword2feature.pyx":1622
 * 
 *     with codecs.open( sentence_file, 'rb', 'utf8' ) as sentences, \
 *          codecs.open( tag_file, 'rb', 'utf8' ) as tags:             # <<<<<<<<<<<<<<
 * 
 *         for sentence, tag in islice( izip( sentences, tags ),
 */
  __pyx_tuple__70 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "gigaword2feature.pyx":1621
 *         }
 * 
 *     with codecs.open( sentence_file, 'rb', 'utf8' ) as sentences, \             # <<<<<<<<<<<<<<
 *          codecs.open( tag_file, 'rb', 'utf8' ) as tags:
 * 
 */
  __pyx_tuple__71 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "../python-workspace/hopeless/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "gigaword2feature.pyx":39
 * 
 * 
 * def KBP2015( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_tuple__78 = PyTuple_Pack(16, __pyx_n_s_filename, __pyx_n_s_i, __pyx_n_s_cls, __pyx_n_s_cnt, __pyx_n_s_buffer_stack, __pyx_n_s_entity_begin, __pyx_n_s_engity_end, __pyx_n_s_entity_label, __pyx_n_s_entity2cls, __pyx_n_s_text_file, __pyx_n_s_line, __pyx_n_s_sentence, __pyx_n_s_label, __pyx_n_s_entity_end, __pyx_n_s_l, __pyx_n_s_tokens); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(1, 0, 16, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_KBP2015, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 39, __pyx_L1_error)

  /* "gigaword2feature.pyx":125
 * 
 * 
 * def gigaword( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_tuple__80 = PyTuple_Pack(17, __pyx_n_s_filename, __pyx_n_s_ner2cls, __pyx_n_s_number, __pyx_n_s_text_file, __pyx_n_s_n_discard, __pyx_n_s_line, __pyx_n_s_sentence, __pyx_n_s_ner_begin, __pyx_n_s_ner_end, __pyx_n_s_ner_label, __pyx_n_s_last_ner, __pyx_n_s_malformed, __pyx_n_s_p_3, __pyx_n_s_slash_idx, __pyx_n_s_word, __pyx_n_s_label, __pyx_n_s_ner); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 17, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_gigaword, 125, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 125, __pyx_L1_error)

  /* "gigaword2feature.pyx":189
 * 
 * 
 * def gazetteer( filename, mode = 'CoNLL2003' ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_tuple__83 = PyTuple_Pack(10, __pyx_n_s_filename, __pyx_n_s_mode, __pyx_n_s_result, __pyx_n_s_ner2cls, __pyx_n_s_text_file, __pyx_n_s_line, __pyx_n_s_tokens, __pyx_n_s__82, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_gazetteer, 189, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 189, __pyx_L1_error)

  /* "gigaword2feature.pyx":224
 * 
 * 
 * def CoNLL2003( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_tuple__85 = PyTuple_Pack(13, __pyx_n_s_filename, __pyx_n_s_ner2cls, __pyx_n_s_sentence, __pyx_n_s_ner_begin, __pyx_n_s_ner_end, __pyx_n_s_ner_label, __pyx_n_s_last_ner, __pyx_n_s_text_file, __pyx_n_s_line, __pyx_n_s_tokens, __pyx_n_s_word, __pyx_n_s_label, __pyx_n_s_ner); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(1, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_CoNLL2003, 224, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 224, __pyx_L1_error)

  /* "gigaword2feature.pyx":277
 * 
 * 
 * def prepare_mini_batch( batch_generator, batch_buffer, timeout ):             # <<<<<<<<<<<<<<
 *     """
 *     Put every single element that 'batch_generator' yields into 'batch_buffer'.
 */
  __pyx_tuple__87 = PyTuple_Pack(4, __pyx_n_s_batch_generator, __pyx_n_s_batch_buffer, __pyx_n_s_timeout, __pyx_n_s_x); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_prepare_mini_batch, 277, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 277, __pyx_L1_error)

  /* "gigaword2feature.pyx":292
 * 
 * class chinese_char_vocab( object ):
 *     def __init__( self, filename ):             # <<<<<<<<<<<<<<
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 */
  __pyx_tuple__89 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_filename, __pyx_n_s_fp, __pyx_n_s_c); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_init, 292, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 292, __pyx_L1_error)

  /* "gigaword2feature.pyx":300
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         # This must be same as in "skipgram-trainer.py"
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 */
  __pyx_tuple__91 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_sentence, __pyx_n_s_chars, __pyx_n_s_c_unk, __pyx_n_s_w, __pyx_n_s_has_chinese, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_c); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_sentence2indices, 300, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 300, __pyx_L1_error)

  /* "gigaword2feature.pyx":434
 *     The legancy code is strongly-typed. Polymorphism is the fastest fix.
 *     """
 *     def __init__( self, filename ):             # <<<<<<<<<<<<<<
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 */
  __pyx_tuple__93 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_filename, __pyx_n_s_fp, __pyx_n_s_w); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_init, 434, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 434, __pyx_L1_error)

  /* "gigaword2feature.pyx":443
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 */
  __pyx_tuple__95 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_sentence, __pyx_n_s_w_unk, __pyx_n_s_result, __pyx_n_s_w); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_sentence2indices, 443, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 443, __pyx_L1_error)

  /* "gigaword2feature.pyx":450
 * 
 * 
 *     def char_fofe_of_word( self ):             # <<<<<<<<<<<<<<
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_word'" )
 * 
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__97, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_char_fofe_of_word, 450, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 450, __pyx_L1_error)

  /* "gigaword2feature.pyx":454
 * 
 * 
 *     def char_fofe_of_phrase( self ):             # <<<<<<<<<<<<<<
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_phrase'" )
 * 
 */
  __pyx_tuple__99 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__99, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_char_fofe_of_phrase, 454, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(0, 454, __pyx_L1_error)

  /* "gigaword2feature.pyx":655
 * 
 * class batch_constructor:
 *     def __init__( self, parser,             # <<<<<<<<<<<<<<
 *                   numericizer1, numericizer2,
 *                   gazetteer = None, window = 7, alpha = 0.7,
 */
  __pyx_tuple__101 = PyTuple_Pack(29, __pyx_n_s_self, __pyx_n_s_parser, __pyx_n_s_numericizer1, __pyx_n_s_numericizer2, __pyx_n_s_gazetteer, __pyx_n_s_window, __pyx_n_s_alpha, __pyx_n_s_n_label_type, __pyx_n_s_language, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_unsure, __pyx_n_s_sentence, __pyx_n_s_ner_begin, __pyx_n_s_ner_end, __pyx_n_s_ner_label, __pyx_n_s_found, __pyx_n_s_label, __pyx_n_s_gazetteer_match, __pyx_n_s_name, __pyx_n_s_g, __pyx_n_s_char_sequence, __pyx_n_s_word_sequence, __pyx_n_s_token, __pyx_n_s_c, __pyx_n_s_w, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(9, 0, 29, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_init, 655, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 655, __pyx_L1_error)
  __pyx_tuple__103 = PyTuple_Pack(5, ((PyObject *)Py_None), ((PyObject *)__pyx_int_7), ((PyObject*)__pyx_float_0_7), ((PyObject *)__pyx_int_4), ((PyObject*)__pyx_n_s_eng)); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);

  /* "gigaword2feature.pyx":773
 * 
 * 
 *     def __str__( self ):             # <<<<<<<<<<<<<<
 *         """
 *         Returns
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_str, 773, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 773, __pyx_L1_error)

  /* "gigaword2feature.pyx":785
 * 
 *     @cython.boundscheck(False)
 *     def mini_batch( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 */
  __pyx_tuple__106 = PyTuple_Pack(56, __pyx_n_s_self, __pyx_n_s_n_batch_size, __pyx_n_s_shuffle_needed, __pyx_n_s_overlap_rate, __pyx_n_s_disjoint_rate, __pyx_n_s_feature_choice, __pyx_n_s_replace, __pyx_n_s_n_copy, __pyx_n_s_l1_values, __pyx_n_s_r1_values, __pyx_n_s_l1_indices, __pyx_n_s_r1_indices, __pyx_n_s_l2_values, __pyx_n_s_r2_values, __pyx_n_s_l2_indices, __pyx_n_s_r2_indices, __pyx_n_s_bow1, __pyx_n_s_l3_values, __pyx_n_s_r3_values, __pyx_n_s_l3_indices, __pyx_n_s_r3_indices, __pyx_n_s_l4_values, __pyx_n_s_r4_values, __pyx_n_s_l4_indices, __pyx_n_s_r4_indices, __pyx_n_s_bow2, __pyx_n_s_conv_idx, __pyx_n_s_conv_buff, __pyx_n_s_phrase, __pyx_n_s_reversed_phrase, __pyx_n_s_lbc_values, __pyx_n_s_lbc_indices, __pyx_n_s_rbc_values, __pyx_n_s_rbc_indices, __pyx_n_s_next_example, __pyx_n_s_sentence, __pyx_n_s_label, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_begin_idx, __pyx_n_s_end_idx, __pyx_n_s_cnt, __pyx_n_s_n, __pyx_n_s_phrase_max_length, __pyx_n_s_bigram_alpha, __pyx_n_s_has_char_feature, __pyx_n_s_dense_buffer, __pyx_n_s_disjoint, __pyx_n_s_overlap, __pyx_n_s_candidate, __pyx_n_s_left_c, __pyx_n_s_right_c, __pyx_n_s_left_init, __pyx_n_s_right_init, __pyx_n_s_w); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(8, 0, 56, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_mini_batch, 785, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 785, __pyx_L1_error)

  /* "gigaword2feature.pyx":1075
 * 
 * 
 *     def mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 */
  __pyx_tuple__108 = PyTuple_Pack(13, __pyx_n_s_self, __pyx_n_s_n_batch_size, __pyx_n_s_shuffle_needed, __pyx_n_s_overlap_rate, __pyx_n_s_disjoint_rate, __pyx_n_s_feature_choice, __pyx_n_s_replace, __pyx_n_s_timeout, __pyx_n_s_n_copy, __pyx_n_s_batch_generator, __pyx_n_s_batch_buffer, __pyx_n_s_t, __pyx_n_s_next_batch); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(9, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_mini_batch_multi_thread, 1075, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 1075, __pyx_L1_error)

  /* "gigaword2feature.pyx":1098
 * 
 * 
 *     def infinite_mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 */
  __pyx_tuple__110 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_n_batch_size, __pyx_n_s_shuffle_needed, __pyx_n_s_overlap_rate, __pyx_n_s_disjoint_rate, __pyx_n_s_feature_choice, __pyx_n_s_replace, __pyx_n_s_timeout, __pyx_n_s_n_copy, __pyx_n_s_next_batch); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(9, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_infinite_mini_batch_multi_thread, 1098, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 1098, __pyx_L1_error)

  /* "gigaword2feature.pyx":1120
 * 
 * 
 * def SampleGenerator( filename ):             # <<<<<<<<<<<<<<
 *     ner2idx = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3, 'O' : 4 }
 *     sentence, beginOfNer, endOfNer, nerCls = [], [], [], []
 */
  __pyx_tuple__112 = PyTuple_Pack(12, __pyx_n_s_filename, __pyx_n_s_ner2idx, __pyx_n_s_sentence, __pyx_n_s_beginOfNer, __pyx_n_s_endOfNer, __pyx_n_s_nerCls, __pyx_n_s_lastNer, __pyx_n_s_corpus, __pyx_n_s_line, __pyx_n_s_tokens, __pyx_n_s_word, __pyx_n_s_ner); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_SampleGenerator, 1120, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 1120, __pyx_L1_error)

  /* "gigaword2feature.pyx":1159
 * # def PredictionParser( dataset, result, ner_max_length,
 * #                       reinterpret_threshold = 0, n_label_type = 4 ):
 * def PredictionParser( sample_generator, result, ner_max_length,             # <<<<<<<<<<<<<<
 *                       reinterpret_threshold = 0, n_label_type = 4 ):
 *     """
 */
  __pyx_tuple__114 = PyTuple_Pack(26, __pyx_n_s_sample_generator, __pyx_n_s_result, __pyx_n_s_ner_max_length, __pyx_n_s_reinterpret_threshold, __pyx_n_s_n_label_type, __pyx_n_s_idx2ner, __pyx_n_s_fp, __pyx_n_s_sg, __pyx_n_s_lines, __pyx_n_s_cnt, __pyx_n_s_s, __pyx_n_s_boe, __pyx_n_s_eoe, __pyx_n_s_cls, __pyx_n_s_actual_2, __pyx_n_s_table, __pyx_n_s_estimate, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_line, __pyx_n_s_tokens, __pyx_n_s_predicted_label, __pyx_n_s_all_prob, __pyx_n_s_predicted, __pyx_n_s_probability, __pyx_n_s_x); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(5, 0, 26, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_PredictionParser, 1159, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 1159, __pyx_L1_error)

  /* "gigaword2feature.pyx":1250
 * 
 * 
 * def SentenceIterator( filename ):             # <<<<<<<<<<<<<<
 *     with open( filename, 'rb' ) as corpus:
 *         sentence = []
 */
  __pyx_tuple__116 = PyTuple_Pack(4, __pyx_n_s_filename, __pyx_n_s_corpus, __pyx_n_s_sentence, __pyx_n_s_line); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_SentenceIterator, 1250, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 1250, __pyx_L1_error)

  /* "gigaword2feature.pyx":1266
 * 
 * 
 * def __merge_adjacient( estimate ):             # <<<<<<<<<<<<<<
 *     best, i = set(), 0
 *     while i < len(estimate):
 */
  __pyx_tuple__118 = PyTuple_Pack(4, __pyx_n_s_estimate, __pyx_n_s_best, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_merge_adjacient, 1266, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 1266, __pyx_L1_error)

  /* "gigaword2feature.pyx":1284
 * 
 * 
 * def __decode_algo_1( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Highest scrore first
 */
  __pyx_tuple__120 = PyTuple_Pack(11, __pyx_n_s_sentence, __pyx_n_s_estimate, __pyx_n_s_table, __pyx_n_s_threshold, __pyx_n_s_callback, __pyx_n_s_removed, __pyx_n_s_i, __pyx_n_s_candidate, __pyx_n_s_b, __pyx_n_s_e, __pyx_n_s_c); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(5, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_decode_algo_1, 1284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 1284, __pyx_L1_error)

  /* "gigaword2feature.pyx":1308
 * 
 * 
 * def __decode_algo_2( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     longest coverage first
 */
  __pyx_tuple__122 = PyTuple_Pack(12, __pyx_n_s_sentence, __pyx_n_s_estimate, __pyx_n_s_table, __pyx_n_s_threshold, __pyx_n_s_callback, __pyx_n_s_candidate, __pyx_n_s_best, __pyx_n_s_b, __pyx_n_s_e, __pyx_n_s_c, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(5, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_decode_algo_2, 1308, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 1308, __pyx_L1_error)

  /* "gigaword2feature.pyx":1338
 * 
 * 
 * def __decode_algo_3( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     if callback is None:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 */
  __pyx_tuple__124 = PyTuple_Pack(15, __pyx_n_s_sentence, __pyx_n_s_estimate, __pyx_n_s_table, __pyx_n_s_threshold, __pyx_n_s_callback, __pyx_n_s_removed, __pyx_n_s_b1, __pyx_n_s_e1, __pyx_n_s_c1, __pyx_n_s_b2, __pyx_n_s_e2, __pyx_n_s_c2, __pyx_n_s_b, __pyx_n_s_e, __pyx_n_s_c); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(5, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_decode_algo_3, 1338, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 1338, __pyx_L1_error)

  /* "gigaword2feature.pyx":1357
 * 
 * 
 * def decode( sentence, estimate, table, threshold, algorithm, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_tuple__126 = PyTuple_Pack(14, __pyx_n_s_sentence, __pyx_n_s_estimate, __pyx_n_s_table, __pyx_n_s_threshold, __pyx_n_s_algorithm, __pyx_n_s_callback, __pyx_n_s_result, __pyx_n_s_b1, __pyx_n_s_e1, __pyx_n_s_c1, __pyx_n_s_candidate, __pyx_n_s_b2, __pyx_n_s_e2, __pyx_n_s_c2); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 1357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(6, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_decode, 1357, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 1357, __pyx_L1_error)

  /* "gigaword2feature.pyx":1424
 * 
 * 
 * def evaluation( prediction_parser, threshold, algorithm,             # <<<<<<<<<<<<<<
 *                 surpress_output = False, analysis = None, sentence_iterator = None,
 *                 n_label_type = 4, decoder_callback = None ):
 */
  __pyx_tuple__128 = PyTuple_Pack(34, __pyx_n_s_prediction_parser, __pyx_n_s_threshold, __pyx_n_s_algorithm, __pyx_n_s_surpress_output, __pyx_n_s_analysis, __pyx_n_s_sentence_iterator, __pyx_n_s_n_label_type, __pyx_n_s_decoder_callback, __pyx_n_s_si, __pyx_n_s_pp, __pyx_n_s_info, __pyx_n_s_idx2ner, __pyx_n_s_true_positive, __pyx_n_s_false_positive_2, __pyx_n_s_false_negative_2, __pyx_n_s_sentence, __pyx_n_s_table, __pyx_n_s_estimate, __pyx_n_s_actual_2, __pyx_n_s_sorted_est, __pyx_n_s_x, __pyx_n_s_original, __pyx_n_s_tag, __pyx_n_s_b, __pyx_n_s_e, __pyx_n_s_c, __pyx_n_s_i, __pyx_n_s_o, __pyx_n_s_t, __pyx_n_s_precision, __pyx_n_s_recall, __pyx_n_s_f_beta, __pyx_n_s_w, __pyx_n_s_l); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(8, 0, 34, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_evaluation, 1424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 1424, __pyx_L1_error)

  /* "gigaword2feature.pyx":1603
 * 
 * 
 * def distant_supervision_parser( sentence_file, tag_file,             # <<<<<<<<<<<<<<
 *                                 start = 0, stop = None, step = 1,
 *                                 mode = 'KBP' ):
 */
  __pyx_tuple__130 = PyTuple_Pack(24, __pyx_n_s_sentence_file, __pyx_n_s_tag_file, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_step, __pyx_n_s_mode, __pyx_n_s_str2idx, __pyx_n_s_sentences, __pyx_n_s_tags, __pyx_n_s_sentence, __pyx_n_s_tag, __pyx_n_s_boe, __pyx_n_s_eoe, __pyx_n_s_loe, __pyx_n_s_to_keep, __pyx_n_s_x, __pyx_n_s_tokens, __pyx_n_s_sent, __pyx_n_s_b, __pyx_n_s_e, __pyx_n_s_i, __pyx_n_s_w, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(6, 0, 24, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_eecs_research_asr_mingbin_ner_a, __pyx_n_s_distant_supervision_parser, 1603, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyList_Type_pop.type = (PyObject*)&PyList_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_7 = PyFloat_FromDouble(0.7); if (unlikely(!__pyx_float_0_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_256 = PyInt_FromLong(256); if (unlikely(!__pyx_int_256)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_384 = PyInt_FromLong(384); if (unlikely(!__pyx_int_384)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_512 = PyInt_FromLong(512); if (unlikely(!__pyx_int_512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_513 = PyInt_FromLong(513); if (unlikely(!__pyx_int_513)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initgigaword2feature(void); /*proto*/
PyMODINIT_FUNC initgigaword2feature(void)
#else
PyMODINIT_FUNC PyInit_gigaword2feature(void); /*proto*/
PyMODINIT_FUNC PyInit_gigaword2feature(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_gigaword2feature(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("gigaword2feature", __pyx_methods, __pyx_k_Author_Mingbin_Xu_mingbin_xu_gm, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_gigaword2feature) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "gigaword2feature")) {
      if (unlikely(PyDict_SetItemString(modules, "gigaword2feature", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_16gigaword2feature_vocabulary = &__pyx_vtable_16gigaword2feature_vocabulary;
  __pyx_vtable_16gigaword2feature_vocabulary.sentence2indices = (PyObject *(*)(struct __pyx_obj_16gigaword2feature_vocabulary *, PyObject *, std::vector<int>  &))__pyx_f_16gigaword2feature_10vocabulary_sentence2indices;
  if (PyType_Ready(&__pyx_type_16gigaword2feature_vocabulary) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_type_16gigaword2feature_vocabulary.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_16gigaword2feature_vocabulary.tp_dict, __pyx_vtabptr_16gigaword2feature_vocabulary) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "vocabulary", (PyObject *)&__pyx_type_16gigaword2feature_vocabulary) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_ptype_16gigaword2feature_vocabulary = &__pyx_type_16gigaword2feature_vocabulary;
  __pyx_vtabptr_16gigaword2feature_processed_sentence = &__pyx_vtable_16gigaword2feature_processed_sentence;
  __pyx_vtable_16gigaword2feature_processed_sentence.insert_left_fofe = (PyObject *(*)(struct __pyx_obj_16gigaword2feature_processed_sentence *, int, int, std::vector<int>  &, std::vector<float>  &))__pyx_f_16gigaword2feature_18processed_sentence_insert_left_fofe;
  __pyx_vtable_16gigaword2feature_processed_sentence.insert_right_fofe = (PyObject *(*)(struct __pyx_obj_16gigaword2feature_processed_sentence *, int, int, std::vector<int>  &, std::vector<float>  &))__pyx_f_16gigaword2feature_18processed_sentence_insert_right_fofe;
  __pyx_vtable_16gigaword2feature_processed_sentence.insert_bow = (PyObject *(*)(struct __pyx_obj_16gigaword2feature_processed_sentence *, int, int, int, std::vector<int>  &))__pyx_f_16gigaword2feature_18processed_sentence_insert_bow;
  if (PyType_Ready(&__pyx_type_16gigaword2feature_processed_sentence) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  __pyx_type_16gigaword2feature_processed_sentence.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_16gigaword2feature_processed_sentence, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 462, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_16gigaword2feature_18processed_sentence___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_16gigaword2feature_18processed_sentence___init__.doc = __pyx_doc_16gigaword2feature_18processed_sentence___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_16gigaword2feature_18processed_sentence___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_16gigaword2feature_processed_sentence.tp_dict, __pyx_vtabptr_16gigaword2feature_processed_sentence) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "processed_sentence", (PyObject *)&__pyx_type_16gigaword2feature_processed_sentence) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  __pyx_ptype_16gigaword2feature_processed_sentence = &__pyx_type_16gigaword2feature_processed_sentence;
  if (PyType_Ready(&__pyx_type_16gigaword2feature_example) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_type_16gigaword2feature_example.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "example", (PyObject *)&__pyx_type_16gigaword2feature_example) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_ptype_16gigaword2feature_example = &__pyx_type_16gigaword2feature_example;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct__KBP2015) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct__KBP2015.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct__KBP2015 = &__pyx_type_16gigaword2feature___pyx_scope_struct__KBP2015;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_1_gigaword) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_1_gigaword.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_1_gigaword = &__pyx_type_16gigaword2feature___pyx_scope_struct_1_gigaword;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_2_gazetteer) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_2_gazetteer.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_2_gazetteer = &__pyx_type_16gigaword2feature___pyx_scope_struct_2_gazetteer;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_3_genexpr.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_3_genexpr = &__pyx_type_16gigaword2feature___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_4_CoNLL2003) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_4_CoNLL2003.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_4_CoNLL2003 = &__pyx_type_16gigaword2feature___pyx_scope_struct_4_CoNLL2003;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_5_sentence2indices) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_5_sentence2indices.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_5_sentence2indices = &__pyx_type_16gigaword2feature___pyx_scope_struct_5_sentence2indices;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_6_genexpr.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_6_genexpr = &__pyx_type_16gigaword2feature___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_7_sentence2indices) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_7_sentence2indices.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_7_sentence2indices = &__pyx_type_16gigaword2feature___pyx_scope_struct_7_sentence2indices;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_8___init__) < 0) __PYX_ERR(0, 473, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_8___init__.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_8___init__ = &__pyx_type_16gigaword2feature___pyx_scope_struct_8___init__;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_9_genexpr) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_9_genexpr.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_9_genexpr = &__pyx_type_16gigaword2feature___pyx_scope_struct_9_genexpr;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_10___init__) < 0) __PYX_ERR(0, 655, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_10___init__.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_10___init__ = &__pyx_type_16gigaword2feature___pyx_scope_struct_10___init__;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_11_genexpr) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_11_genexpr.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_11_genexpr = &__pyx_type_16gigaword2feature___pyx_scope_struct_11_genexpr;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_12_mini_batch) < 0) __PYX_ERR(0, 785, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_12_mini_batch.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_12_mini_batch = &__pyx_type_16gigaword2feature___pyx_scope_struct_12_mini_batch;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread) < 0) __PYX_ERR(0, 1075, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread = &__pyx_type_16gigaword2feature___pyx_scope_struct_13_mini_batch_multi_thread;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread) < 0) __PYX_ERR(0, 1098, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread = &__pyx_type_16gigaword2feature___pyx_scope_struct_14_infinite_mini_batch_multi_thread;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_15_SampleGenerator) < 0) __PYX_ERR(0, 1120, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_15_SampleGenerator.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_15_SampleGenerator = &__pyx_type_16gigaword2feature___pyx_scope_struct_15_SampleGenerator;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_16_PredictionParser) < 0) __PYX_ERR(0, 1159, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_16_PredictionParser.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_16_PredictionParser = &__pyx_type_16gigaword2feature___pyx_scope_struct_16_PredictionParser;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_17_SentenceIterator) < 0) __PYX_ERR(0, 1250, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_17_SentenceIterator.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_17_SentenceIterator = &__pyx_type_16gigaword2feature___pyx_scope_struct_17_SentenceIterator;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_18___decode_algo_1) < 0) __PYX_ERR(0, 1284, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_18___decode_algo_1.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_18___decode_algo_1 = &__pyx_type_16gigaword2feature___pyx_scope_struct_18___decode_algo_1;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser) < 0) __PYX_ERR(0, 1603, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser = &__pyx_type_16gigaword2feature___pyx_scope_struct_19_distant_supervision_parser;
  if (PyType_Ready(&__pyx_type_16gigaword2feature___pyx_scope_struct_20_genexpr) < 0) __PYX_ERR(0, 1653, __pyx_L1_error)
  __pyx_type_16gigaword2feature___pyx_scope_struct_20_genexpr.tp_print = 0;
  __pyx_ptype_16gigaword2feature___pyx_scope_struct_20_genexpr = &__pyx_type_16gigaword2feature___pyx_scope_struct_20_genexpr;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "gigaword2feature.pyx":26
 *     bint regex_match( string& s, regex& r )
 * 
 * from scipy.sparse import csr_matrix             # <<<<<<<<<<<<<<
 * from Queue import Queue
 * from threading import Thread
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_csr_matrix);
  __Pyx_GIVEREF(__pyx_n_s_csr_matrix);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_csr_matrix);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_sparse, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_csr_matrix, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":27
 * 
 * from scipy.sparse import csr_matrix
 * from Queue import Queue             # <<<<<<<<<<<<<<
 * from threading import Thread
 * from itertools import izip, islice, imap
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Queue);
  __Pyx_GIVEREF(__pyx_n_s_Queue);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Queue);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_Queue, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Queue); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Queue, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":28
 * from scipy.sparse import csr_matrix
 * from Queue import Queue
 * from threading import Thread             # <<<<<<<<<<<<<<
 * from itertools import izip, islice, imap
 * from hanziconv import HanziConv
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Thread);
  __Pyx_GIVEREF(__pyx_n_s_Thread);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Thread);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_threading, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Thread); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Thread, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":29
 * from Queue import Queue
 * from threading import Thread
 * from itertools import izip, islice, imap             # <<<<<<<<<<<<<<
 * from hanziconv import HanziConv
 * import numpy, re, random, logging, codecs, copy
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_izip);
  __Pyx_GIVEREF(__pyx_n_s_izip);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_izip);
  __Pyx_INCREF(__pyx_n_s_islice);
  __Pyx_GIVEREF(__pyx_n_s_islice);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_islice);
  __Pyx_INCREF(__pyx_n_s_imap);
  __Pyx_GIVEREF(__pyx_n_s_imap);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_imap);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_izip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_izip, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_islice); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_islice, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_imap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_imap, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gigaword2feature.pyx":30
 * from threading import Thread
 * from itertools import izip, islice, imap
 * from hanziconv import HanziConv             # <<<<<<<<<<<<<<
 * import numpy, re, random, logging, codecs, copy
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_HanziConv);
  __Pyx_GIVEREF(__pyx_n_s_HanziConv);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_HanziConv);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hanziconv, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_HanziConv); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HanziConv, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":31
 * from itertools import izip, islice, imap
 * from hanziconv import HanziConv
 * import numpy, re, random, logging, codecs, copy             # <<<<<<<<<<<<<<
 * 
 * logger = logging.getLogger()
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_re, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_random, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_codecs, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_codecs, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_copy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_2) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":33
 * import numpy, re, random, logging, codecs, copy
 * 
 * logger = logging.getLogger()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":39
 * 
 * 
 * def KBP2015( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_1KBP2015, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KBP2015, __pyx_t_2) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":125
 * 
 * 
 * def gigaword( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_4gigaword, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gigaword, __pyx_t_2) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":189
 * 
 * 
 * def gazetteer( filename, mode = 'CoNLL2003' ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_7gazetteer, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gazetteer, __pyx_t_2) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":224
 * 
 * 
 * def CoNLL2003( filename ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_9CoNLL2003, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CoNLL2003, __pyx_t_2) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":277
 * 
 * 
 * def prepare_mini_batch( batch_generator, batch_buffer, timeout ):             # <<<<<<<<<<<<<<
 *     """
 *     Put every single element that 'batch_generator' yields into 'batch_buffer'.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_12prepare_mini_batch, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prepare_mini_batch, __pyx_t_2) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":291
 * ################################################################################
 * 
 * class chinese_char_vocab( object ):             # <<<<<<<<<<<<<<
 *     def __init__( self, filename ):
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_object);
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_chinese_char_vocab, __pyx_n_s_chinese_char_vocab, (PyObject *) NULL, __pyx_n_s_gigaword2feature, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "gigaword2feature.pyx":292
 * 
 * class chinese_char_vocab( object ):
 *     def __init__( self, filename ):             # <<<<<<<<<<<<<<
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_18chinese_char_vocab_1__init__, 0, __pyx_n_s_chinese_char_vocab___init, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":300
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         # This must be same as in "skipgram-trainer.py"
 *         chars, c_unk = [], self.word2idx[u'<unk>']
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_18chinese_char_vocab_3sentence2indices, 0, __pyx_n_s_chinese_char_vocab_sentence2indi_3, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_sentence2indices, __pyx_t_4) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":291
 * ################################################################################
 * 
 * class chinese_char_vocab( object ):             # <<<<<<<<<<<<<<
 *     def __init__( self, filename ):
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_chinese_char_vocab, __pyx_t_2, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chinese_char_vocab, __pyx_t_4) < 0) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":430
 * 
 * 
 * class chinese_word_vocab( vocabulary ):             # <<<<<<<<<<<<<<
 *     """
 *     The legancy code is strongly-typed. Polymorphism is the fastest fix.
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_16gigaword2feature_vocabulary));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_16gigaword2feature_vocabulary));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_16gigaword2feature_vocabulary));
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_2, __pyx_n_s_chinese_word_vocab, __pyx_n_s_chinese_word_vocab, (PyObject *) NULL, __pyx_n_s_gigaword2feature, __pyx_kp_s_The_legancy_code_is_strongly_ty); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "gigaword2feature.pyx":434
 *     The legancy code is strongly-typed. Polymorphism is the fastest fix.
 *     """
 *     def __init__( self, filename ):             # <<<<<<<<<<<<<<
 *         self.number = re.compile( r"^(?=[^A-Za-z]+$).*[0-9].*$".encode('utf8') )
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_18chinese_word_vocab_1__init__, 0, __pyx_n_s_chinese_word_vocab___init, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":443
 * 
 * 
 *     def sentence2indices( self, sentence ):             # <<<<<<<<<<<<<<
 *         w_unk = self.word2idx[u'<unk>']
 *         result = [ self.word2idx.get(w, w_unk) for w in \
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_18chinese_word_vocab_3sentence2indices, 0, __pyx_n_s_chinese_word_vocab_sentence2indi_2, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_sentence2indices, __pyx_t_4) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":450
 * 
 * 
 *     def char_fofe_of_word( self ):             # <<<<<<<<<<<<<<
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_word'" )
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_18chinese_word_vocab_5char_fofe_of_word, 0, __pyx_n_s_chinese_word_vocab_char_fofe_of, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_char_fofe_of_word, __pyx_t_4) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":454
 * 
 * 
 *     def char_fofe_of_phrase( self ):             # <<<<<<<<<<<<<<
 *         raise AttributeError( "'chinese_word_vocab' does not provide 'char_fofe_of_phrase'" )
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_18chinese_word_vocab_7char_fofe_of_phrase, 0, __pyx_n_s_chinese_word_vocab_char_fofe_of_2, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_char_fofe_of_phrase, __pyx_t_4) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gigaword2feature.pyx":430
 * 
 * 
 * class chinese_word_vocab( vocabulary ):             # <<<<<<<<<<<<<<
 *     """
 *     The legancy code is strongly-typed. Polymorphism is the fastest fix.
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_chinese_word_vocab, __pyx_t_2, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chinese_word_vocab, __pyx_t_4) < 0) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":654
 * 
 * 
 * class batch_constructor:             # <<<<<<<<<<<<<<
 *     def __init__( self, parser,
 *                   numericizer1, numericizer2,
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_batch_constructor, __pyx_n_s_batch_constructor, (PyObject *) NULL, __pyx_n_s_gigaword2feature, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "gigaword2feature.pyx":655
 * 
 * class batch_constructor:
 *     def __init__( self, parser,             # <<<<<<<<<<<<<<
 *                   numericizer1, numericizer2,
 *                   gazetteer = None, window = 7, alpha = 0.7,
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_17batch_constructor_1__init__, 0, __pyx_n_s_batch_constructor___init, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__103);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_init, __pyx_t_3) < 0) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":773
 * 
 * 
 *     def __str__( self ):             # <<<<<<<<<<<<<<
 *         """
 *         Returns
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_17batch_constructor_3__str__, 0, __pyx_n_s_batch_constructor___str, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_str, __pyx_t_3) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":786
 *     @cython.boundscheck(False)
 *     def mini_batch( self, int n_batch_size,
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,             # <<<<<<<<<<<<<<
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 *                     bint replace = False, int n_copy = 1  ):
 */
  __pyx_t_3 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_FromDouble(((double)0.36)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "gigaword2feature.pyx":787
 *     def mini_batch( self, int n_batch_size,
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,
 *                     float disjoint_rate = 0.08, int feature_choice = 255,             # <<<<<<<<<<<<<<
 *                     bint replace = False, int n_copy = 1  ):
 *         """
 */
  __pyx_t_4 = PyFloat_FromDouble(((double)0.08)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(((int)0xFF)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "gigaword2feature.pyx":788
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 *                     bint replace = False, int n_copy = 1  ):             # <<<<<<<<<<<<<<
 *         """
 *         The generator yields mini batches of size 'n_batch_size'. Based on
 */
  __pyx_t_6 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_int(((int)1)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "gigaword2feature.pyx":785
 * 
 *     @cython.boundscheck(False)
 *     def mini_batch( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                     bint shuffle_needed = True, float overlap_rate = 0.36,
 *                     float disjoint_rate = 0.08, int feature_choice = 255,
 */
  __pyx_t_8 = PyTuple_New(6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_7);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_17batch_constructor_5mini_batch, 0, __pyx_n_s_batch_constructor_mini_batch, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_7, __pyx_t_8);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_mini_batch, __pyx_t_7) < 0) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "gigaword2feature.pyx":1076
 * 
 *     def mini_batch_multi_thread( self, int n_batch_size,
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,             # <<<<<<<<<<<<<<
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 *                                  bint replace = False, float timeout = -1, int n_copy = 1  ):
 */
  __pyx_t_7 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(((double)0.36)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "gigaword2feature.pyx":1077
 *     def mini_batch_multi_thread( self, int n_batch_size,
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,             # <<<<<<<<<<<<<<
 *                                  bint replace = False, float timeout = -1, int n_copy = 1  ):
 *         """
 */
  __pyx_t_6 = PyFloat_FromDouble(((double)0.08)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyInt_From_int(((int)0xFF)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "gigaword2feature.pyx":1078
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 *                                  bint replace = False, float timeout = -1, int n_copy = 1  ):             # <<<<<<<<<<<<<<
 *         """
 *         Same as self.mini_batch except that data preparation is done on the background
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyFloat_FromDouble(((float)-1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(((int)1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "gigaword2feature.pyx":1075
 * 
 * 
 *     def mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                  bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                  float disjoint_rate = 0.08, int feature_choice = 255,
 */
  __pyx_t_9 = PyTuple_New(7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 6, __pyx_t_3);
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_17batch_constructor_8mini_batch_multi_thread, 0, __pyx_n_s_batch_constructor_mini_batch_mul, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_t_9);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_mini_batch_multi_thread, __pyx_t_3) < 0) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gigaword2feature.pyx":1099
 * 
 *     def infinite_mini_batch_multi_thread( self, int n_batch_size,
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,             # <<<<<<<<<<<<<<
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 *                                           bint replace = True, float timeout = -1, int n_copy = 10  ):
 */
  __pyx_t_3 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = PyFloat_FromDouble(((double)0.36)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "gigaword2feature.pyx":1100
 *     def infinite_mini_batch_multi_thread( self, int n_batch_size,
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,             # <<<<<<<<<<<<<<
 *                                           bint replace = True, float timeout = -1, int n_copy = 10  ):
 *         """
 */
  __pyx_t_1 = PyFloat_FromDouble(((double)0.08)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_int(((int)0xFF)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "gigaword2feature.pyx":1101
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 *                                           bint replace = True, float timeout = -1, int n_copy = 10  ):             # <<<<<<<<<<<<<<
 *         """
 *         Same as self.mini_batch_multi_thread except that sampling is done infinitely.
 */
  __pyx_t_5 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(((float)-1.0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyInt_From_int(((int)10)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "gigaword2feature.pyx":1098
 * 
 * 
 *     def infinite_mini_batch_multi_thread( self, int n_batch_size,             # <<<<<<<<<<<<<<
 *                                           bint shuffle_needed = True, float overlap_rate = 0.36,
 *                                           float disjoint_rate = 0.08, int feature_choice = 255,
 */
  __pyx_t_7 = PyTuple_New(7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 6, __pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_9 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_16gigaword2feature_17batch_constructor_11infinite_mini_batch_multi_thread, 0, __pyx_n_s_batch_constructor_infinite_mini, NULL, __pyx_n_s_gigaword2feature, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_8, __pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_infinite_mini_batch_multi_thread, __pyx_t_8) < 0) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "gigaword2feature.pyx":654
 * 
 * 
 * class batch_constructor:             # <<<<<<<<<<<<<<
 *     def __init__( self, parser,
 *                   numericizer1, numericizer2,
 */
  __pyx_t_8 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_batch_constructor, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_batch_constructor, __pyx_t_8) < 0) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1120
 * 
 * 
 * def SampleGenerator( filename ):             # <<<<<<<<<<<<<<
 *     ner2idx = { 'PER' : 0, 'LOC' : 1, 'ORG' : 2, 'MISC' : 3, 'O' : 4 }
 *     sentence, beginOfNer, endOfNer, nerCls = [], [], [], []
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_14SampleGenerator, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SampleGenerator, __pyx_t_2) < 0) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1159
 * # def PredictionParser( dataset, result, ner_max_length,
 * #                       reinterpret_threshold = 0, n_label_type = 4 ):
 * def PredictionParser( sample_generator, result, ner_max_length,             # <<<<<<<<<<<<<<
 *                       reinterpret_threshold = 0, n_label_type = 4 ):
 *     """
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_17PredictionParser, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PredictionParser, __pyx_t_2) < 0) __PYX_ERR(0, 1159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1250
 * 
 * 
 * def SentenceIterator( filename ):             # <<<<<<<<<<<<<<
 *     with open( filename, 'rb' ) as corpus:
 *         sentence = []
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_20SentenceIterator, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SentenceIterator, __pyx_t_2) < 0) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1266
 * 
 * 
 * def __merge_adjacient( estimate ):             # <<<<<<<<<<<<<<
 *     best, i = set(), 0
 *     while i < len(estimate):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_23__merge_adjacient, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_merge_adjacient, __pyx_t_2) < 0) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1284
 * 
 * 
 * def __decode_algo_1( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Highest scrore first
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_25__decode_algo_1, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode_algo_1, __pyx_t_2) < 0) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1308
 * 
 * 
 * def __decode_algo_2( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     longest coverage first
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_27__decode_algo_2, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode_algo_2, __pyx_t_2) < 0) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1338
 * 
 * 
 * def __decode_algo_3( sentence, estimate, table, threshold, callback = None ):             # <<<<<<<<<<<<<<
 *     if callback is None:
 *         removed = set( [ (b, e, c) for (b, e, c) in estimate if table[b][e - 1][1] < threshold ] )
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_29__decode_algo_3, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode_algo_3, __pyx_t_2) < 0) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1357
 * 
 * 
 * def decode( sentence, estimate, table, threshold, algorithm, callback = None ):             # <<<<<<<<<<<<<<
 *     """
 *     Parameters
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_31decode, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decode, __pyx_t_2) < 0) __PYX_ERR(0, 1357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1424
 * 
 * 
 * def evaluation( prediction_parser, threshold, algorithm,             # <<<<<<<<<<<<<<
 *                 surpress_output = False, analysis = None, sentence_iterator = None,
 *                 n_label_type = 4, decoder_callback = None ):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_33evaluation, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluation, __pyx_t_2) < 0) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1603
 * 
 * 
 * def distant_supervision_parser( sentence_file, tag_file,             # <<<<<<<<<<<<<<
 *                                 start = 0, stop = None, step = 1,
 *                                 mode = 'KBP' ):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_16gigaword2feature_35distant_supervision_parser, NULL, __pyx_n_s_gigaword2feature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_distant_supervision_parser, __pyx_t_2) < 0) __PYX_ERR(0, 1603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gigaword2feature.pyx":1
 * """             # <<<<<<<<<<<<<<
 * Author      : Mingbin Xu (mingbin.xu@gmail.com)
 * Filename    : gigaword2feature.pyx
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init gigaword2feature", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init gigaword2feature");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
      static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
      static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* GetItemInt */
      static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* BytesEquals */
      static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
      static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* SliceObject */
      static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* SaveResetException */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
      #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyIntBinop */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* PyIntBinop */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* dict_getitem_default */
        static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

/* RaiseDoubleKeywords */
        static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
        static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
        static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCallMethod0 */
        static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
        static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
        static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
        static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
        static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* None */
        static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* StringJoin */
        #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
        static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_COMPILING_IN_CPYTHON
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    PyObject *self = f->m_self;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* UnicodeAsUCS4 */
            static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* object_ord */
            static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyBytes_AS_STRING(c)[0];
        }
#if PY_MAJOR_VERSION < 3
    } else if (PyUnicode_Check(c)) {
        return (long)__Pyx_PyUnicode_AsPy_UCS4(c);
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    } else if (PyByteArray_Check(c)) {
        size = PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
        }
#endif
    } else {
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but %.200s found", c->ob_type->tp_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* SetItemInt */
            static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* RaiseException */
              #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* None */
                static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* ExtTypeTest */
                static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* WriteUnraisableException */
                static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectCallMethod1 */
                static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

/* append */
                static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyIntBinop */
                #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
                static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* PyIntBinop */
                #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* UnpackUnboundCMethod */
                static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(PyObject_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_O | METH_NOARGS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
                static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* pop */
                static CYTHON_INLINE PyObject* __Pyx__PyObject_Pop(PyObject* L) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (Py_TYPE(L) == &PySet_Type) {
        return PySet_Pop(L);
    }
#endif
    return __Pyx_PyObject_CallMethod0(L, __pyx_n_s_pop);
}
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_Pop(PyObject* L) {
    if (likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        Py_SIZE(L) -= 1;
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
    return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyList_Type_pop, L);
}
#endif

/* pyobject_as_double */
                static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if CYTHON_COMPILING_IN_PYPY
    float_value = PyNumber_Float(obj);  if (0) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* None */
                static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SetVTable */
                static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
                static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
                static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
                static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
                static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CodeObjectCache */
                static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
                #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Print */
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* None */
                #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
                #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* None */
                #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
                #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* PrintOne */
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* SwapException */
                #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
                #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
#if PY_VERSION_HEX >= 0x030300A0
        if (ev && Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
#endif
        if (!ev || !PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            } else if (PyTuple_Check(ev)) {
                if (PyTuple_GET_SIZE(ev) >= 1) {
                    PyObject *value;
#if CYTHON_COMPILING_IN_CPYTHON
                    value = PySequence_ITEM(ev, 0);
#else
                    value = PyTuple_GET_ITEM(ev, 0);
                    Py_INCREF(value);
#endif
                    Py_DECREF(ev);
                    ev = value;
                } else {
                    Py_INCREF(Py_None);
                    Py_DECREF(ev);
                    ev = Py_None;
                }
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject* type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                    static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                    #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                    static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                    #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                    #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
